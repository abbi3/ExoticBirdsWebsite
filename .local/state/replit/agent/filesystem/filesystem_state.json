{"file_contents":{"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/QuickFacts.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Globe, Clock, Ruler, Volume2 } from \"lucide-react\";\n\ninterface QuickFactsProps {\n  scientificName: string;\n  origin: string;\n  lifespan: string;\n  size: string;\n  noiseLevel: string;\n}\n\nexport default function QuickFacts({ scientificName, origin, lifespan, size, noiseLevel }: QuickFactsProps) {\n  const facts = [\n    { icon: Globe, label: \"Scientific Name\", value: scientificName, italic: true },\n    { icon: Globe, label: \"Origin\", value: origin },\n    { icon: Clock, label: \"Lifespan\", value: lifespan },\n    { icon: Ruler, label: \"Size\", value: size.charAt(0).toUpperCase() + size.slice(1) },\n    { icon: Volume2, label: \"Noise Level\", value: noiseLevel.charAt(0).toUpperCase() + noiseLevel.slice(1) },\n  ];\n\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"font-semibold mb-4\">Quick Facts</h3>\n      <div className=\"space-y-3\">\n        {facts.map((fact, index) => (\n          <div key={index} className=\"flex items-start gap-3\" data-testid={`fact-${fact.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <fact.icon className=\"h-4 w-4 text-muted-foreground mt-0.5 flex-shrink-0\" />\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-xs text-muted-foreground\">{fact.label}</p>\n              <p className={`text-sm font-medium ${fact.italic ? 'italic' : ''}`}>\n                {fact.value}\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1489},"replit.md":{"content":"# Exotic Birds Info\n\n## Overview\nExotic Birds Info is a web application for cataloging exotic pet birds available in India, providing detailed species profiles, care guides, pricing, and legal compliance. It features advanced search, user authentication, a \"Bird Care\" subscription service with tiered plans, a recommender, an admin panel for subscriber management, and a complete **Appointment Booking Module** for scheduling consultations with a credit-based system.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend\n- **Framework:** React 18 with TypeScript, using Vite.\n- **Routing:** Wouter for client-side routing.\n- **UI & Styling:** Tailwind CSS, Shadcn UI (New York variant), Lucide React for iconography, custom CSS variables for theme support.\n- **State Management:** TanStack Query for server state, React hooks for local state.\n- **Component Structure:** Reusable UI, feature-specific, and page components.\n\n### Backend\n- **Server:** Express.js with custom middleware.\n- **Data Storage:** PostgreSQL with Drizzle ORM for user and subscriber data. Static bird data in `client/src/lib/birdsData.ts`. Bcrypt for password hashing.\n- **Development:** Vite integration for HMR.\n- **Data Validation:** Zod schemas integrated with Drizzle ORM.\n\n### System Design\n- **UI/UX:** Material Design influence, consistent typography (Inter font), comprehensive spacing, light/dark modes.\n- **Responsive Design:** Mobile-first approach with breakpoints for mobile, tablet, and desktop. Responsive navigation, filtering, hero carousel, grid layouts, and typography.\n- **Authentication:**\n    - **Unified Login:** Main login page at `/login` serves both regular users and admin. Enter mobile + password, system automatically detects user type and redirects to appropriate dashboard.\n    - **User Signup:** Multi-step signup process with OTP verification:\n        1. **Step 1:** Enter mobile number → SMS OTP sent via Twilio\n        2. **Step 2:** Enter 4-digit OTP to verify mobile number\n        3. **Step 3:** Enter username and password to complete account creation\n        - Creates standalone user accounts without requiring a subscription first\n        - Mobile verification required before account can be finalized\n    - **OTP Verification Security:**\n        - 4-digit OTP sent via Twilio SMS integration\n        - 5-minute expiry window for OTPs\n        - OTPs encrypted with bcrypt before database storage\n        - Rate limiting: Maximum 3 failed verification attempts per 10 minutes per phone number\n        - Resend cooldown: 30-second wait between OTP resend requests\n        - Twilio message SID tracked for audit trail\n        - Temporary accounts created during OTP flow, finalized only after mobile verification\n    - **User Dashboard:** Protected at `/user-dashboard` with subscription overview and bird details management.\n    - **Admin Dashboard:** Protected at `/admin/dashboard` with subscription management, user details, and audit logs. Includes user accounts tab showing mobile verification status.\n    - **Alternative Pages:** Separate admin login page at `/admin/login` (automatically prepends +91 to mobile numbers) and user login at `/user-account/login` also available.\n    - **Password Requirements:** Min 8 chars, 1 uppercase, 1 number, 1 special char (for signup).\n    - **Session Management:** Session-based authentication with secure cookies and Bcrypt hashing (10 salt rounds).\n    - **Admin Credentials:** Mobile: 7032645053 (stored as +917032645053 in database), Password: Huzi@123.\n    - **Enhanced Login Error Messages:** Login endpoint now provides specific error messages distinguishing between \"No account found\" vs \"Password incorrect\" vs \"Complete account setup\" for better user experience.\n- **Payment Integration:**\n    - **Razorpay Gateway:** Integrated for secure online payments supporting credit/debit cards, UPI, netbanking, and wallets\n    - **Server-Side Security:** All payment amounts calculated server-side (never trusts client input to prevent underpayment attacks)\n    - **Payment Flow:** User fills subscription form → Razorpay checkout opens → Payment processed → Signature verification → Subscription auto-created\n    - **Amount Verification:** Server validates payment amount matches expected subscription price before activating subscription\n    - **API Keys:** Stored securely in Replit secrets (RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET)\n    - **Payment Tracking:** Razorpay order ID, payment ID, and signature stored in database for audit trail\n    - **Performance Optimization:**\n        - DNS prefetch and preconnect hints for Razorpay domains (checkout.razorpay.com, api.razorpay.com, lumberjack.razorpay.com) to reduce initial connection latency\n        - Loading toast displayed before payment modal opens for better user feedback\n        - Enhanced modal configuration: backdrop dismissible (click outside or press ESC to close), smooth animations, transparent backdrop (60% opacity)\n        - Prefill user name and phone number to reduce data entry\n        - Modal optimization improves perceived performance and allows users to cancel easily\n- **Database Schema:**\n    - `admin_users`: Stores admin credentials.\n    - `subscription_requests`: Includes `subscriptionPlan`, `subscriptionStartDate`, `subscriptionEndDate`, `amountPaid`, `consultationsRemaining`, `discountCoupon`, `status`, `razorpayOrderId`, `razorpayPaymentId`, `razorpaySignature`, `paymentStatus`.\n    - `audit_logs`: Tracks consultation updates.\n    - `user_accounts`: Stores user login details (phone, password, full name, optional subscription ID, OTP verification fields: `otp`, `otp_expiry`, `is_mobile_verified`, `verified_at`, `twilio_message_sid`, `last_otp_sent_at`).\n    - `otp_attempts`: Tracks failed OTP verification attempts for rate limiting (phone, attempt_count, window_start).\n    - `bird_details`: Stores individual bird information (name, species, ring ID, weight, age, issues) linked to user accounts.\n    - `appointments`: Stores consultation bookings (id, userPhone, fullName, subscriptionId, birdName, appointmentDate, slotStartTime, slotEndTime, symptoms, status: scheduled/completed/canceled, adminNotes, cancellation details, creditRestored flag).\n    - `blocked_slots`: Admin-managed blocked time slots (id, blockDate, slotStartTime optional for blocking entire day, reason, createdBy).\n    - `appointment_settings`: System-wide appointment configuration (slotDuration default 30min, maxDaysAdvanceBooking, cancellationWindowHours default 12, workingHoursStart, workingHoursEnd, weekendBookingEnabled).\n- **Admin Panel Features:** \n    - **Unified User Management:** Single consolidated view merging user accounts and subscriptions into one table at `/admin/dashboard`\n    - **Unified Table Displays:** All users with columns: User (name, phone, verification badge), Subscription Status (Active/Expired/Exhausted/No Subscription), Plan, Consultations Remaining, Valid Until, Actions\n    - **Subscription Status Computation:** Backend automatically calculates status based on subscription dates and current status (Active if valid and unexpired, Expired if past end date, Exhausted if consultations depleted, No Subscription if none exists)\n    - **Stats Dashboard:** Quick overview cards showing Total Users, Active Subscriptions (green), Expired (orange), and No Subscription (gray) counts\n    - **Search & Filters:** \n        - Search by user name or phone number\n        - Filter by subscription status (All/Active/Expired/Exhausted/No Subscription)\n        - Filter by subscription plan (All/Monthly/6-Month/Annual)\n    - **User Actions (All Users):**\n        - View Details: Opens modal showing user info and subscription details\n        - Delete User Account: Permanently deletes user account with confirmation dialog (cascades to remove bird_details)\n    - **Subscription Actions (Users with Subscriptions Only):**\n        - Edit Subscription: Modify subscription details (plan, dates, amount, bird species, status)\n        - **Update Consultations:** Set consultation counts using preset values (2/Monthly, 18/6-Month, 48/Annual) OR enter any custom number (0-1000) via input field\n        - Delete Subscription: Remove subscription while keeping user account intact\n        - Audit logging for all consultation changes\n    - **Backend Architecture:** Uses `/api/admin/user-subscriptions` endpoint with LEFT JOIN between user_accounts and subscription_requests tables for efficient data retrieval\n    - Security measures like session regeneration and protected routes\n    - **Phone Number Format:** All phone numbers stored with country codes (e.g., +917032645053, +918989898989)\n- **User Account Features:** Personal dashboard showing subscription details, add/edit/delete multiple bird records, track remaining consultations, and secure password management with specific requirements (min 8 chars, 1 uppercase, 1 number, 1 special char).\n- **Subscription Prompt:** When users log in without a subscription, they see an attractive subscription prompt instead of \"No subscription found\". Features gradient background, three plan cards (Monthly, 6-Month, Annual) with pricing and benefits, \"Best Value\" badge on annual plan, comprehensive benefits list with checkmarks, and prominent CTAs (\"Subscribe Now\" and \"Learn More\" buttons).\n- **Subscription & Discount System:** Tiered monthly, 6-month, and annual plans with dynamic pricing and discounts. Optional discount coupon code field with real-time validation. Server-side calculation of start/end dates, consultation counts, and discount application.\n    - **Subscription Pricing (Updated October 2025):**\n        - Monthly Plan: ₹2,200 (was ₹2,750), 20% OFF, 2 consultations/month\n        - 6-Month Plan: ₹12,375 (was ₹16,500), 25% OFF, 18 consultations total\n        - Annual Plan: ₹23,100 (was ₹33,000), 30% OFF, 48 consultations total\n    - **Discount Coupons:**\n        - FFF796-FFF886: 10%-100% percentage discounts (increments of 10%)\n        - FFFTEST: Special test coupon that sets subscription amount to ₹1 for any plan (for testing payment gateway)\n        - Coupon logic is consistent across all endpoints: `/api/subscription-requests`, `/api/razorpay/create-order`, and `/api/razorpay/verify-payment`\n    - **Instagram Promotional Section:** Featured prominently on subscription page after pricing plans\n        - Gradient background card with pink/purple/orange theme\n        - \"Contact Admin on Instagram\" button linking to @fancy_feathers_india\n        - Encourages followers to request exclusive discount coupons from the admin\n        - Instagram URL: https://www.instagram.com/fancy_feathers_india/\n- **Subscription Success Flow:** Replaced toast notification with a full success dialog featuring a green checkmark, a \"Contact on WhatsApp\" button with pre-filled message including user details and transaction ID, and a \"Close\" button.\n- **Policy Pages:** Five publicly accessible policy pages with consistent layout, SEO meta tags, and footer navigation:\n    - **Terms and Conditions** (`/terms-and-conditions`): Nature of service, subscriptions, payments, user responsibilities, disclaimer, and terms updates\n    - **Cancellation & Refund Policy** (`/cancellation-refund`): Consultation subscriptions policy, cancellation before activation, refund approval process, and support contact\n    - **Shipping Policy** (`/shipping-policy`): Clarifies digital-only services with no physical shipping\n    - **Privacy Policy** (`/privacy-policy`): Information collection, usage, data protection, third-party integrations, and user rights\n    - **Contact Us** (`/contact-us`): Email (ali@fancyfeathers.co.in), WhatsApp (+91 9014284059), website, location (Hyderabad, India), and business hours (Monday – Saturday, 10:00 AM – 7:00 PM)\n    - All pages include footer with links to all policy pages and Home button for easy navigation\n\n## External Dependencies\n\n- **Database:** Drizzle ORM for PostgreSQL, `@neondatabase/serverless` driver.\n- **UI Component Libraries:** Radix UI, `class-variance-authority`, `cmdk`, `embla-carousel-react`, `react-day-picker`, `vaul`, `input-otp`.\n- **Form Handling:** `react-hook-form` with `@hookform/resolvers` for Zod validation.\n- **Authentication:** `bcryptjs`, `express-session`, `connect-pg-simple`.\n- **SMS Integration:** `twilio` for sending OTP verification SMS messages.\n- **Payment Gateway:** `razorpay` for secure online subscription payments with signature verification.\n- **Utilities:** `date-fns`, `clsx`, `tailwind-merge`, `nanoid`.\n- **Image Assets:** Static bird images in `attached_assets/`.","size_bytes":12668},"client/src/pages/BirdCareSubscription.tsx":{"content":"import { Check, Stethoscope, Award, Heart, CheckCircle2 } from \"lucide-react\";\nimport { SiInstagram } from \"react-icons/si\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { SubscriptionRequestData } from \"@shared/schema\";\nimport { birdsData } from \"@/lib/birdsData\";\nimport qrCode from '@assets/WhatsApp Image 2025-10-24 at 14.19.59_1761299053328.jpeg';\nimport doctorImage from '@assets/ChatGPT Image Oct 24, 2025, 08_08_37 PM_1761321114141.png';\nimport ReviewCarousel from \"@/components/ReviewCarousel\";\nimport SocialProofWidget from \"@/components/SocialProofWidget\";\n\nexport default function BirdCareSubscription() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  // Check if user is already logged in\n  const { data: sessionData } = useQuery<any>({\n    queryKey: [\"/api/user-account/session\"],\n  });\n\n  // Fetch subscription details if user is logged in\n  const { data: subscriptionData } = useQuery<any>({\n    queryKey: [\"/api/user-account/subscription\"],\n    enabled: !!sessionData?.account,\n  });\n  const [step, setStep] = useState<'initial' | 'form' | 'payment'>('initial');\n  const [formData, setFormData] = useState({\n    fullName: '',\n    mobileNumber: '',\n    birdSpecies: '',\n    transactionId: ''\n  });\n  const [customSpecies, setCustomSpecies] = useState('');\n  const [showDoctorProfile, setShowDoctorProfile] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\n  const [showPlanModal, setShowPlanModal] = useState(false);\n  const [showSuccessDialog, setShowSuccessDialog] = useState(false);\n  const [successData, setSuccessData] = useState<{\n    fullName: string;\n    mobileNumber: string;\n    transactionId: string;\n    planType: string;\n    subscriptionId: string;\n  } | null>(null);\n  const [couponCode, setCouponCode] = useState('');\n  const [couponDiscount, setCouponDiscount] = useState(0);\n  const [couponError, setCouponError] = useState('');\n\n  const subscriptionMutation = useMutation({\n    mutationFn: async (data: SubscriptionRequestData) => {\n      return await apiRequest('POST', '/api/subscription-requests', data);\n    },\n    onSuccess: (response: any) => {\n      // Store success data before resetting form\n      setSuccessData({\n        fullName: formData.fullName,\n        mobileNumber: formData.mobileNumber,\n        transactionId: formData.transactionId,\n        planType: selectedPlan || 'Monthly',\n        subscriptionId: response.subscriptionRequest?.id || ''\n      });\n      \n      // Show success dialog\n      setShowSuccessDialog(true);\n      \n      // Reset form and close modals\n      setStep('initial');\n      setShowPlanModal(false);\n      setSelectedPlan(null);\n      setFormData({\n        fullName: '',\n        mobileNumber: '',\n        birdSpecies: '',\n        transactionId: ''\n      });\n      setCustomSpecies('');\n      setCouponCode('');\n      setCouponDiscount(0);\n      setCouponError('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Subscription Failed\",\n        description: error.message || \"An error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleFormSubmit = async () => {\n    // If user is logged in, skip validation and use their data\n    if (sessionData?.account) {\n      handleRazorpayPayment();\n      return;\n    }\n\n    // Validate form for non-logged-in users\n    if (!formData.fullName.trim() || formData.fullName.length < 2) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter your full name (at least 2 characters)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.birdSpecies) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a bird species\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // If \"Other\" is selected, validate custom species input\n    if (formData.birdSpecies === 'Other' && !customSpecies.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please specify your bird species\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Open Razorpay payment\n    handleRazorpayPayment();\n  };\n\n  const handleRazorpayPayment = async () => {\n    try {\n      // Show loading indicator\n      toast({\n        title: \"Preparing Payment\",\n        description: \"Please wait while we set up your payment...\",\n      });\n\n      // Use logged-in user data if available, otherwise use form data\n      const userName = sessionData?.account?.fullName || formData.fullName;\n      const userPhone = sessionData?.account?.phone || formData.mobileNumber;\n      const birdSpecies = sessionData?.account ? 'General' : (formData.birdSpecies === 'Other' ? customSpecies.trim() : formData.birdSpecies);\n\n      // Create Razorpay order (amount is calculated server-side for security)\n      const orderResponse = await fetch('/api/razorpay/create-order', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          subscriptionPlan: selectedPlan,\n          discountCoupon: couponCode || null\n        })\n      });\n\n      const orderData = await orderResponse.json();\n\n      if (!orderData.success) {\n        toast({\n          title: \"Payment Error\",\n          description: orderData.message || \"Failed to create payment order\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Razorpay checkout options\n      const options = {\n        key: orderData.key_id,\n        amount: orderData.order.amount,\n        currency: orderData.order.currency,\n        name: 'Fancy Feathers India',\n        description: `${plans.find(p => p.id === selectedPlan)?.duration} Subscription`,\n        order_id: orderData.order.id,\n        prefill: {\n          name: userName,\n          contact: userPhone,\n        },\n        theme: {\n          color: '#10b981', // Primary green color\n          backdrop_color: 'rgba(0, 0, 0, 0.6)'\n        },\n        modal: {\n          backdropclose: true, // Allow closing by clicking backdrop\n          escape: true, // Allow closing with ESC key\n          animation: true, // Enable smooth animations\n          confirm_close: false, // Don't show confirmation when closing\n          ondismiss: function() {\n            toast({\n              title: \"Payment Cancelled\",\n              description: \"You cancelled the payment process\",\n              variant: \"default\",\n            });\n          }\n        },\n        handler: async function (response: any) {\n          // Payment successful - verify and create subscription\n          try {\n            const verifyResponse = await fetch('/api/razorpay/verify-payment', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({\n                razorpay_order_id: response.razorpay_order_id,\n                razorpay_payment_id: response.razorpay_payment_id,\n                razorpay_signature: response.razorpay_signature,\n                fullName: userName,\n                mobileNumber: userPhone,\n                birdSpecies: birdSpecies,\n                subscriptionPlan: selectedPlan,\n                discountCoupon: couponCode || null\n              })\n            });\n\n            const verifyData = await verifyResponse.json();\n\n            if (verifyData.success) {\n              // Store success data\n              setSuccessData({\n                fullName: userName,\n                mobileNumber: userPhone,\n                transactionId: response.razorpay_payment_id,\n                planType: selectedPlan || 'Monthly',\n                subscriptionId: verifyData.subscriptionRequest?.id || ''\n              });\n\n              // Invalidate queries to refresh subscription and session data\n              queryClient.invalidateQueries({ queryKey: ['/api/user-account/subscription'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/user-account/session'] });\n              \n              // Refresh active subscriptions metric immediately\n              queryClient.invalidateQueries({ queryKey: ['/api/metrics/active-subscriptions'] });\n\n              // Show success dialog\n              setShowSuccessDialog(true);\n\n              // Reset form\n              setStep('initial');\n              setShowPlanModal(false);\n              setSelectedPlan(null);\n              setFormData({\n                fullName: '',\n                mobileNumber: '',\n                birdSpecies: '',\n                transactionId: ''\n              });\n              setCustomSpecies('');\n              setCouponCode('');\n              setCouponDiscount(0);\n              setCouponError('');\n            } else {\n              toast({\n                title: \"Payment Verification Failed\",\n                description: verifyData.message || \"Payment verification failed. Please contact support.\",\n                variant: \"destructive\",\n              });\n            }\n          } catch (error: any) {\n            toast({\n              title: \"Payment Verification Error\",\n              description: error.message || \"An error occurred during payment verification\",\n              variant: \"destructive\",\n            });\n          }\n        }\n      };\n\n      // Close the plan selection dialog BEFORE opening Razorpay to prevent overlay conflicts\n      setShowPlanModal(false);\n\n      const razorpay = new (window as any).Razorpay(options);\n      razorpay.open();\n    } catch (error: any) {\n      toast({\n        title: \"Payment Error\",\n        description: error.message || \"Failed to initialize payment\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n\n  const benefits = [\n    { text: \"Monthly or quarterly health check-ups by \", highlight: \"certified Exotic avian veterinarians\" },\n    { text: \"Personalized diet and nutrition plans tailored to your bird's species, age, and health condition\" },\n    { text: \"Guidance on supplements — when and how to give vitamins, calcium, or other essential additives\" },\n    { text: \"Deworming and preventive care schedule, customized for your bird\" },\n    { text: \"Behavior and training tips from \", highlight: \"certified Exotic Bird Behaviourist\", suffix: \" to keep your bird mentally active and emotionally happy\" },\n    { text: \"Regular health reminders for check-ups, vaccinations, and wellness milestones\" },\n    { text: \"Exclusive access to avian health newsletters and care updates from our network of specialists\" }\n  ];\n\n  const plans = [\n    {\n      id: \"monthly\",\n      duration: \"Monthly\",\n      originalPrice: \"₹2,750\",\n      price: \"₹2,200\",\n      priceNumeric: 2200,\n      period: \"per month\",\n      savings: \"Save ₹550\",\n      discount: \"20% OFF\",\n      consults: 2,\n      consultsText: \"2 consultations/month\",\n      limitedOffer: true,\n      features: [\n        \"2 Expert Consultations\",\n        \"Regular Bird Health & Care Guidance\",\n        \"Exclusive Avian Vet Tips and Behavioral Updates\"\n      ]\n    },\n    {\n      id: \"six-month\",\n      duration: \"6-Month Plan\",\n      originalPrice: \"₹16,500\",\n      price: \"₹12,375\",\n      priceNumeric: 12375,\n      period: \"for 6 months\",\n      savings: \"Save ₹4,125\",\n      discount: \"25% OFF\",\n      consults: 18,\n      consultsText: \"18 consultations total\",\n      popular: true,\n      features: [\n        \"18 Expert Consultations\",\n        \"Priority Scheduling for Health Reviews\",\n        \"Nutrition & Enrichment Guidance for Birds\"\n      ]\n    },\n    {\n      id: \"annual\",\n      duration: \"Annual Plan\",\n      originalPrice: \"₹33,000\",\n      price: \"₹23,100\",\n      priceNumeric: 23100,\n      period: \"per year\",\n      savings: \"Save ₹9,900\",\n      discount: \"30% OFF\",\n      consults: 48,\n      consultsText: \"48 consultations total\",\n      bestValue: true,\n      features: [\n        \"48 Consultations\",\n        \"Full-Year Health Tracking and Reports\",\n        \"Seasonal Care Tips and Wellness Recommendations\"\n      ]\n    }\n  ];\n\n  // Coupon validation\n  const validCoupons: { [key: string]: number } = {\n    'FFF796': 10,\n    'FFF806': 20,\n    'FFF816': 30,\n    'FFF826': 40,\n    'FFF836': 50,\n    'FFF846': 60,\n    'FFF856': 70,\n    'FFF866': 80,\n    'FFF876': 90,\n    'FFF886': 100\n  };\n\n  const handleCouponApply = () => {\n    const upperCoupon = couponCode.trim().toUpperCase();\n    if (!upperCoupon) {\n      setCouponError('');\n      setCouponDiscount(0);\n      return;\n    }\n\n    // Special test coupon\n    if (upperCoupon === 'FFFTEST') {\n      setCouponDiscount(-1); // Use -1 to indicate special Rs. 1 coupon\n      setCouponError('');\n    } else if (validCoupons[upperCoupon]) {\n      setCouponDiscount(validCoupons[upperCoupon]);\n      setCouponError('');\n    } else {\n      setCouponDiscount(0);\n      setCouponError('Invalid discount coupon. Please enter a valid code.');\n    }\n  };\n\n  const getDiscountedPrice = () => {\n    const plan = plans.find(p => p.id === selectedPlan);\n    if (!plan) return 0;\n    \n    // Special test coupon: Rs. 1 flat price\n    if (couponDiscount === -1) {\n      return 1;\n    }\n    \n    const basePrice = plan.priceNumeric;\n    const discountAmount = (basePrice * couponDiscount) / 100;\n    return basePrice - discountAmount;\n  };\n\n  const formatPrice = (amount: number) => {\n    return `₹${amount.toLocaleString('en-IN')}`;\n  };\n\n  const birdSpeciesList = birdsData.map(bird => bird.name);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-8 md:mb-12\">\n              <h1 className=\"text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-foreground mb-3 md:mb-4\" data-testid=\"heading-subscription\">\n                Comprehensive Bird Care Subscription\n              </h1>\n              <p className=\"text-sm sm:text-base md:text-lg text-muted-foreground max-w-3xl mx-auto\">\n                Give your feathered companion the care and attention it truly deserves. With our Bird Care Subscription, \n                you'll have access to regular consultations with <span className=\"text-primary font-semibold\">certified Exotic avian veterinarians and certified Exotic Bird Behaviourist</span> who specialize in exotic \n                birds like Macaws, Cockatoos, Conures, and African Greys.\n              </p>\n            </div>\n\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle>As a subscriber, you'll receive:</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-4\">\n                  {benefits.map((benefit, index) => (\n                    <li key={index} className=\"flex items-start gap-3\">\n                      <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n                      <span className=\"text-foreground\">\n                        {index === 0 && \"🩺 \"}\n                        {index === 1 && \"🥦 \"}\n                        {index === 2 && \"💊 \"}\n                        {index === 3 && \"🦠 \"}\n                        {index === 4 && \"🕊️ \"}\n                        {index === 5 && \"📆 \"}\n                        {index === 6 && \"📩 \"}\n                        {benefit.text}\n                        {benefit.highlight && (\n                          <span className=\"text-primary font-semibold\">{benefit.highlight}</span>\n                        )}\n                        {benefit.suffix}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n                <p className=\"mt-6 text-muted-foreground\">\n                  Your subscription ensures your bird stays healthy, active, and well-groomed — because caring for them \n                  should never be a guessing game.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"mb-8 hover-elevate cursor-pointer\" onClick={() => setShowDoctorProfile(true)} data-testid=\"card-specialist\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col md:flex-row items-center gap-6\">\n                  <div className=\"relative\">\n                    <img \n                      src={doctorImage} \n                      alt=\"Dr. Anand Rathore - Exotic Bird Specialist\"\n                      className=\"w-32 h-32 md:w-40 md:h-40 rounded-full object-cover object-top border-4 border-primary/20\"\n                      data-testid=\"img-doctor\"\n                    />\n                    <div className=\"absolute -bottom-2 -right-2 bg-primary text-primary-foreground rounded-full p-2\">\n                      <Stethoscope className=\"w-6 h-6\" />\n                    </div>\n                  </div>\n                  <div className=\"flex-1 text-center md:text-left\">\n                    <h3 className=\"text-2xl font-bold text-foreground mb-2\">\n                      Meet Our Exotic Bird Specialist\n                    </h3>\n                    <p className=\"text-lg text-primary font-semibold mb-2\">\n                      Dr. Anand Rathore, DVM\n                    </p>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Certified Exotic Avian Veterinarian with 12+ years of specialized experience in exotic bird medicine, behavior, and nutrition\n                    </p>\n                    <div className=\"flex flex-wrap gap-2 justify-center md:justify-start\">\n                      <Badge variant=\"secondary\" className=\"gap-1\">\n                        <Award className=\"w-3 h-3\" />\n                        12+ Years Experience\n                      </Badge>\n                      <Badge variant=\"secondary\" className=\"gap-1\">\n                        <Heart className=\"w-3 h-3\" />\n                        Certified Specialist\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"md:ml-auto\">\n                    <Button \n                      size=\"lg\" \n                      data-testid=\"button-view-profile\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDoctorProfile(true);\n                      }}\n                    >\n                      View Profile\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Dialog open={showDoctorProfile} onOpenChange={setShowDoctorProfile}>\n              <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-2xl\">Exotic Bird Specialist Profile</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-6\">\n                  <div className=\"flex flex-col sm:flex-row gap-6 items-center sm:items-start\">\n                    <div className=\"relative flex-shrink-0\">\n                      <img \n                        src={doctorImage} \n                        alt=\"Dr. B. Anand Rathore - Exotic Bird Specialist\"\n                        className=\"w-48 h-64 rounded-lg object-cover object-top border-4 border-primary/20\"\n                      />\n                      <div className=\"absolute -bottom-3 -right-3 bg-primary text-primary-foreground rounded-full p-3\">\n                        <Stethoscope className=\"w-8 h-8\" />\n                      </div>\n                    </div>\n                    <div>\n                      <h3 className=\"text-2xl font-bold text-foreground mb-1\">Dr. B. Anand Rathore</h3>\n                      <p className=\"text-sm text-primary font-semibold mb-3\">Certified Exotic Bird Veterinarian — Reg. No: TGVC/02597</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-muted-foreground leading-relaxed\">\n                        Dr. B. Anand Rathore is a highly respected exotic-avian veterinarian with 12+ years of focused experience \n                        in avian surgery, medicine, nutrition, and wildlife conservation. Trained in both clinical and field settings, \n                        Dr. Rathore combines advanced clinical skills with a compassionate, bird-centric approach to deliver \n                        comprehensive care for parrots, macaws, cockatoos, African greys, finches, waterfowl and other exotic species.\n                      </p>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-foreground mb-3\">Areas of Clinical Expertise</h4>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong className=\"text-foreground\">Avian Respiratory Care:</strong> Advanced diagnosis and treatment \n                            for respiratory infections and chronic airway disease.\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong className=\"text-foreground\">Behavioral Medicine:</strong> Proven strategies to manage \n                            feather-plucking, aggression, separation anxiety and other behavior problems.\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong className=\"text-foreground\">Orthopedics & Fracture Care:</strong> Stabilization, surgical \n                            repair and rehabilitation for fractures, sprains and mobility issues.\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong className=\"text-foreground\">PBFD Management:</strong> Specialized protocols for Psittacine \n                            Beak and Feather Disease — testing, supportive care and long-term management.\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong className=\"text-foreground\">Crop & Digestive Disorders:</strong> Treatment for crop stasis, \n                            impaction and gastrointestinal disease.\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong className=\"text-foreground\">Nutrition & Supplementation:</strong> Customized diet plans and \n                            deficiency correction to restore and maintain optimal health.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-foreground mb-3\">Professional Background & Training</h4>\n                      <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                        Dr. Rathore has served as an exotic veterinarian at India's largest exotic aviary in Daman and has \n                        collaborated with multiple NGOs on wildlife rescue, vulture and crocodile rehabilitation, and field \n                        conservation surveys. His formal qualifications include B.V.Sc & A.H and multiple postgraduate diplomas \n                        and specialty certifications in avian medicine, surgery, emergency care and conservation.\n                      </p>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-foreground mb-3\">Clinical Philosophy</h4>\n                      <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                        Dr. Rathore emphasizes preventive care, evidence-based medicine, and behavior-informed treatment plans. \n                        He blends clinical diagnostics, tailored nutrition, and behavioral training to treat the whole bird — \n                        not just symptoms — aiming for longer, healthier, happier lives for avian companions. His bedside manner \n                        is calm, precise and empathetic, making him a trusted partner for bird owners and avian institutions alike.\n                      </p>\n                    </div>\n\n                    <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4\">\n                      <p className=\"text-sm text-muted-foreground text-center mb-3\">\n                        Dr. Rathore is dedicated to providing the highest quality care for your exotic bird companion\n                      </p>\n                      <Button \n                        size=\"lg\" \n                        className=\"w-full\"\n                        onClick={() => {\n                          setShowDoctorProfile(false);\n                          setStep('form');\n                        }}\n                        data-testid=\"button-book-consultation\"\n                      >\n                        Book Consultation\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <div className=\"mb-12\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-2xl md:text-3xl font-bold text-foreground mb-3\">\n                  Happy Pet Parents Review\n                </h2>\n                <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                  Read what our satisfied bird parents have to say about their experience with our Bird Care Subscription service\n                </p>\n              </div>\n              <ReviewCarousel />\n            </div>\n\n            {/* Social Proof Widget */}\n            <SocialProofWidget />\n\n            <div className=\"mb-8\">\n              <h2 className=\"text-xl md:text-2xl font-bold text-foreground mb-6 text-center\">Choose Your Plan - Limited Time Offer!</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n                {plans.map((plan) => (\n                  <Card \n                    key={plan.id} \n                    className={`hover-elevate relative flex flex-col ${plan.popular ? 'border-primary shadow-lg' : ''} ${plan.bestValue ? 'border-green-500 shadow-lg' : ''}`}\n                    data-testid={`card-plan-${plan.id}`}\n                  >\n                    {plan.limitedOffer && (\n                      <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n                        <Badge className=\"bg-orange-600 text-white\">Limited-Time Offer</Badge>\n                      </div>\n                    )}\n                    {plan.popular && (\n                      <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n                        <Badge className=\"bg-primary text-primary-foreground\">Most Popular</Badge>\n                      </div>\n                    )}\n                    {plan.bestValue && (\n                      <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n                        <Badge className=\"bg-green-600 text-white\">Best Value</Badge>\n                      </div>\n                    )}\n                    <CardHeader className=\"text-center pb-4\">\n                      <CardTitle>\n                        <div className=\"text-2xl font-bold mb-2\">{plan.duration}</div>\n                        <Badge variant=\"destructive\" className=\"text-sm mb-3\">\n                          {plan.discount}\n                        </Badge>\n                        <div className=\"mt-3\">\n                          <div className=\"text-lg text-muted-foreground line-through mb-1\">\n                            {plan.originalPrice}\n                          </div>\n                          <div className=\"text-4xl font-bold text-primary mb-1\">\n                            {plan.price}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">{plan.period}</p>\n                        </div>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"flex-1 flex flex-col\">\n                      <div className=\"text-center mb-4\">\n                        <div className=\"inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full font-semibold text-sm\">\n                          <Stethoscope className=\"w-4 h-4\" />\n                          {plan.consultsText}\n                        </div>\n                      </div>\n                      \n                      <ul className=\"space-y-3 mb-6 flex-1\">\n                        {plan.features.map((feature, idx) => (\n                          <li key={idx} className=\"flex items-start gap-2 text-sm\">\n                            <Check className=\"w-4 h-4 text-primary flex-shrink-0 mt-0.5\" />\n                            <span className=\"text-muted-foreground\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n\n                      <div className=\"space-y-3\">\n                        {plan.savings && (\n                          <Badge className=\"w-full bg-green-100 text-green-800 border-green-200 justify-center py-2\">\n                            {plan.savings}\n                          </Badge>\n                        )}\n                        {subscriptionData?.subscription?.status === 'active' ? (\n                          <Button \n                            size=\"lg\" \n                            className=\"w-full\"\n                            onClick={() => navigate('/user-dashboard')}\n                            data-testid={`button-manage-birds-${plan.id}`}\n                          >\n                            Manage My Birds\n                          </Button>\n                        ) : (\n                          <Button \n                            size=\"lg\" \n                            className=\"w-full\"\n                            onClick={() => {\n                              setSelectedPlan(plan.id);\n                              setShowPlanModal(true);\n                            }}\n                            data-testid={`button-choose-${plan.id}`}\n                          >\n                            Choose Plan\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n              <p className=\"text-center text-muted-foreground mt-4 text-sm\">\n                🎉 Special launch offer - Save up to 30% on longer plans!\n              </p>\n            </div>\n\n            {/* Instagram Promotional Section */}\n            <div className=\"mb-8\">\n              <Card className=\"overflow-hidden\">\n                <CardContent className=\"p-8 bg-gradient-to-br from-pink-50 via-purple-50 to-orange-50 dark:from-pink-950/20 dark:via-purple-950/20 dark:to-orange-950/20\">\n                  <div className=\"text-center space-y-6\">\n                    <div className=\"space-y-2\">\n                      <h3 className=\"text-2xl font-bold text-foreground flex items-center justify-center gap-2\">\n                        <span className=\"text-3xl\">✨</span>\n                        Special Offer for Fancy Feathers Followers!\n                        <span className=\"text-3xl\">✨</span>\n                      </h3>\n                      <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                        Followers of Fancy Feathers India get an additional exclusive discount!\n                        <br />\n                        <span className=\"font-semibold text-foreground\">\n                          Ask the Fancy Feathers Admin to share a personal discount coupon with you.\n                        </span>\n                      </p>\n                    </div>\n                    \n                    <Button \n                      size=\"lg\"\n                      className=\"bg-gradient-to-r from-pink-500 via-purple-500 to-orange-500 hover:from-pink-600 hover:via-purple-600 hover:to-orange-600 text-white font-semibold px-8 py-6 text-lg rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      onClick={() => window.open('https://www.instagram.com/fancy_feathers_india/', '_blank')}\n                      data-testid=\"button-instagram-contact\"\n                    >\n                      <SiInstagram className=\"w-6 h-6 mr-2\" />\n                      Contact Admin on Instagram\n                    </Button>\n\n                    <p className=\"text-sm text-muted-foreground italic\">\n                      Follow us @fancy_feathers_india for exclusive bird care tips and updates!\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Dialog open={showPlanModal} onOpenChange={setShowPlanModal}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-choose-plan\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">\n              {selectedPlan && plans.find(p => p.id === selectedPlan)?.duration} Plan Subscription\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedPlan && (\n            <div className=\"space-y-6\">\n              {/* Plan Summary */}\n              <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">\n                      {plans.find(p => p.id === selectedPlan)?.duration} Plan\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {plans.find(p => p.id === selectedPlan)?.consultsText}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-3xl font-bold text-primary\">\n                      {plans.find(p => p.id === selectedPlan)?.price}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground line-through\">\n                      {plans.find(p => p.id === selectedPlan)?.originalPrice}\n                    </div>\n                  </div>\n                </div>\n                <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                  {plans.find(p => p.id === selectedPlan)?.savings}\n                </Badge>\n              </div>\n\n              {step === 'initial' && (\n                <div className=\"space-y-4\">\n                  {!sessionData?.account && (\n                    <p className=\"text-center text-muted-foreground\">\n                      Complete your subscription in 3 easy steps\n                    </p>\n                  )}\n                  <div className=\"space-y-4 max-w-md mx-auto\">\n                    {!sessionData?.account && (\n                      <>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"planFullName\">Full Name *</Label>\n                          <Input\n                            id=\"planFullName\"\n                            data-testid=\"input-plan-fullname\"\n                            placeholder=\"Enter your full name\"\n                            value={formData.fullName}\n                            onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"planMobile\">Mobile Number *</Label>\n                          <Input\n                            id=\"planMobile\"\n                            data-testid=\"input-plan-mobile\"\n                            placeholder=\"10-digit mobile number\"\n                            value={formData.mobileNumber}\n                            onChange={(e) => setFormData({ ...formData, mobileNumber: e.target.value.replace(/\\D/g, '').slice(0, 10) })}\n                            maxLength={10}\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"planSpecies\">Bird Species *</Label>\n                          <Select\n                            value={formData.birdSpecies}\n                            onValueChange={(value) => {\n                              setFormData({ ...formData, birdSpecies: value });\n                              if (value !== 'Other') {\n                                setCustomSpecies('');\n                              }\n                            }}\n                          >\n                            <SelectTrigger data-testid=\"select-plan-species\">\n                              <SelectValue placeholder=\"Select your bird species\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {birdSpeciesList.map((species) => (\n                                <SelectItem key={species} value={species}>\n                                  {species}\n                                </SelectItem>\n                              ))}\n                              <SelectItem value=\"Other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        {formData.birdSpecies === 'Other' && (\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"planCustomSpecies\">Specify Bird Species *</Label>\n                            <Input\n                              id=\"planCustomSpecies\"\n                              data-testid=\"input-plan-custom-species\"\n                              placeholder=\"Enter your bird species\"\n                              value={customSpecies}\n                              onChange={(e) => setCustomSpecies(e.target.value)}\n                            />\n                          </div>\n                        )}\n                      </>\n                    )}\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"planCouponCode\">Discount Coupon Code (Optional)</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"planCouponCode\"\n                          data-testid=\"input-coupon-code\"\n                          placeholder=\"Enter coupon code\"\n                          value={couponCode}\n                          onChange={(e) => {\n                            setCouponCode(e.target.value.toUpperCase());\n                            // Clear error when user starts typing again\n                            if (couponError) {\n                              setCouponError('');\n                            }\n                          }}\n                          onBlur={handleCouponApply}\n                          className={couponError ? 'border-destructive' : ''}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={handleCouponApply}\n                          data-testid=\"button-apply-coupon\"\n                        >\n                          Apply\n                        </Button>\n                      </div>\n                      {couponError && (\n                        <p className=\"text-sm text-destructive flex items-center gap-1\" data-testid=\"text-coupon-error\">\n                          ❌ {couponError}\n                        </p>\n                      )}\n                      {couponDiscount === -1 && !couponError && (\n                        <p className=\"text-sm text-green-600 dark:text-green-400 flex items-center gap-1\" data-testid=\"text-coupon-success\">\n                          ✅ Test coupon applied! Amount set to ₹1 for testing.\n                        </p>\n                      )}\n                      {couponDiscount > 0 && !couponError && (\n                        <p className=\"text-sm text-green-600 dark:text-green-400 flex items-center gap-1\" data-testid=\"text-coupon-success\">\n                          ✅ {couponDiscount}% discount applied successfully!\n                        </p>\n                      )}\n                    </div>\n\n                    <Button \n                      onClick={handleFormSubmit}\n                      data-testid=\"button-plan-continue\"\n                      className=\"w-full\"\n                      size=\"lg\"\n                    >\n                      Pay Now\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Success Dialog with Account Creation Prompt */}\n      <Dialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"rounded-full bg-green-100 dark:bg-green-900 p-3\">\n                <CheckCircle2 className=\"h-12 w-12 text-green-600 dark:text-green-400\" />\n              </div>\n            </div>\n            <DialogTitle className=\"text-center text-2xl\">Subscription Successful!</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-muted-foreground\">\n                Thank you for subscribing to our Bird Care plan!\n              </p>\n              {sessionData?.account ? (\n                <p className=\"font-semibold text-primary\">\n                  Your subscription has been activated. View your dashboard to manage your bird's care.\n                </p>\n              ) : (\n                <p className=\"font-semibold text-primary\">\n                  Create your account now to access your dashboard and manage your bird's care.\n                </p>\n              )}\n            </div>\n            \n            {sessionData?.account ? (\n              // User is logged in - show dashboard button\n              <Button\n                className=\"w-full\"\n                size=\"lg\"\n                onClick={() => {\n                  navigate('/user-dashboard');\n                  setShowSuccessDialog(false);\n                }}\n                data-testid=\"button-view-dashboard\"\n              >\n                View My Dashboard\n              </Button>\n            ) : (\n              // User is NOT logged in - show create account button\n              <Button\n                className=\"w-full\"\n                size=\"lg\"\n                onClick={() => {\n                  if (successData) {\n                    navigate(`/user-account/register/${successData.mobileNumber}/${successData.subscriptionId}`);\n                    setShowSuccessDialog(false);\n                  }\n                }}\n                data-testid=\"button-create-account\"\n              >\n                Create Your Account\n              </Button>\n            )}\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">Or</span>\n              </div>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => {\n                if (successData) {\n                  const message = `Hi there, I have just subscribed to the Bird Care plan. Here are my details:\\n\\nName: ${successData.fullName}\\n\\nMobile Number: ${successData.mobileNumber}\\n\\nTransaction ID: ${successData.transactionId}\\n\\nSubscription Type: ${successData.planType}`;\n                  const whatsappUrl = `https://wa.me/919014284059?text=${encodeURIComponent(message)}`;\n                  window.open(whatsappUrl, '_blank');\n                }\n              }}\n              data-testid=\"button-whatsapp-contact\"\n            >\n              Contact on WhatsApp\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full text-sm\"\n              onClick={() => setShowSuccessDialog(false)}\n              data-testid=\"button-close-success\"\n            >\n              {sessionData?.account ? 'Close' : \"I'll create my account later\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":45983},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { userAccounts } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\nimport Razorpay from \"razorpay\";\nimport crypto from \"crypto\";\nimport { \n  registerSchema, \n  loginSchema, \n  subscriptionRequestSchema, \n  adminLoginSchema,\n  updateSubscriptionSchema,\n  userAccountRegistrationSchema,\n  userAccountLoginSchema,\n  userAccountSignupSchema,\n  birdDetailsSchema,\n  updateBirdDetailsSchema,\n  sendOtpSchema,\n  verifyOtpSchema,\n  createAppointmentSchema,\n  updateAppointmentSchema,\n  createBlockedSlotSchema,\n  updateAppointmentSettingsSchema,\n  type User \n} from \"@shared/schema\";\nimport { sendSMS } from \"./twilio\";\nimport { generateOTP, encryptOTP, validateOTP, getOTPExpiry, isOTPExpired, canResendOTP, getRemainingCooldown } from \"./otp\";\nimport { fromError } from \"zod-validation-error\";\n\n// Initialize Razorpay\nconst razorpay = new Razorpay({\n  key_id: process.env.RAZORPAY_KEY_ID || '',\n  key_secret: process.env.RAZORPAY_KEY_SECRET || ''\n});\n\n// Validate Razorpay credentials on startup\nif (!process.env.RAZORPAY_KEY_ID || !process.env.RAZORPAY_KEY_SECRET) {\n  console.error('⚠️  WARNING: Razorpay credentials not configured. Payment features will not work.');\n  console.error('Please set RAZORPAY_KEY_ID and RAZORPAY_KEY_SECRET in your environment secrets.');\n} else {\n  console.log('✓ Razorpay initialized with key:', process.env.RAZORPAY_KEY_ID.substring(0, 15) + '...');\n}\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId: string;\n    adminId: string;\n    userPhone: string; // User account phone number\n  }\n}\n\n// Helper to calculate subscription end date\nfunction calculateEndDate(plan: string, startDate: Date): Date {\n  const endDate = new Date(startDate);\n  if (plan === \"monthly\") {\n    endDate.setMonth(endDate.getMonth() + 1);\n  } else if (plan === \"six-month\") {\n    endDate.setMonth(endDate.getMonth() + 6);\n  } else if (plan === \"annual\") {\n    endDate.setFullYear(endDate.getFullYear() + 1);\n  }\n  return endDate;\n}\n\n// Helper to get consultation count\nfunction getConsultationCount(plan: string): number {\n  if (plan === \"monthly\") return 2;\n  if (plan === \"six-month\") return 18;\n  if (plan === \"annual\") return 48;\n  return 2; // default\n}\n\n// Helper to get plan amount\nfunction getPlanAmount(plan: string): number {\n  if (plan === \"monthly\") return 2200;\n  if (plan === \"six-month\") return 12375;\n  if (plan === \"annual\") return 23100;\n  return 2200; // default\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res, next) => {\n    try {\n      const result = registerSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { username, password, email, fullName, phone, subscriptionPlan } = result.data;\n\n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        password: hashedPassword,\n        email,\n        fullName,\n        phone: phone || null,\n        subscriptionPlan: subscriptionPlan || null,\n        subscriptionStatus: \"active\",\n        isAdmin: false,\n      });\n\n      // Regenerate session for new user to prevent session fixation\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n\n        // Set user ID in the new session\n        req.session.userId = user.id;\n        // Ensure no admin ID is present\n        delete req.session.adminId;\n\n        // Save session\n        req.session.save((err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Session error\" });\n          }\n\n          const { password: _, ...userWithoutPassword } = user;\n          res.json({ user: userWithoutPassword });\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res, next) => {\n    try {\n      const result = loginSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { username, password } = result.data;\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n\n        // Set user ID in the new session\n        req.session.userId = user.id;\n        // Ensure no admin ID is present\n        delete req.session.adminId;\n\n        // Save session\n        req.session.save((err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Session error\" });\n          }\n\n          const { password: _, ...userWithoutPassword } = user;\n          res.json({ user: userWithoutPassword });\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/session\", async (req, res, next) => {\n    try {\n      if (!req.session.userId) {\n        return res.json({ user: null });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.json({ user: null });\n      }\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Subscription request routes\n  app.post(\"/api/subscription-requests\", async (req, res, next) => {\n    try {\n      const result = subscriptionRequestSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { subscriptionPlan, discountCoupon, ...otherData } = result.data;\n      \n      // Calculate subscription details\n      const startDate = new Date();\n      const endDate = calculateEndDate(subscriptionPlan, startDate);\n      const consultationsRemaining = getConsultationCount(subscriptionPlan);\n      const baseAmount = getPlanAmount(subscriptionPlan);\n      \n      // Apply discount if coupon exists\n      let amountPaid = baseAmount;\n      if (discountCoupon) {\n        const couponUpper = discountCoupon.toUpperCase();\n        \n        // Special test coupon: Sets amount to Rs. 1 for any plan\n        if (couponUpper === 'FFFTEST') {\n          amountPaid = 1;\n        } else {\n          // Percentage-based discount coupons\n          const validCoupons: { [key: string]: number } = {\n            'FFF796': 10, 'FFF806': 20, 'FFF816': 30, 'FFF826': 40, 'FFF836': 50,\n            'FFF846': 60, 'FFF856': 70, 'FFF866': 80, 'FFF876': 90, 'FFF886': 100\n          };\n          const discountPercent = validCoupons[couponUpper] || 0;\n          amountPaid = baseAmount - (baseAmount * discountPercent / 100);\n        }\n      }\n\n      const subscriptionRequest = await storage.createSubscriptionRequest({\n        ...otherData,\n        subscriptionPlan,\n        discountCoupon: discountCoupon || null,\n      } as any);\n      \n      // Update with calculated fields (using separate update since they're not in insert schema)\n      const updatedSubscription = await storage.updateSubscription(subscriptionRequest.id, {\n        subscriptionStartDate: startDate.toISOString(),\n        subscriptionEndDate: endDate.toISOString(),\n        amountPaid: Math.round(amountPaid),\n        consultationsRemaining,\n      });\n      \n      res.json({ subscriptionRequest: updatedSubscription || subscriptionRequest });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Razorpay routes\n  app.post(\"/api/razorpay/create-order\", async (req, res, next) => {\n    try {\n      // Check if Razorpay is configured\n      if (!process.env.RAZORPAY_KEY_ID || !process.env.RAZORPAY_KEY_SECRET) {\n        console.error('Razorpay credentials not configured');\n        return res.status(500).json({ \n          success: false, \n          message: \"Payment gateway not configured. Please contact support.\" \n        });\n      }\n\n      const { subscriptionPlan, discountCoupon } = req.body;\n\n      if (!subscriptionPlan) {\n        return res.status(400).json({ message: \"Subscription plan is required\" });\n      }\n\n      // Validate subscription plan\n      const validPlans = ['monthly', 'six-month', 'annual'];\n      if (!validPlans.includes(subscriptionPlan)) {\n        return res.status(400).json({ message: \"Invalid subscription plan\" });\n      }\n\n      // SERVER-SIDE PRICE CALCULATION (never trust client)\n      const baseAmount = getPlanAmount(subscriptionPlan);\n      \n      // Apply discount if coupon exists (validate server-side)\n      let finalAmount = baseAmount;\n      if (discountCoupon) {\n        const couponUpper = discountCoupon.toUpperCase();\n        \n        // Special test coupon: Sets amount to Rs. 1 for any plan\n        if (couponUpper === 'FFFTEST') {\n          finalAmount = 1;\n        } else {\n          // Percentage-based discount coupons\n          const validCoupons: { [key: string]: number } = {\n            'FFF796': 10, 'FFF806': 20, 'FFF816': 30, 'FFF826': 40, 'FFF836': 50,\n            'FFF846': 60, 'FFF856': 70, 'FFF866': 80, 'FFF876': 90, 'FFF886': 100\n          };\n          const discountPercent = validCoupons[couponUpper] || 0;\n          finalAmount = baseAmount - (baseAmount * discountPercent / 100);\n        }\n      }\n\n      // Create Razorpay order with SERVER-CALCULATED amount\n      const options = {\n        amount: Math.round(finalAmount * 100), // Convert to paise\n        currency: 'INR',\n        receipt: `receipt_${Date.now()}`,\n        notes: {\n          subscriptionPlan,\n          discountCoupon: discountCoupon || '',\n          calculatedAmount: Math.round(finalAmount) // Store for verification\n        }\n      };\n\n      console.log('Creating Razorpay order:', {\n        plan: subscriptionPlan,\n        amount: options.amount,\n        currency: options.currency\n      });\n\n      const order = await razorpay.orders.create(options);\n      \n      console.log('Razorpay order created successfully:', order.id);\n      \n      res.json({ \n        success: true, \n        order,\n        key_id: process.env.RAZORPAY_KEY_ID \n      });\n    } catch (error: any) {\n      console.error('Razorpay order creation error:', error);\n      \n      // Provide more helpful error messages\n      let errorMessage = \"Failed to create payment order\";\n      if (error.statusCode === 401) {\n        errorMessage = \"Payment gateway authentication failed. Please contact support.\";\n        console.error('⚠️  Razorpay authentication failed. Please verify your API credentials.');\n      } else if (error.error?.description) {\n        errorMessage = error.error.description;\n      }\n      \n      res.status(500).json({ \n        success: false, \n        message: errorMessage\n      });\n    }\n  });\n\n  app.post(\"/api/razorpay/verify-payment\", async (req, res, next) => {\n    try {\n      const { \n        razorpay_order_id, \n        razorpay_payment_id, \n        razorpay_signature,\n        fullName,\n        mobileNumber,\n        birdSpecies,\n        subscriptionPlan,\n        discountCoupon\n      } = req.body;\n\n      // Validate required fields\n      if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\n        return res.status(400).json({ \n          success: false, \n          message: 'Missing payment verification details' \n        });\n      }\n\n      if (!fullName || !mobileNumber || !birdSpecies || !subscriptionPlan) {\n        return res.status(400).json({ \n          success: false, \n          message: 'Missing subscription details' \n        });\n      }\n\n      // Verify payment signature\n      const hmac = crypto.createHmac('sha256', process.env.RAZORPAY_KEY_SECRET!);\n      hmac.update(razorpay_order_id + '|' + razorpay_payment_id);\n      const generatedSignature = hmac.digest('hex');\n\n      if (generatedSignature !== razorpay_signature) {\n        return res.status(400).json({ \n          success: false, \n          message: 'Invalid payment signature' \n        });\n      }\n\n      // Fetch order from Razorpay to verify amount paid\n      const order = await razorpay.orders.fetch(razorpay_order_id);\n      \n      // SERVER-SIDE AMOUNT VERIFICATION\n      const baseAmount = getPlanAmount(subscriptionPlan);\n      let expectedAmount = baseAmount;\n      if (discountCoupon) {\n        const couponUpper = discountCoupon.toUpperCase();\n        \n        // Special test coupon: Sets amount to Rs. 1 for any plan\n        if (couponUpper === 'FFFTEST') {\n          expectedAmount = 1;\n        } else {\n          // Percentage-based discount coupons\n          const validCoupons: { [key: string]: number } = {\n            'FFF796': 10, 'FFF806': 20, 'FFF816': 30, 'FFF826': 40, 'FFF836': 50,\n            'FFF846': 60, 'FFF856': 70, 'FFF866': 80, 'FFF876': 90, 'FFF886': 100\n          };\n          const discountPercent = validCoupons[couponUpper] || 0;\n          expectedAmount = baseAmount - (baseAmount * discountPercent / 100);\n        }\n      }\n\n      // Verify the amount paid matches expected amount (in paise)\n      const expectedAmountInPaise = Math.round(expectedAmount * 100);\n      if (order.amount !== expectedAmountInPaise) {\n        console.error(`Payment amount mismatch: Expected ${expectedAmountInPaise}, Got ${order.amount}`);\n        return res.status(400).json({ \n          success: false, \n          message: 'Payment amount verification failed' \n        });\n      }\n\n      // Payment verified successfully - Create subscription\n      const startDate = new Date();\n      const endDate = calculateEndDate(subscriptionPlan, startDate);\n      const consultationsRemaining = getConsultationCount(subscriptionPlan);\n\n      const subscriptionRequest = await storage.createSubscriptionRequest({\n        fullName,\n        mobileNumber,\n        birdSpecies,\n        subscriptionPlan,\n        discountCoupon: discountCoupon || null,\n        razorpayOrderId: razorpay_order_id,\n        razorpayPaymentId: razorpay_payment_id,\n        razorpaySignature: razorpay_signature,\n        paymentStatus: 'success',\n        transactionId: razorpay_payment_id, // Use payment ID as transaction ID\n      } as any);\n      \n      // Update with calculated fields\n      const updatedSubscription = await storage.updateSubscription(subscriptionRequest.id, {\n        subscriptionStartDate: startDate.toISOString(),\n        subscriptionEndDate: endDate.toISOString(),\n        amountPaid: Math.round(expectedAmount),\n        consultationsRemaining,\n      });\n      \n      // Increment active subscriptions metric\n      await storage.incrementMetric(\n        \"active_subscriptions\",\n        1,\n        \"payment\",\n        `Successful payment for ${subscriptionPlan} plan`\n      );\n      \n      res.json({ \n        success: true, \n        message: 'Payment verified successfully',\n        subscriptionRequest: updatedSubscription || subscriptionRequest \n      });\n    } catch (error: any) {\n      console.error('Payment verification error:', error);\n      res.status(500).json({ \n        success: false, \n        message: error.message || \"Payment verification failed\" \n      });\n    }\n  });\n\n  // User Account routes\n  // Unified login endpoint (checks both admin and user)\n  app.post(\"/api/login\", async (req, res, next) => {\n    try {\n      const { mobile, password } = req.body;\n\n      if (!mobile || !password) {\n        return res.status(400).json({ message: \"Please enter your mobile number and password to continue.\" });\n      }\n\n      // Validate mobile number format (international format with country code)\n      // Accept numbers starting with + followed by 1-4 digit country code and 7-15 digit phone number\n      const internationalMobileRegex = /^\\+\\d{1,4}\\d{7,15}$/;\n      // Also accept old format (10 digits starting with 6-9) for backward compatibility\n      const indianMobileRegex = /^[6-9]\\d{9}$/;\n      \n      if (!internationalMobileRegex.test(mobile) && !indianMobileRegex.test(mobile)) {\n        return res.status(400).json({ message: \"Please check your mobile number and try again.\" });\n      }\n\n      // First, try admin login\n      const admin = await storage.getAdminByMobile(mobile);\n      if (admin) {\n        const validPassword = await bcrypt.compare(password, admin.password);\n        if (validPassword) {\n          // Admin login successful\n          return new Promise<void>((resolve, reject) => {\n            req.session.regenerate((err) => {\n              if (err) {\n                return res.status(500).json({ message: \"We're having trouble logging you in. Please try again.\" });\n              }\n\n              req.session.adminId = admin.id;\n              delete req.session.userId;\n              delete req.session.userPhone;\n\n              req.session.save((err) => {\n                if (err) {\n                  return res.status(500).json({ message: \"We're having trouble logging you in. Please try again.\" });\n                }\n\n                const { password: _, ...adminWithoutPassword } = admin;\n                const response = { \n                  userType: \"admin\",\n                  user: adminWithoutPassword,\n                  redirectTo: \"/admin/dashboard\"\n                };\n                console.log('[SERVER] Admin login successful, sending response:', JSON.stringify(response, null, 2));\n                res.json(response);\n                resolve();\n              });\n            });\n          });\n        } else {\n          // Admin exists but password is wrong\n          return res.status(401).json({ message: \"The password you entered is incorrect. Please try again.\" });\n        }\n      }\n\n      // If not admin, try user account login\n      const userAccount = await storage.getUserAccount(mobile);\n      if (userAccount) {\n        // Check if account has completed signup (has password set)\n        if (!userAccount.password || userAccount.password.length === 0) {\n          return res.status(400).json({ \n            message: \"Please complete your account setup by verifying your mobile number first.\" \n          });\n        }\n\n        const validPassword = await bcrypt.compare(password, userAccount.password);\n        if (validPassword) {\n          // User login successful\n          return new Promise<void>((resolve, reject) => {\n            req.session.regenerate((err) => {\n              if (err) {\n                return res.status(500).json({ message: \"We're having trouble logging you in. Please try again.\" });\n              }\n\n              req.session.userPhone = userAccount.phone;\n              delete req.session.userId;\n              delete req.session.adminId;\n\n              req.session.save((err) => {\n                if (err) {\n                  return res.status(500).json({ message: \"We're having trouble logging you in. Please try again.\" });\n                }\n\n                const { password: _, ...accountWithoutPassword } = userAccount;\n                res.json({ \n                  userType: \"user\",\n                  user: accountWithoutPassword,\n                  redirectTo: \"/user-dashboard\"\n                });\n                resolve();\n              });\n            });\n          });\n        } else {\n          // User account exists but password is wrong\n          return res.status(401).json({ message: \"The password you entered is incorrect. Please try again.\" });\n        }\n      }\n\n      // No account found with this mobile number\n      return res.status(404).json({ message: \"No account found with this mobile number. Please sign up first.\" });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // OTP Routes\n  app.post(\"/api/otp/send\", async (req, res, next) => {\n    try {\n      const result = sendOtpSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { phone } = result.data;\n\n      // Check if account already exists\n      const existingAccount = await storage.getUserAccount(phone);\n      \n      // If account exists and is already verified, don't allow OTP send\n      if (existingAccount && existingAccount.isMobileVerified) {\n        return res.status(400).json({ \n          message: \"This mobile number is already verified. Please log in instead.\" \n        });\n      }\n\n      // Check resend cooldown\n      if (existingAccount && existingAccount.lastOtpSentAt) {\n        if (!canResendOTP(existingAccount.lastOtpSentAt)) {\n          const remaining = getRemainingCooldown(existingAccount.lastOtpSentAt);\n          return res.status(429).json({ \n            message: `Please wait ${remaining} seconds before requesting a new OTP.`,\n            remainingSeconds: remaining\n          });\n        }\n      }\n\n      // Generate and encrypt OTP\n      const otp = generateOTP();\n      const encryptedOTP = await encryptOTP(otp);\n      const otpExpiry = getOTPExpiry();\n\n      // Send SMS via Twilio\n      const smsMessage = `Fancy Feathers: Your verification code is ${otp}. It will expire in 5 minutes.`;\n      const smsResult = await sendSMS(phone, smsMessage);\n\n      if (!smsResult.success) {\n        // Check if it's a Twilio trial account unverified number error\n        const isTwilioUnverifiedError = smsResult.error?.includes('unverified') || smsResult.error?.includes('21608');\n        \n        if (isTwilioUnverifiedError) {\n          return res.status(400).json({ \n            message: \"Phone number not verified. Please verify this number in Twilio Console at: https://console.twilio.com/us1/develop/phone-numbers/manage/verified\",\n          });\n        }\n        \n        return res.status(500).json({ \n          message: \"Failed to send OTP. Please try again.\",\n          error: smsResult.error\n        });\n      }\n\n      // Create or update account with OTP info (but not password yet)\n      if (existingAccount) {\n        // Update existing account with new OTP\n        await storage.updateUserAccountOTP(phone, encryptedOTP, otpExpiry, smsResult.messageSid!);\n      } else {\n        // Create temporary account record with just phone and OTP (password will be set after verification)\n        await storage.createUserAccount({\n          phone,\n          password: \"\", // Temporary empty password - will be set after OTP verification\n          fullName: \"\", // Temporary empty name - will be set after OTP verification\n          subscriptionId: null,\n        });\n        await storage.updateUserAccountOTP(phone, encryptedOTP, otpExpiry, smsResult.messageSid!);\n      }\n\n      res.json({ \n        message: \"An OTP has been sent to your mobile number. Please enter it below to verify.\",\n        messageSid: smsResult.messageSid\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/otp/verify\", async (req, res, next) => {\n    try {\n      const result = verifyOtpSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { phone, otp } = result.data;\n\n      // Get user account\n      const account = await storage.getUserAccount(phone);\n      if (!account) {\n        return res.status(404).json({ message: \"Account not found\" });\n      }\n\n      // Check if already verified\n      if (account.isMobileVerified) {\n        return res.status(400).json({ message: \"Mobile number is already verified\" });\n      }\n\n      // Check OTP attempts rate limiting\n      const otpAttempt = await storage.getOtpAttempt(phone);\n      if (otpAttempt) {\n        const windowDuration = 10 * 60 * 1000; // 10 minutes in milliseconds\n        const timeSinceWindowStart = new Date().getTime() - new Date(otpAttempt.windowStartAt).getTime();\n        \n        if (timeSinceWindowStart < windowDuration && otpAttempt.attempts >= 3) {\n          const remainingTime = Math.ceil((windowDuration - timeSinceWindowStart) / 60000);\n          return res.status(429).json({ \n            message: `Maximum OTP attempts reached. Please try again in ${remainingTime} minutes.`\n          });\n        }\n        \n        // Reset window if it's been more than 10 minutes\n        if (timeSinceWindowStart >= windowDuration) {\n          await storage.resetOtpAttempts(phone);\n        }\n      }\n\n      // Check if OTP exists\n      if (!account.otp) {\n        return res.status(400).json({ message: \"No OTP found. Please request a new one.\" });\n      }\n\n      // Check if OTP is expired\n      if (isOTPExpired(account.otpExpiry)) {\n        return res.status(400).json({ message: \"OTP has expired. Please request a new one.\" });\n      }\n\n      // Validate OTP\n      const isValid = await validateOTP(otp, account.otp);\n      if (!isValid) {\n        // Increment failed attempts\n        if (otpAttempt) {\n          await storage.incrementOtpAttempts(phone);\n        } else {\n          await storage.createOtpAttempt(phone);\n        }\n        \n        return res.status(400).json({ message: \"Invalid OTP. Please try again.\" });\n      }\n\n      // OTP is valid - mark account as verified\n      await storage.verifyUserAccountOTP(phone);\n      \n      // Clear OTP attempts\n      await storage.resetOtpAttempts(phone);\n\n      res.json({ \n        message: \"OTP verified successfully! You can now create your password.\",\n        verified: true\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/otp/resend\", async (req, res, next) => {\n    try {\n      const result = sendOtpSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { phone } = result.data;\n\n      // Get account\n      const account = await storage.getUserAccount(phone);\n      if (!account) {\n        return res.status(404).json({ message: \"Account not found\" });\n      }\n\n      // Check if already verified\n      if (account.isMobileVerified) {\n        return res.status(400).json({ message: \"Mobile number is already verified\" });\n      }\n\n      // Check resend cooldown\n      if (!canResendOTP(account.lastOtpSentAt)) {\n        const remaining = getRemainingCooldown(account.lastOtpSentAt);\n        return res.status(429).json({ \n          message: `Please wait ${remaining} seconds before requesting a new OTP.`,\n          remainingSeconds: remaining\n        });\n      }\n\n      // Generate new OTP\n      const otp = generateOTP();\n      const encryptedOTP = await encryptOTP(otp);\n      const otpExpiry = getOTPExpiry();\n\n      // Send SMS via Twilio\n      const smsMessage = `Fancy Feathers: Your verification code is ${otp}. It will expire in 5 minutes.`;\n      const smsResult = await sendSMS(phone, smsMessage);\n\n      if (!smsResult.success) {\n        // Check if it's a Twilio trial account unverified number error\n        const isTwilioUnverifiedError = smsResult.error?.includes('unverified') || smsResult.error?.includes('21608');\n        \n        if (isTwilioUnverifiedError) {\n          return res.status(400).json({ \n            message: \"Phone number not verified. Please verify this number in Twilio Console at: https://console.twilio.com/us1/develop/phone-numbers/manage/verified\",\n          });\n        }\n        \n        return res.status(500).json({ \n          message: \"Failed to send OTP. Please try again.\",\n          error: smsResult.error\n        });\n      }\n\n      // Update account with new OTP\n      await storage.updateUserAccountOTP(phone, encryptedOTP, otpExpiry, smsResult.messageSid!);\n\n      res.json({ \n        message: \"A new OTP has been sent to your mobile number.\",\n        messageSid: smsResult.messageSid\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Standalone signup (without subscription)\n  app.post(\"/api/user-account/signup\", async (req, res, next) => {\n    try {\n      const result = userAccountSignupSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { phone, username, password } = result.data;\n\n      // Check if account already exists\n      const existingAccount = await storage.getUserAccount(phone);\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      let userAccount;\n\n      if (existingAccount) {\n        // If account exists but mobile is not verified, reject\n        if (!existingAccount.isMobileVerified) {\n          return res.status(400).json({ \n            message: \"Please verify your mobile number first\" \n          });\n        }\n\n        // If account exists and already has a password set (not empty), it's already registered\n        if (existingAccount.password && existingAccount.password.length > 0) {\n          return res.status(400).json({ \n            message: \"Account already exists for this phone number. Please log in instead.\" \n          });\n        }\n\n        // Account exists with verified mobile but empty password - update it (OTP flow)\n        const [updatedAccount] = await db\n          .update(userAccounts)\n          .set({ \n            password: hashedPassword,\n            fullName: username\n          })\n          .where(eq(userAccounts.phone, phone))\n          .returning();\n        \n        userAccount = updatedAccount;\n      } else {\n        // No existing account - create new one (shouldn't happen in OTP flow, but handle it)\n        userAccount = await storage.createUserAccount({\n          phone,\n          password: hashedPassword,\n          fullName: username,\n          subscriptionId: null,\n        });\n      }\n\n      // Auto-login the user after signup\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n\n        req.session.userPhone = userAccount.phone;\n        delete req.session.userId;\n        delete req.session.adminId;\n\n        req.session.save((err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Session error\" });\n          }\n\n          const { password: _, ...accountWithoutPassword } = userAccount;\n          res.json({ \n            message: \"Your account has been created successfully!\",\n            account: accountWithoutPassword \n          });\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Registration with subscription\n  app.post(\"/api/user-account/register\", async (req, res, next) => {\n    try {\n      const result = userAccountRegistrationSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { phone, password, subscriptionId } = result.data;\n\n      // Check if account already exists\n      const existingAccount = await storage.getUserAccount(phone);\n      if (existingAccount) {\n        return res.status(400).json({ message: \"Account already exists for this phone number\" });\n      }\n\n      // Verify subscription exists and matches phone number\n      const subscription = await storage.getSubscriptionById(subscriptionId);\n      if (!subscription) {\n        return res.status(400).json({ message: \"Invalid subscription\" });\n      }\n      \n      if (subscription.mobileNumber !== phone) {\n        return res.status(400).json({ message: \"Phone number does not match subscription\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user account with fullName from subscription\n      const userAccount = await storage.createUserAccount({\n        phone,\n        password: hashedPassword,\n        fullName: subscription.fullName,\n        subscriptionId,\n      });\n\n      // Auto-login the user after registration\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n\n        req.session.userPhone = userAccount.phone;\n        delete req.session.userId;\n        delete req.session.adminId;\n\n        req.session.save((err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Session error\" });\n          }\n\n          const { password: _, ...accountWithoutPassword } = userAccount;\n          res.json({ \n            message: \"Your account has been created successfully. You can now log in using your phone number and password.\",\n            account: accountWithoutPassword \n          });\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/user-account/login\", async (req, res, next) => {\n    try {\n      const result = userAccountLoginSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { phone, password } = result.data;\n\n      const userAccount = await storage.getUserAccount(phone);\n      if (!userAccount) {\n        return res.status(401).json({ message: \"Invalid user ID or password.\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, userAccount.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid user ID or password.\" });\n      }\n\n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n\n        req.session.userPhone = userAccount.phone;\n        delete req.session.userId;\n        delete req.session.adminId;\n\n        req.session.save((err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Session error\" });\n          }\n\n          const { password: _, ...accountWithoutPassword } = userAccount;\n          res.json({ account: accountWithoutPassword });\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/user-account/logout\", async (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/user-account/session\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.json({ account: null });\n      }\n\n      const account = await storage.getUserAccount(req.session.userPhone);\n      if (!account) {\n        return res.json({ account: null });\n      }\n\n      const { password: _, ...accountWithoutPassword } = account;\n      res.json({ account: accountWithoutPassword });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/user-account/subscription\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const account = await storage.getUserAccount(req.session.userPhone);\n      if (!account) {\n        return res.status(404).json({ message: \"Account not found\" });\n      }\n\n      // Check if user has a subscription\n      if (!account.subscriptionId) {\n        return res.json({ subscription: null });\n      }\n\n      const subscription = await storage.getSubscriptionById(account.subscriptionId);\n      if (!subscription) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n\n      // Verify subscription belongs to this user's phone number\n      if (subscription.mobileNumber !== req.session.userPhone) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json({ subscription });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Bird Details routes\n  app.post(\"/api/bird-details\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const result = birdDetailsSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const bird = await storage.createBirdDetails({\n        ...result.data,\n        userPhone: req.session.userPhone,\n      });\n\n      res.json({ message: \"Your bird's details have been saved successfully.\", bird });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/bird-details\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const birds = await storage.getBirdDetailsByUser(req.session.userPhone);\n      res.json({ birds });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/bird-details/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const bird = await storage.getBirdDetailsById(req.params.id);\n      if (!bird) {\n        return res.status(404).json({ message: \"Bird not found\" });\n      }\n\n      // Verify the bird belongs to the logged-in user\n      if (bird.userPhone !== req.session.userPhone) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json({ bird });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.patch(\"/api/bird-details/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const existingBird = await storage.getBirdDetailsById(req.params.id);\n      if (!existingBird) {\n        return res.status(404).json({ message: \"Bird not found\" });\n      }\n\n      // Verify the bird belongs to the logged-in user\n      if (existingBird.userPhone !== req.session.userPhone) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const result = updateBirdDetailsSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const bird = await storage.updateBirdDetails(req.params.id, result.data);\n      res.json({ message: \"Bird details updated successfully.\", bird });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.delete(\"/api/bird-details/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const bird = await storage.getBirdDetailsById(req.params.id);\n      if (!bird) {\n        return res.status(404).json({ message: \"Bird not found\" });\n      }\n\n      // Verify the bird belongs to the logged-in user\n      if (bird.userPhone !== req.session.userPhone) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      await storage.deleteBirdDetails(req.params.id);\n      res.json({ message: \"Bird deleted successfully\" });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Admin authentication routes\n  app.post(\"/api/admin/login\", async (req, res, next) => {\n    try {\n      const result = adminLoginSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const { mobile, password } = result.data;\n\n      const admin = await storage.getAdminByMobile(mobile);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, admin.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session error\" });\n        }\n\n        // Set admin ID in the new session\n        req.session.adminId = admin.id;\n        // Ensure no user ID is present\n        delete req.session.userId;\n\n        // Save session\n        req.session.save((err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Session error\" });\n          }\n\n          const { password: _, ...adminWithoutPassword } = admin;\n          res.json({ admin: adminWithoutPassword });\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/admin/logout\", async (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/admin/session\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.json({ admin: null });\n      }\n\n      const admin = await storage.getAdmin(req.session.adminId);\n      if (!admin) {\n        return res.json({ admin: null });\n      }\n\n      // Remove password from response\n      const { password: _, ...adminWithoutPassword } = admin;\n      res.json({ admin: adminWithoutPassword });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Admin subscription management routes\n  app.get(\"/api/admin/subscriptions\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const subscriptions = await storage.getAllSubscriptions();\n      res.json({ subscriptions });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/admin/subscriptions/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const subscription = await storage.getSubscriptionById(req.params.id);\n      if (!subscription) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n\n      res.json({ subscription });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.patch(\"/api/admin/subscriptions/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const result = updateSubscriptionSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const subscription = await storage.updateSubscription(req.params.id, result.data);\n      if (!subscription) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n\n      res.json({ subscription });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/admin/subscriptions/:id/consultations\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { consultations } = req.body;\n      const subscriptionId = req.params.id;\n\n      // Validate consultations value\n      if (typeof consultations !== 'number' || !Number.isInteger(consultations) || consultations < 0 || consultations > 1000) {\n        return res.status(400).json({ message: \"Consultations must be a positive integer between 0 and 1000\" });\n      }\n\n      // Get current subscription\n      const currentSubscription = await storage.getSubscriptionById(subscriptionId);\n      if (!currentSubscription) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n\n      // Update consultations\n      const newStatus = consultations === 0 ? \"exhausted\" : (currentSubscription.status as \"active\" | \"expired\" | \"exhausted\");\n      const subscription = await storage.updateSubscription(subscriptionId, {\n        consultationsRemaining: consultations,\n        status: newStatus\n      });\n\n      // Create audit log\n      await storage.createAuditLog({\n        adminId: req.session.adminId,\n        subscriptionId,\n        action: \"updated_consultations\",\n        previousValue: String(currentSubscription.consultationsRemaining),\n        newValue: String(consultations),\n      });\n\n      res.json({ subscription });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.delete(\"/api/admin/subscriptions/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Check if subscription exists\n      const subscription = await storage.getSubscriptionById(req.params.id);\n      if (!subscription) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n\n      await storage.deleteSubscription(req.params.id);\n      res.json({ message: \"Subscription deleted successfully\" });\n    } catch (error: any) {\n      // Handle foreign key constraint errors gracefully\n      if (error.message && error.message.includes('foreign key constraint')) {\n        return res.status(400).json({ \n          message: \"Cannot delete subscription due to related records. Please contact support.\" \n        });\n      }\n      next(error);\n    }\n  });\n\n  app.get(\"/api/admin/subscriptions/:id/audit-logs\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const logs = await storage.getAuditLogsBySubscription(req.params.id);\n      res.json({ logs });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Admin unified user-subscriptions route\n  app.get(\"/api/admin/user-subscriptions\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const userSubscriptions = await storage.getUserAccountsWithSubscriptions();\n      \n      // Compute subscription status for each user\n      const now = new Date();\n      const enrichedData = userSubscriptions.map((record) => {\n        let subscriptionStatus = \"No Subscription\";\n        \n        if (record.subscriptionId && record.subscription && record.subscription.id) {\n          const endDate = new Date(record.subscription.subscriptionEndDate);\n          \n          if (record.subscription.status === \"exhausted\") {\n            subscriptionStatus = \"Exhausted\";\n          } else if (endDate < now || record.subscription.status === \"expired\") {\n            subscriptionStatus = \"Expired\";\n          } else if (record.subscription.status === \"active\") {\n            subscriptionStatus = \"Active\";\n          }\n        }\n        \n        return {\n          phone: record.phone,\n          fullName: record.fullName,\n          isMobileVerified: record.isMobileVerified,\n          verifiedAt: record.verifiedAt,\n          createdAt: record.createdAt,\n          subscriptionStatus,\n          subscription: (record.subscription && record.subscription.id) ? {\n            id: record.subscription.id,\n            subscriptionPlan: record.subscription.subscriptionPlan,\n            subscriptionStartDate: record.subscription.subscriptionStartDate,\n            subscriptionEndDate: record.subscription.subscriptionEndDate,\n            amountPaid: record.subscription.amountPaid,\n            consultationsRemaining: record.subscription.consultationsRemaining,\n            status: record.subscription.status,\n            birdSpecies: record.subscription.birdSpecies,\n            discountCoupon: record.subscription.discountCoupon,\n            razorpayOrderId: record.subscription.razorpayOrderId,\n            razorpayPaymentId: record.subscription.razorpayPaymentId,\n            paymentStatus: record.subscription.paymentStatus,\n          } : null,\n        };\n      });\n      \n      res.json({ userSubscriptions: enrichedData });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Admin user accounts routes\n  app.get(\"/api/admin/user-accounts\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const accounts = await storage.getAllUserAccounts();\n      \n      // Remove password from response\n      const accountsWithoutPassword = accounts.map(({ password, otp, ...account }) => account);\n      \n      res.json({ accounts: accountsWithoutPassword });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.delete(\"/api/admin/user-accounts/:phone\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { phone } = req.params;\n\n      if (!phone) {\n        return res.status(400).json({ message: \"Phone number is required\" });\n      }\n\n      // Check if user exists\n      const user = await storage.getUserAccount(phone);\n      if (!user) {\n        return res.status(404).json({ message: \"User account not found\" });\n      }\n\n      // Delete the user account (bird_details will cascade delete)\n      await storage.deleteUserAccount(phone);\n      \n      res.json({ \n        message: \"User account deleted successfully\",\n        deletedPhone: phone \n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Admin bird details routes\n  app.get(\"/api/admin/bird-details/by-phone/:phone\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const birds = await storage.getBirdDetailsByUser(req.params.phone);\n      res.json({ birds });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.patch(\"/api/admin/bird-details/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const result = updateBirdDetailsSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const bird = await storage.updateBirdDetails(req.params.id, result.data);\n      if (!bird) {\n        return res.status(404).json({ message: \"Bird not found\" });\n      }\n\n      res.json({ message: \"Bird details updated successfully\", bird });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/subscribers\", async (req, res, next) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const currentUser = await storage.getUser(req.session.userId);\n      if (!currentUser?.isAdmin) {\n        return res.status(403).json({ message: \"Forbidden - Admin access required\" });\n      }\n\n      const subscribers = await storage.getAllSubscribers();\n      \n      // Remove passwords from response\n      const subscribersWithoutPasswords = subscribers.map(({ password: _, ...user }) => user);\n      \n      res.json({ subscribers: subscribersWithoutPasswords });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Metrics routes\n  app.get(\"/api/metrics/active-users\", async (req, res, next) => {\n    try {\n      const { metricsCache, generateActiveUsers } = await import(\"./cache\");\n      \n      // Try to get cached value\n      const cached = metricsCache.getWithExpiry(\"active_users\");\n      \n      if (cached) {\n        return res.json({\n          value: cached.value,\n          expires_in_seconds: cached.expiresInSeconds\n        });\n      }\n      \n      // Generate new value and cache it for 60 seconds (configurable)\n      const newValue = generateActiveUsers(5, 19);\n      metricsCache.set(\"active_users\", newValue, 60);\n      \n      res.json({\n        value: newValue,\n        expires_in_seconds: 60\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/metrics/active-subscriptions\", async (req, res, next) => {\n    try {\n      const metric = await storage.getMetric(\"active_subscriptions\");\n      \n      if (!metric) {\n        return res.status(404).json({ message: \"Metric not found\" });\n      }\n      \n      res.json({\n        value: metric.value,\n        last_updated: metric.lastUpdatedAt\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/metrics/active-subscriptions/increment\", async (req, res, next) => {\n    try {\n      const updated = await storage.incrementMetric(\n        \"active_subscriptions\",\n        1,\n        \"payment\",\n        \"Successful subscription payment\"\n      );\n      \n      if (!updated) {\n        return res.status(404).json({ message: \"Metric not found\" });\n      }\n      \n      res.json({\n        value: updated.value,\n        last_updated: updated.lastUpdatedAt\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Admin metrics routes\n  app.post(\"/api/admin/metrics/active-subscriptions\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { value } = req.body;\n      \n      if (typeof value !== \"number\" || value < 0) {\n        return res.status(400).json({ message: \"Invalid value\" });\n      }\n\n      const current = await storage.getMetric(\"active_subscriptions\");\n      if (!current) {\n        return res.status(404).json({ message: \"Metric not found\" });\n      }\n\n      const updated = await storage.updateMetric(\"active_subscriptions\", value, \"admin\");\n      \n      // Create audit log\n      await storage.createMetricsAuditLog({\n        metricKey: \"active_subscriptions\",\n        oldValue: current.value,\n        newValue: value,\n        delta: value - current.value,\n        updatedBy: \"admin\",\n        reason: \"Admin override\",\n        adminId: req.session.adminId,\n      });\n      \n      res.json({\n        message: \"Metric updated successfully\",\n        value: updated?.value,\n        last_updated: updated?.lastUpdatedAt\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.get(\"/api/admin/metrics/audit-log\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const logs = await storage.getMetricsAuditLogs(limit);\n      \n      res.json({ logs });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== APPOINTMENT BOOKING ROUTES ====================\n  \n  // Helper function to generate time slots\n  function generateTimeSlots(startTime: string, endTime: string, duration: number, bufferTime: number): string[] {\n    const slots: string[] = [];\n    const [startHour, startMin] = startTime.split(':').map(Number);\n    const [endHour, endMin] = endTime.split(':').map(Number);\n    \n    let currentHour = startHour;\n    let currentMin = startMin;\n    \n    while (currentHour < endHour || (currentHour === endHour && currentMin < endMin)) {\n      const slotStart = `${String(currentHour).padStart(2, '0')}:${String(currentMin).padStart(2, '0')}`;\n      \n      // Calculate end time for this slot\n      let slotEndMin = currentMin + duration;\n      let slotEndHour = currentHour;\n      if (slotEndMin >= 60) {\n        slotEndHour += Math.floor(slotEndMin / 60);\n        slotEndMin = slotEndMin % 60;\n      }\n      \n      // Check if slot end time is within working hours\n      if (slotEndHour < endHour || (slotEndHour === endHour && slotEndMin <= endMin)) {\n        slots.push(slotStart);\n      }\n      \n      // Move to next slot (duration + buffer)\n      currentMin += duration + bufferTime;\n      while (currentMin >= 60) {\n        currentHour += 1;\n        currentMin -= 60;\n      }\n    }\n    \n    return slots;\n  }\n\n  // Get appointment settings\n  app.get(\"/api/appointment-settings\", async (req, res, next) => {\n    try {\n      const settings = await storage.getAppointmentSettings();\n      res.json({ settings });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get available slots for a specific date\n  app.get(\"/api/appointments/available-slots\", async (req, res, next) => {\n    try {\n      const { date } = req.query;\n      \n      if (!date || typeof date !== 'string') {\n        return res.status(400).json({ message: \"Date parameter is required\" });\n      }\n\n      // Get appointment settings\n      const settings = await storage.getAppointmentSettings();\n      if (!settings) {\n        return res.status(500).json({ message: \"Appointment settings not configured\" });\n      }\n\n      // Generate all possible slots for the day\n      const allSlots = generateTimeSlots(\n        settings.workingHoursStart,\n        settings.workingHoursEnd,\n        settings.slotDuration,\n        settings.bufferTime\n      );\n\n      // Get booked appointments for this date\n      const bookedAppointments = await storage.getAppointmentsByDate(date);\n      \n      // Get blocked slots for this date\n      const blockedSlots = await storage.getBlockedSlotsByDate(date);\n\n      // Filter out booked and blocked slots\n      const bookedTimes = new Set(bookedAppointments.map(apt => apt.slotStartTime));\n      const blockedTimes = new Set();\n      \n      blockedSlots.forEach(block => {\n        if (!block.slotStartTime) {\n          // Full day block - block all slots\n          allSlots.forEach(slot => blockedTimes.add(slot));\n        } else {\n          blockedTimes.add(block.slotStartTime);\n        }\n      });\n\n      const availableSlots = allSlots.map(slot => ({\n        time: slot,\n        available: !bookedTimes.has(slot) && !blockedTimes.has(slot),\n        status: bookedTimes.has(slot) ? 'booked' : (blockedTimes.has(slot) ? 'blocked' : 'available')\n      }));\n\n      res.json({ \n        date,\n        slots: availableSlots,\n        settings: {\n          slotDuration: settings.slotDuration,\n          workingHours: {\n            start: settings.workingHoursStart,\n            end: settings.workingHoursEnd\n          }\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get user's appointments\n  app.get(\"/api/appointments\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const appointments = await storage.getUserAppointments(req.session.userPhone);\n      res.json({ appointments });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Create new appointment\n  app.post(\"/api/appointments\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const result = createAppointmentSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const appointmentData = result.data;\n\n      // Verify user has consultation credits\n      const subscription = await storage.getUserSubscription(req.session.userPhone);\n      if (!subscription || subscription.status !== 'active') {\n        return res.status(400).json({ \n          message: \"You don't have an active subscription. Please subscribe first.\" \n        });\n      }\n\n      if (!subscription.consultationsRemaining || subscription.consultationsRemaining <= 0) {\n        return res.status(400).json({ \n          message: \"You have no consultations left. Please purchase a top-up to continue.\" \n        });\n      }\n\n      // Check if slot is still available\n      const existingAppointment = await storage.getAppointmentBySlot(\n        appointmentData.appointmentDate,\n        appointmentData.slotStartTime\n      );\n\n      if (existingAppointment) {\n        return res.status(400).json({ \n          message: \"This slot has already been booked. Please select another time.\" \n        });\n      }\n\n      // Check if slot is blocked\n      const isBlocked = await storage.isSlotBlocked(\n        appointmentData.appointmentDate,\n        appointmentData.slotStartTime\n      );\n\n      if (isBlocked) {\n        return res.status(400).json({ \n          message: \"This slot is not available. Please select another time.\" \n        });\n      }\n\n      // Create appointment\n      const appointment = await storage.createAppointment({\n        ...appointmentData,\n        userPhone: req.session.userPhone,\n        subscriptionId: subscription.id\n      });\n\n      // Deduct consultation credit\n      await storage.updateSubscriptionConsultations(\n        subscription.id,\n        subscription.consultationsRemaining - 1\n      );\n\n      // Send confirmation SMS\n      try {\n        const appointmentDateTime = new Date(appointmentData.appointmentDate);\n        const formattedDate = appointmentDateTime.toLocaleDateString('en-IN', { \n          weekday: 'long', \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        });\n        \n        await sendSMS(\n          req.session.userPhone,\n          `✅ Appointment Confirmed!\\n\\nDate: ${formattedDate}\\nTime: ${appointmentData.slotStartTime}\\nBird: ${appointmentData.birdName}\\n\\nFancy Feathers India`\n        );\n      } catch (smsError) {\n        console.error('Failed to send confirmation SMS:', smsError);\n        // Don't fail the appointment creation if SMS fails\n      }\n\n      res.status(201).json({ \n        message: \"Appointment booked successfully!\",\n        appointment,\n        remainingConsultations: subscription.consultationsRemaining - 1\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Cancel appointment\n  app.patch(\"/api/appointments/:id/cancel\", async (req, res, next) => {\n    try {\n      if (!req.session.userPhone) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      const appointment = await storage.getAppointmentById(id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      // Verify appointment belongs to user\n      if (appointment.userPhone !== req.session.userPhone) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      if (appointment.status === 'canceled') {\n        return res.status(400).json({ message: \"Appointment is already canceled\" });\n      }\n\n      // Check cancellation window (12 hours)\n      const appointmentDateTime = new Date(appointment.appointmentDate);\n      const now = new Date();\n      const hoursUntilAppointment = (appointmentDateTime.getTime() - now.getTime()) / (1000 * 60 * 60);\n\n      let creditRestored = false;\n      if (hoursUntilAppointment > 12) {\n        // Restore credit\n        const subscription = await storage.getSubscriptionById(appointment.subscriptionId);\n        if (subscription) {\n          await storage.updateSubscriptionConsultations(\n            subscription.id,\n            (subscription.consultationsRemaining || 0) + 1\n          );\n          creditRestored = true;\n        }\n      }\n\n      // Cancel appointment\n      await storage.cancelAppointment(id, 'user', reason, creditRestored);\n\n      res.json({ \n        message: creditRestored \n          ? \"Appointment canceled successfully. Your consultation credit has been restored.\" \n          : \"Appointment canceled. Note: Cancellations within 12 hours of appointment do not restore credits.\",\n        creditRestored\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // ==================== ADMIN APPOINTMENT ROUTES ====================\n\n  // Get all appointments (admin)\n  app.get(\"/api/admin/appointments\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { date, status, plan } = req.query;\n      \n      const appointments = await storage.getAllAppointments(\n        date as string | undefined,\n        status as string | undefined,\n        plan as string | undefined\n      );\n\n      res.json({ appointments });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Update appointment (admin)\n  app.patch(\"/api/admin/appointments/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      const result = updateAppointmentSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const appointment = await storage.getAppointmentById(id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      await storage.updateAppointment(id, result.data);\n\n      res.json({ message: \"Appointment updated successfully\" });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Block slots (admin)\n  app.post(\"/api/admin/blocked-slots\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const result = createBlockedSlotSchema.safeParse({\n        ...req.body,\n        blockedBy: req.session.adminId\n      });\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const blockedSlot = await storage.createBlockedSlot(result.data);\n\n      res.status(201).json({ \n        message: \"Slot blocked successfully\",\n        blockedSlot\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get blocked slots (admin)\n  app.get(\"/api/admin/blocked-slots\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { date } = req.query;\n      \n      const blockedSlots = date \n        ? await storage.getBlockedSlotsByDate(date as string)\n        : await storage.getAllBlockedSlots();\n\n      res.json({ blockedSlots });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Delete blocked slot (admin)\n  app.delete(\"/api/admin/blocked-slots/:id\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const { id } = req.params;\n      await storage.deleteBlockedSlot(id);\n\n      res.json({ message: \"Blocked slot removed successfully\" });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Update appointment settings (admin)\n  app.patch(\"/api/admin/appointment-settings\", async (req, res, next) => {\n    try {\n      if (!req.session.adminId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const result = updateAppointmentSettingsSchema.safeParse(req.body);\n      \n      if (!result.success) {\n        return res.status(400).json({ \n          message: fromError(result.error).toString() \n        });\n      }\n\n      const settings = await storage.updateAppointmentSettings(result.data, req.session.adminId);\n\n      res.json({ \n        message: \"Settings updated successfully\",\n        settings\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":68500},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { User, LogOut, Menu, ShoppingBag, MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AnimatedLogo from \"@/components/AnimatedLogo\";\n\ninterface HeaderProps {\n  onBrowseBirdsClick?: () => void;\n}\n\nexport default function Header({ onBrowseBirdsClick }: HeaderProps = {}) {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [whereToBuyOpen, setWhereToBuyOpen] = useState(false);\n\n  // Check for user account session\n  const { data: userAccountSession } = useQuery<any>({\n    queryKey: [\"/api/user-account/session\"],\n  });\n\n  // Determine which user is logged in (admin or user account)\n  const loggedInUser = user || userAccountSession?.account;\n  const isUserAccount = !!userAccountSession?.account;\n\n  const handleLogout = async () => {\n    try {\n      if (isUserAccount) {\n        // Logout user account\n        await apiRequest('POST', '/api/user-account/logout');\n      } else {\n        // Logout admin\n        await logout();\n      }\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\",\n      });\n      setLocation(\"/\");\n      setMobileMenuOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const NavLinks = ({ mobile = false }) => {\n    const linkClass = mobile \n      ? \"flex items-center gap-3 px-4 py-3 rounded-md hover-elevate active-elevate-2 transition-colors text-base font-medium\"\n      : \"text-sm font-medium transition-colors hover:text-primary cursor-pointer\";\n    \n    const handleClick = () => {\n      if (mobile) setMobileMenuOpen(false);\n    };\n\n    const handleWhereToBuyClick = () => {\n      setWhereToBuyOpen(true);\n      if (mobile) setMobileMenuOpen(false);\n    };\n\n    const handleBrowseBirdsClick = () => {\n      if (onBrowseBirdsClick) {\n        onBrowseBirdsClick();\n      } else {\n        setLocation(\"/\");\n      }\n      if (mobile) setMobileMenuOpen(false);\n    };\n\n    return (\n      <>\n        <Link href=\"/\" data-testid={mobile ? \"link-mobile-nav-home\" : \"link-nav-home\"}>\n          <span \n            onClick={handleClick}\n            className={mobile ? linkClass : `${linkClass} ${location === \"/\" ? \"text-foreground\" : \"text-muted-foreground\"}`}\n          >\n            Home\n          </span>\n        </Link>\n        <Link href=\"/about\" data-testid={mobile ? \"link-mobile-nav-about\" : \"link-nav-about\"}>\n          <span \n            onClick={handleClick}\n            className={mobile ? linkClass : `${linkClass} ${location === \"/about\" ? \"text-foreground\" : \"text-muted-foreground\"}`}\n          >\n            About\n          </span>\n        </Link>\n        <span \n          onClick={handleWhereToBuyClick}\n          className={mobile ? linkClass : `${linkClass} text-muted-foreground`}\n          data-testid={mobile ? \"link-mobile-nav-where-to-buy\" : \"link-nav-where-to-buy\"}\n        >\n          Where to Buy\n        </span>\n        <Link href=\"/subscription\" data-testid={mobile ? \"link-mobile-nav-subscription\" : \"link-nav-subscription\"}>\n          <span \n            onClick={handleClick}\n            className={mobile ? linkClass : `${linkClass} ${location === \"/subscription\" ? \"text-foreground\" : \"text-muted-foreground\"}`}\n          >\n            Bird Care Subscription\n          </span>\n        </Link>\n        <span \n          onClick={handleBrowseBirdsClick}\n          className={mobile ? linkClass : `${linkClass} text-muted-foreground`}\n          data-testid={mobile ? \"link-mobile-nav-birds\" : \"link-nav-birds\"}\n        >\n          Browse all Birds\n        </span>\n        {loggedInUser && (\n          <Link href={isUserAccount ? \"/user-dashboard\" : \"/dashboard\"} data-testid={mobile ? \"link-mobile-nav-dashboard\" : \"link-nav-dashboard\"}>\n            <span \n              onClick={handleClick}\n              className={mobile ? linkClass : `${linkClass} ${(location === \"/dashboard\" || location === \"/user-dashboard\") ? \"text-foreground\" : \"text-muted-foreground\"}`}\n            >\n              Dashboard\n            </span>\n          </Link>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 md:h-20 items-center justify-between gap-2 md:gap-4\">\n          {/* Mobile Menu Button */}\n          <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"w-[280px] sm:w-[320px]\">\n              <SheetHeader>\n                <SheetTitle className=\"flex items-center gap-2\">\n                  <AnimatedLogo className=\"h-5 w-5\" />\n                  <span className=\"text-base\">Fancy Feathers India</span>\n                </SheetTitle>\n              </SheetHeader>\n              <nav className=\"flex flex-col gap-2 mt-8\">\n                <NavLinks mobile={true} />\n              </nav>\n              <div className=\"mt-8 pt-8 border-t\">\n                {loggedInUser ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"px-4 py-2 bg-muted rounded-md\">\n                      <p className=\"text-xs text-muted-foreground\">Logged in as</p>\n                      <p className=\"text-sm font-medium\">{loggedInUser.fullName}</p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={handleLogout}\n                      data-testid=\"button-mobile-logout\"\n                    >\n                      <LogOut className=\"h-4 w-4 mr-2\" />\n                      Logout\n                    </Button>\n                  </div>\n                ) : (\n                  <Link href=\"/login\" data-testid=\"link-mobile-login\">\n                    <Button variant=\"outline\" className=\"w-full\" onClick={() => setMobileMenuOpen(false)}>\n                      <User className=\"h-4 w-4 mr-2\" />\n                      Login\n                    </Button>\n                  </Link>\n                )}\n              </div>\n            </SheetContent>\n          </Sheet>\n\n          {/* Logo */}\n          <Link href=\"/\" data-testid=\"link-home\">\n            <div className=\"flex items-center gap-2 hover-elevate active-elevate-2 rounded-md px-2 py-1 cursor-pointer\">\n              <AnimatedLogo className=\"h-6 w-6 md:h-7 md:w-7\" />\n              <span className=\"font-semibold text-base md:text-lg hidden sm:inline\">Fancy Feathers India</span>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center gap-4 lg:gap-6\">\n            <NavLinks mobile={false} />\n          </nav>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center gap-2\">\n            {loggedInUser ? (\n              <div className=\"hidden md:flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground hidden lg:inline\">\n                  {loggedInUser.fullName}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={handleLogout}\n                  data-testid=\"button-logout\"\n                  title=\"Logout\"\n                >\n                  <LogOut className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ) : (\n              <Link href=\"/login\" data-testid=\"link-header-login\">\n                <Button variant=\"outline\" size=\"sm\" className=\"hidden md:flex\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  Login\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Where to Buy Dialog */}\n      <Dialog open={whereToBuyOpen} onOpenChange={setWhereToBuyOpen}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-where-to-buy\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl flex items-center gap-2\">\n              <ShoppingBag className=\"h-6 w-6 text-primary\" />\n              Where to Buy Exotic Birds\n            </DialogTitle>\n            <DialogDescription className=\"text-base pt-4 space-y-4\">\n              <p className=\"text-foreground leading-relaxed\">\n                If you're looking for a healthy, well-bred Exotic Bird, we can introduce you to experienced breeders and trusted sellers who maintain strong parent stock, careful rearing and good husbandry practices.\n              </p>\n              <div className=\"pt-2\">\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  For vetted contacts and current availability, message us on WhatsApp:\n                </p>\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-[#25D366] hover:bg-[#20BA5A] text-white hover-elevate active-elevate-2\"\n                  onClick={() => {\n                    window.open('https://wa.me/919014284059', '_blank');\n                  }}\n                  data-testid=\"button-whatsapp-contact\"\n                >\n                  <MessageCircle className=\"mr-2 h-5 w-5\" />\n                  Contact on WhatsApp: +91 90142 84059\n                </Button>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n        </DialogContent>\n      </Dialog>\n    </header>\n  );\n}\n","size_bytes":10283},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, type ReactNode } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { User, LoginCredentials, RegisterData } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { data: session, isLoading } = useQuery<{ user: User | null }>({\n    queryKey: [\"/api/auth/session\"],\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/session\"] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterData) => {\n      return await apiRequest(\"POST\", \"/api/auth/register\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/session\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/session\"] });\n    },\n  });\n\n  const login = async (credentials: LoginCredentials) => {\n    await loginMutation.mutateAsync(credentials);\n  };\n\n  const register = async (data: RegisterData) => {\n    await registerMutation.mutateAsync(data);\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: session?.user || null,\n        isLoading,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2287},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/examples/QuickFacts.tsx":{"content":"import QuickFacts from '../QuickFacts';\n\nexport default function QuickFactsExample() {\n  return (\n    <div className=\"p-6 max-w-md\">\n      <QuickFacts \n        scientificName=\"Ara ararauna\"\n        origin=\"South America\"\n        lifespan=\"50-60 years\"\n        size=\"large\"\n        noiseLevel=\"loud\"\n      />\n    </div>\n  );\n}\n","size_bytes":326},"client/src/components/CareChecklist.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Check } from \"lucide-react\";\n\ninterface CareChecklistProps {\n  items: string[];\n}\n\nexport default function CareChecklist({ items }: CareChecklistProps) {\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"font-semibold mb-4\">Essential Care Checklist</h3>\n      <ul className=\"space-y-3\">\n        {items.map((item, index) => (\n          <li key={index} className=\"flex items-start gap-3\" data-testid={`checklist-item-${index}`}>\n            <div className=\"flex-shrink-0 mt-0.5\">\n              <div className=\"w-5 h-5 rounded-full bg-primary/10 flex items-center justify-center\">\n                <Check className=\"h-3 w-3 text-primary\" />\n              </div>\n            </div>\n            <span className=\"text-sm\">{item}</span>\n          </li>\n        ))}\n      </ul>\n    </Card>\n  );\n}\n","size_bytes":851},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { AuthProvider } from \"@/lib/auth\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport BirdProfile from \"@/pages/BirdProfile\";\nimport About from \"@/pages/About\";\nimport BirdCareSubscription from \"@/pages/BirdCareSubscription\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport UserAccountRegister from \"@/pages/UserAccountRegister\";\nimport UserAccountLogin from \"@/pages/UserAccountLogin\";\nimport UserDashboard from \"@/pages/UserDashboard\";\nimport BookAppointment from \"@/pages/BookAppointment\";\nimport TermsAndConditions from \"@/pages/TermsAndConditions\";\nimport CancellationRefund from \"@/pages/CancellationRefund\";\nimport ShippingPolicy from \"@/pages/ShippingPolicy\";\nimport PrivacyPolicy from \"@/pages/PrivacyPolicy\";\nimport ContactUs from \"@/pages/ContactUs\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/bird/:slug\" component={BirdProfile} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/subscription\" component={BirdCareSubscription} />\n      <Route path=\"/bird-care\" component={BirdCareSubscription} />\n      <Route path=\"/bird-care-subscription\" component={BirdCareSubscription} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/user-account/register/:phone/:subscriptionId?\" component={UserAccountRegister} />\n      <Route path=\"/user-account/login\" component={UserAccountLogin} />\n      <Route path=\"/user-dashboard\" component={UserDashboard} />\n      <Route path=\"/book-appointment\" component={BookAppointment} />\n      <Route path=\"/terms-and-conditions\" component={TermsAndConditions} />\n      <Route path=\"/cancellation-refund\" component={CancellationRefund} />\n      <Route path=\"/shipping-policy\" component={ShippingPolicy} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/contact-us\" component={ContactUs} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2900},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    fullName: \"\",\n    phone: \"\",\n    subscriptionPlan: \"\",\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // Convert empty strings to null for optional fields\n      const submitData = {\n        ...formData,\n        phone: formData.phone || null,\n        subscriptionPlan: formData.subscriptionPlan || null,\n      };\n      \n      await register(submitData);\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully\",\n      });\n      setLocation(\"/dashboard\");\n    } catch (error: any) {\n      console.error(\"Signup error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n\n      <main className=\"flex-1 flex items-center justify-center py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-md\">\n          <Card>\n            <CardHeader className=\"space-y-1\">\n              <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n              <CardDescription className=\"text-center\">\n                Subscribe to our Bird Care services\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\">Full Name</Label>\n                  <Input\n                    id=\"fullName\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={formData.fullName}\n                    onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                    required\n                    data-testid=\"input-fullname\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    placeholder=\"+91 XXXXX XXXXX\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Choose a username\"\n                    value={formData.username}\n                    onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                    required\n                    data-testid=\"input-username\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Choose a password (min 6 characters)\"\n                    value={formData.password}\n                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"subscriptionPlan\">\n                    Subscription Plan \n                    <span className=\"ml-2 text-xs text-primary font-semibold\">Limited Time Offer!</span>\n                  </Label>\n                  <Select\n                    value={formData.subscriptionPlan}\n                    onValueChange={(value) => setFormData({ ...formData, subscriptionPlan: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-plan\">\n                      <SelectValue placeholder=\"Select a plan\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"monthly\">\n                        Monthly - ₹2,100/month <span className=\"text-muted-foreground line-through text-xs ml-1\">₹2,625</span> <span className=\"text-orange-600 text-xs ml-1\">(20% OFF)</span>\n                      </SelectItem>\n                      <SelectItem value=\"six-month\">\n                        6-Month Plan - ₹21,600 <span className=\"text-muted-foreground line-through text-xs ml-1\">₹28,800</span> <span className=\"text-primary text-xs ml-1\">(25% OFF)</span>\n                      </SelectItem>\n                      <SelectItem value=\"annual\">\n                        Annual Plan - ₹37,400/year <span className=\"text-muted-foreground line-through text-xs ml-1\">₹57,600</span> <span className=\"text-green-600 text-xs ml-1 font-semibold\">(35% OFF - Best Value!)</span>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading}\n                  data-testid=\"button-signup\"\n                >\n                  {isLoading ? \"Creating Account...\" : \"Create Account\"}\n                </Button>\n\n                <div className=\"text-center text-sm text-muted-foreground\">\n                  Already have an account?{\" \"}\n                  <Link href=\"/login\" data-testid=\"link-login\">\n                    <span className=\"text-primary hover:underline cursor-pointer\">Login</span>\n                  </Link>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7319},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/HeroCarousel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight, ArrowRight, ShoppingBag, Stethoscope, HandHeart, Bird } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport heroImage1 from '@assets/generated_images/Indian_family_four_members_birds_scene1_ea5596b5.png';\nimport heroImage2 from '@assets/generated_images/Indian_family_four_members_birds_scene2_445a2e56.png';\nimport heroImage3 from '@assets/generated_images/Indian_family_four_members_birds_scene3_bdaace07.png';\nimport heroImage4 from '@assets/generated_images/Family_garden_with_boy_playing_Scarlet_Macaw_8f245078.png';\n\nconst slides = [\n  {\n    image: heroImage1,\n    title: \"Happiness comes with feathers!\",\n    description: \"Bring home a companion that talks, laughs, and becomes part of your family — because love comes in every color.\"\n  },\n  {\n    image: heroImage2,\n    title: \"A family that chirps together, stays together!\",\n    description: \"Exotic birds fill your home with laughter, colors, and unforgettable memories. Discover the joy of bonding beyond words.\"\n  },\n  {\n    image: heroImage3,\n    title: \"More than a pet — it's a lifetime of friendship.\",\n    description: \"Experience pure affection, endless conversations, and a splash of color in every moment with your exotic bird.\"\n  },\n  {\n    image: heroImage4,\n    title: \"Where laughter takes flight and memories are made.\",\n    description: \"Watch your children discover the magic of friendship with wings — creating moments of pure joy that bring the whole family together.\"\n  },\n  {\n    image: heroImage2,\n    title: \"Add wings to your family's happiness.\",\n    description: \"Give your loved ones the gift of joy, intelligence, and companionship — an exotic bird that becomes one of your own.\"\n  }\n];\n\ninterface HeroCarouselProps {\n  onWhereToBuyClick: () => void;\n  onBirdCareClick: () => void;\n}\n\nexport default function HeroCarousel({ onWhereToBuyClick, onBirdCareClick }: HeroCarouselProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentIndex((prevIndex) => (prevIndex + 1) % slides.length);\n    }, 5000); // Change slide every 5 seconds\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const goToSlide = (index: number) => {\n    setCurrentIndex(index);\n  };\n\n  const goToPrevious = () => {\n    setCurrentIndex((prevIndex) => \n      prevIndex === 0 ? slides.length - 1 : prevIndex - 1\n    );\n  };\n\n  const goToNext = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % slides.length);\n  };\n\n  return (\n    <div className=\"relative w-full h-full\">\n      {/* Slides */}\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-opacity duration-1000 pointer-events-none ${\n            index === currentIndex ? \"opacity-100\" : \"opacity-0\"\n          }`}\n        >\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{ backgroundImage: `url(${slide.image})` }}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/40 to-black/60\" />\n          </div>\n          \n          {/* Caption */}\n          <div className=\"absolute bottom-8 md:bottom-16 left-0 right-0 z-10 px-3 sm:px-6 lg:px-8 pointer-events-none\">\n            <div className=\"container mx-auto max-w-4xl\">\n              <div className=\"bg-black/30 backdrop-blur-md rounded-lg p-4 sm:p-6 md:p-8 border border-white/20\">\n                <h3 className=\"text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold text-white mb-2 sm:mb-3\">\n                  {slide.title}\n                </h3>\n                <p className=\"text-sm sm:text-base md:text-lg text-white/90 leading-relaxed mb-4 sm:mb-6\">\n                  {slide.description}\n                </p>\n                <div className=\"flex flex-wrap gap-2 sm:gap-3 md:gap-4 pointer-events-auto\">\n                  <Button\n                    size=\"default\"\n                    variant=\"outline\"\n                    className=\"bg-background/10 backdrop-blur-sm border-white/30 text-white hover:bg-background/20 hover-elevate active-elevate-2 text-xs sm:text-sm md:text-base\"\n                    onClick={() => {\n                      window.scrollTo({\n                        top: window.innerHeight * 0.7,\n                        behavior: \"smooth\",\n                      });\n                    }}\n                    data-testid=\"button-browse-birds\"\n                  >\n                    <div className=\"flex items-center gap-1 mr-1 sm:mr-2\">\n                      <Bird className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      <ArrowRight className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    </div>\n                    <span className=\"hidden sm:inline\">Browse all Birds</span>\n                    <span className=\"sm:hidden\">Browse</span>\n                  </Button>\n                  <Button\n                    size=\"default\"\n                    variant=\"outline\"\n                    className=\"bg-background/10 backdrop-blur-sm border-white/30 text-white hover:bg-background/20 hover-elevate active-elevate-2 text-xs sm:text-sm md:text-base\"\n                    onClick={onWhereToBuyClick}\n                    data-testid=\"button-where-to-buy\"\n                  >\n                    <ShoppingBag className=\"mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4\" />\n                    <span className=\"hidden sm:inline\">Where to Buy</span>\n                    <span className=\"sm:hidden\">Buy</span>\n                  </Button>\n                  <Button\n                    size=\"default\"\n                    variant=\"outline\"\n                    className=\"bg-background/10 backdrop-blur-sm border-white/30 text-white hover:bg-background/20 hover-elevate active-elevate-2 text-xs sm:text-sm md:text-base\"\n                    onClick={onBirdCareClick}\n                    data-testid=\"button-bird-care\"\n                  >\n                    <div className=\"flex items-center gap-1 mr-1 sm:mr-2\">\n                      <Stethoscope className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                      <HandHeart className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                    </div>\n                    <span className=\"hidden sm:inline\">Bird Care Subscription</span>\n                    <span className=\"sm:hidden\">Subscription</span>\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n\n      {/* Navigation Arrows */}\n      <button\n        onClick={goToPrevious}\n        className=\"absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 z-30 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full p-1.5 sm:p-2 transition-all hover-elevate active-elevate-2\"\n        aria-label=\"Previous image\"\n        data-testid=\"button-carousel-prev\"\n      >\n        <ChevronLeft className=\"h-4 w-4 sm:h-6 sm:w-6 text-white\" />\n      </button>\n      <button\n        onClick={goToNext}\n        className=\"absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 z-30 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full p-1.5 sm:p-2 transition-all hover-elevate active-elevate-2\"\n        aria-label=\"Next image\"\n        data-testid=\"button-carousel-next\"\n      >\n        <ChevronRight className=\"h-4 w-4 sm:h-6 sm:w-6 text-white\" />\n      </button>\n\n      {/* Dot Indicators */}\n      <div className=\"absolute bottom-2 sm:bottom-4 left-1/2 -translate-x-1/2 z-30 flex gap-1.5 sm:gap-2\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`h-1.5 sm:h-2 rounded-full transition-all ${\n              index === currentIndex\n                ? \"bg-white w-6 sm:w-8\"\n                : \"bg-white/50 hover:bg-white/75 w-1.5 sm:w-2\"\n            }`}\n            aria-label={`Go to slide ${index + 1}`}\n            data-testid={`button-carousel-dot-${index}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7996},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/pages/Home.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport BirdCard from \"@/components/BirdCard\";\nimport FilterChips, { type Filters } from \"@/components/FilterChips\";\nimport HeroCarousel from \"@/components/HeroCarousel\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n  DrawerClose,\n} from \"@/components/ui/drawer\";\nimport { ArrowRight, Heart, HandHeart, Stethoscope, ShoppingBag, MessageCircle, SlidersHorizontal, Bird } from \"lucide-react\";\nimport { birdsData } from \"@/lib/birdsData\";\nimport BirdShowcase from \"@/components/BirdShowcase\";\nimport SubscriptionShowcase from \"@/components/SubscriptionShowcase\";\nimport doctorAnandImage from \"@assets/ChatGPT Image Oct 24, 2025, 08_08_37 PM_1761316723629.png\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [whereToBuyOpen, setWhereToBuyOpen] = useState(false);\n  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);\n  const [showCatalog, setShowCatalog] = useState(false);\n  const [filters, setFilters] = useState<Filters>({\n    traits: [],\n    priceRange: null,\n    sizes: [],\n  });\n\n  const filteredBirds = useMemo(() => {\n    return birdsData.filter((bird) => {\n      const matchesSearch =\n        searchQuery === \"\" ||\n        bird.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        bird.scientificName.toLowerCase().includes(searchQuery.toLowerCase());\n\n      const matchesTraits =\n        filters.traits.length === 0 ||\n        filters.traits.every(trait => bird.traits.includes(trait));\n\n      const matchesSize =\n        filters.sizes.length === 0 ||\n        filters.sizes.includes(bird.size);\n\n      const matchesPrice =\n        !filters.priceRange ||\n        (() => {\n          const [min, max] = filters.priceRange.split(\"-\").map(Number);\n          return bird.priceMin <= max && bird.priceMax >= min;\n        })();\n\n      return matchesSearch && matchesTraits && matchesSize && matchesPrice;\n    });\n  }, [searchQuery, filters]);\n\n  const handleBrowseBirdsClick = () => {\n    setShowCatalog(true);\n    setTimeout(() => {\n      const catalogElement = document.getElementById('bird-catalog');\n      if (catalogElement) {\n        catalogElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }\n    }, 100);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header onBrowseBirdsClick={handleBrowseBirdsClick} />\n\n      <section className=\"relative h-[50vh] sm:h-[60vh] md:h-[70vh] min-h-[400px] sm:min-h-[500px] overflow-hidden\">\n        <HeroCarousel \n          onWhereToBuyClick={() => setWhereToBuyOpen(true)}\n          onBirdCareClick={() => setLocation(\"/subscription\")}\n        />\n      </section>\n\n      <Dialog open={whereToBuyOpen} onOpenChange={setWhereToBuyOpen}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-where-to-buy\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl flex items-center gap-2\">\n              <ShoppingBag className=\"h-6 w-6 text-primary\" />\n              Where to Buy Exotic Birds\n            </DialogTitle>\n            <DialogDescription className=\"text-base pt-4 space-y-4\">\n              <p className=\"text-foreground leading-relaxed\">\n                If you're looking for a healthy, well-bred Exotic Bird, we can introduce you to experienced breeders and trusted sellers who maintain strong parent stock, careful rearing and good husbandry practices.\n              </p>\n              <div className=\"pt-2\">\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  For vetted contacts and current availability, message us on WhatsApp:\n                </p>\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-[#25D366] hover:bg-[#20BA5A] text-white hover-elevate active-elevate-2\"\n                  onClick={() => {\n                    window.open('https://wa.me/919014284059', '_blank');\n                  }}\n                  data-testid=\"button-whatsapp-contact\"\n                >\n                  <MessageCircle className=\"mr-2 h-5 w-5\" />\n                  Contact on WhatsApp: +91 90142 84059\n                </Button>\n              </div>\n            </DialogDescription>\n          </DialogHeader>\n        </DialogContent>\n      </Dialog>\n\n      <section className=\"bg-muted/30 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"border-2 border-primary/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex flex-col md:flex-row items-center gap-8\">\n                <div className=\"flex-1 text-center md:text-left order-2 md:order-1\">\n                  <div className=\"flex items-center justify-center md:justify-start gap-2 mb-3\">\n                    <Bird className=\"h-6 w-6 text-primary\" />\n                    <Heart className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <h2 className=\"text-2xl md:text-3xl font-bold text-foreground mb-3\">\n                    Discover the Vibrant World of Exotic Pet Birds\n                  </h2>\n                  <p className=\"text-muted-foreground max-w-2xl mb-6\">\n                    From majestic Macaws to charming Cockatoos and talking Amazon Parrots—explore their \n                    behaviour, approximate price ranges, and find the bird that truly fits your home and family.\n                  </p>\n                  <Button\n                    size=\"lg\"\n                    className=\"bg-primary text-primary-foreground hover-elevate active-elevate-2\"\n                    onClick={() => {\n                      setShowCatalog(true);\n                      setTimeout(() => {\n                        const catalogElement = document.getElementById('bird-catalog');\n                        if (catalogElement) {\n                          catalogElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                        }\n                      }, 100);\n                    }}\n                    data-testid=\"button-browse-species\"\n                  >\n                    Browse all the species\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"w-full md:w-auto order-1 md:order-2\">\n                  <BirdShowcase birds={birdsData} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      <section className=\"bg-muted/30 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"border-2 border-primary/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex flex-col md:flex-row items-center gap-8\">\n                <div className=\"flex-1 text-center md:text-left order-2 md:order-1\">\n                  <div className=\"flex items-center justify-center md:justify-start gap-2 mb-3\">\n                    <Stethoscope className=\"h-6 w-6 text-primary\" />\n                    <HandHeart className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h2 className=\"text-2xl md:text-3xl font-bold text-foreground mb-3\">\n                    Comprehensive Bird Care Subscription\n                  </h2>\n                  <p className=\"text-muted-foreground max-w-2xl mb-6\">\n                    Give your feathered companion expert care with monthly health check-ups, \n                    personalized nutrition plans, and guidance from <span className=\"text-primary font-semibold\">certified Exotic avian veterinarians and certified Exotic Bird Behaviourist</span>.\n                  </p>\n                  <Button\n                    size=\"lg\"\n                    className=\"bg-primary text-primary-foreground hover-elevate active-elevate-2 min-h-11\"\n                    onClick={() => setLocation(\"/subscription\")}\n                    data-testid=\"button-bird-care-subscription\"\n                  >\n                    View All Plans\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"w-full md:w-auto order-1 md:order-2\">\n                  <SubscriptionShowcase doctorImage={doctorAnandImage} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {(showCatalog || searchQuery) && (\n        <main className=\"flex-1\" id=\"bird-catalog\">\n          <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12\">\n            <div className=\"flex flex-col lg:flex-row gap-6 lg:gap-8\">\n              {/* Desktop Filter Sidebar - Hidden on Mobile */}\n              <aside className=\"hidden lg:block lg:w-72 flex-shrink-0\">\n                <div className=\"sticky top-24\">\n                  <Card className=\"p-6\">\n                    <FilterChips filters={filters} onFilterChange={setFilters} />\n                  </Card>\n                </div>\n              </aside>\n\n              <div className=\"flex-1\">\n                {/* Mobile Filter Button */}\n                <div className=\"lg:hidden mb-4\">\n                  <Drawer open={mobileFiltersOpen} onOpenChange={setMobileFiltersOpen}>\n                    <DrawerTrigger asChild>\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full md:w-auto\"\n                        size=\"lg\"\n                        data-testid=\"button-mobile-filters\"\n                      >\n                        <SlidersHorizontal className=\"h-5 w-5 mr-2\" />\n                        Filters & Search\n                        {(filters.traits.length > 0 || filters.priceRange || filters.sizes.length > 0) && (\n                          <span className=\"ml-2 px-2 py-0.5 bg-primary text-primary-foreground text-xs rounded-full\">\n                            {filters.traits.length + filters.sizes.length + (filters.priceRange ? 1 : 0)}\n                          </span>\n                        )}\n                      </Button>\n                    </DrawerTrigger>\n                    <DrawerContent className=\"max-h-[85vh]\">\n                      <DrawerHeader>\n                        <DrawerTitle>Filter Birds</DrawerTitle>\n                      </DrawerHeader>\n                      <div className=\"px-4 pb-8 overflow-y-auto\">\n                        <FilterChips filters={filters} onFilterChange={setFilters} />\n                        <DrawerClose asChild>\n                          <Button className=\"w-full mt-6\" size=\"lg\" data-testid=\"button-apply-filters\">\n                            Apply Filters\n                          </Button>\n                        </DrawerClose>\n                      </div>\n                    </DrawerContent>\n                  </Drawer>\n                </div>\n\n                <div className=\"mb-6\">\n                  <h2 className=\"text-xl md:text-2xl font-semibold mb-2\">\n                    {filteredBirds.length} {filteredBirds.length === 1 ? \"Species\" : \"Species\"} Found\n                  </h2>\n                  <p className=\"text-sm md:text-base text-muted-foreground\">\n                    {searchQuery && `Showing results for \"${searchQuery}\"`}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 md:gap-6\">\n                  {filteredBirds.map((bird) => (\n                    <BirdCard key={bird.id} bird={bird} />\n                  ))}\n                </div>\n\n                {filteredBirds.length === 0 && (\n                  <div className=\"text-center py-12\">\n                    <p className=\"text-lg text-muted-foreground mb-4\">\n                      No birds found matching your criteria\n                    </p>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSearchQuery(\"\");\n                        setFilters({ traits: [], priceRange: null, sizes: [] });\n                      }}\n                      data-testid=\"button-clear-all\"\n                    >\n                      Clear All Filters\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      )}\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12724},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/examples/CareChecklist.tsx":{"content":"import CareChecklist from '../CareChecklist';\n\nexport default function CareChecklistExample() {\n  const mockItems = [\n    \"Provide fresh food and water daily\",\n    \"Spend 2-3 hours of social interaction\",\n    \"Clean cage and perches weekly\",\n    \"Regular vet checkups (annually)\",\n    \"Mental stimulation with toys\"\n  ];\n\n  return (\n    <div className=\"p-6 max-w-md\">\n      <CareChecklist items={mockItems} />\n    </div>\n  );\n}\n","size_bytes":428},"client/src/components/examples/FilterChips.tsx":{"content":"import { useState } from 'react';\nimport FilterChips, { type Filters } from '../FilterChips';\n\nexport default function FilterChipsExample() {\n  const [filters, setFilters] = useState<Filters>({\n    traits: [],\n    priceRange: null\n  });\n\n  return (\n    <div className=\"p-6 max-w-md\">\n      <FilterChips filters={filters} onFilterChange={setFilters} />\n    </div>\n  );\n}\n","size_bytes":370},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Loader2, Users, Mail, Phone, Calendar, CreditCard, Heart, Bird } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const { user, isLoading: authLoading } = useAuth();\n\n  const { data, isLoading, error } = useQuery<{ subscribers: User[] }>({\n    queryKey: [\"/api/subscribers\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  useEffect(() => {\n    if (!authLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, authLoading, setLocation]);\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const getPlanLabel = (plan: string | null) => {\n    if (!plan) return \"None\";\n    if (plan === \"monthly\") return \"Monthly (₹2,100/month)\";\n    if (plan === \"six-month\") return \"6-Month Plan (₹21,600)\";\n    if (plan === \"annual\") return \"Annual Plan (₹37,400/year)\";\n    // Legacy support for old three-year plan\n    if (plan === \"three-year\") return \"Three Year (₹30,240 - Legacy)\";\n    return plan;\n  };\n\n  const getStatusVariant = (status: string | null) => {\n    if (status === \"active\") return \"default\";\n    if (status === \"inactive\") return \"secondary\";\n    return \"outline\";\n  };\n\n  // Admin Dashboard\n  if (user.isAdmin) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n\n        <main className=\"flex-1 py-12\">\n          <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"mb-8\">\n              <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"heading-admin-dashboard\">Admin Dashboard</h1>\n              <p className=\"text-muted-foreground\">\n                Manage and view all Bird Care subscription members\n              </p>\n            </div>\n\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n              </div>\n            ) : error ? (\n              <Card>\n                <CardContent className=\"py-8\">\n                  <p className=\"text-center text-destructive\">\n                    Failed to load subscribers. Please try again.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <>\n                <Card className=\"mb-6\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" />\n                      Subscriber Statistics\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"text-center p-4 bg-muted rounded-lg\">\n                        <p className=\"text-3xl font-bold text-primary\">{data?.subscribers.length || 0}</p>\n                        <p className=\"text-sm text-muted-foreground\">Total Subscribers</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-muted rounded-lg\">\n                        <p className=\"text-3xl font-bold text-green-600\">\n                          {data?.subscribers.filter(s => s.subscriptionStatus === \"active\").length || 0}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">Active</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-muted rounded-lg\">\n                        <p className=\"text-3xl font-bold text-gray-600\">\n                          {data?.subscribers.filter(s => !s.subscriptionPlan).length || 0}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">No Plan</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"space-y-4\">\n                  <h2 className=\"text-2xl font-semibold\">All Subscribers</h2>\n                  {!data?.subscribers || data.subscribers.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"py-12\">\n                        <div className=\"text-center text-muted-foreground\">\n                          <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                          <p className=\"text-lg font-medium mb-2\">No subscribers yet</p>\n                          <p className=\"text-sm\">When users sign up for Bird Care subscriptions, they will appear here.</p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    <div className=\"grid gap-4\">\n                      {data.subscribers.map((subscriber) => (\n                        <Card key={subscriber.id} className=\"hover-elevate\" data-testid={`card-subscriber-${subscriber.id}`}>\n                          <CardHeader>\n                            <div className=\"flex items-start justify-between\">\n                              <div>\n                                <CardTitle className=\"text-xl\">{subscriber.fullName}</CardTitle>\n                                <CardDescription className=\"mt-1\">@{subscriber.username}</CardDescription>\n                              </div>\n                              <Badge variant={getStatusVariant(subscriber.subscriptionStatus)}>\n                                {subscriber.subscriptionStatus || \"N/A\"}\n                              </Badge>\n                            </div>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <div className=\"flex items-center gap-2 text-sm\">\n                                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                                <span>{subscriber.email}</span>\n                              </div>\n                              {subscriber.phone && (\n                                <div className=\"flex items-center gap-2 text-sm\">\n                                  <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                                  <span>{subscriber.phone}</span>\n                                </div>\n                              )}\n                              <div className=\"flex items-center gap-2 text-sm\">\n                                <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n                                <span>{getPlanLabel(subscriber.subscriptionPlan)}</span>\n                              </div>\n                              <div className=\"flex items-center gap-2 text-sm\">\n                                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                                <span>Joined {new Date(subscriber.createdAt).toLocaleDateString()}</span>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </main>\n\n        <Footer />\n      </div>\n    );\n  }\n\n  // Regular User Dashboard\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n\n      <main className=\"flex-1 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold mb-2\" data-testid=\"heading-user-dashboard\">\n              Welcome, {user.fullName}!\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Your Bird Care Dashboard\n            </p>\n          </div>\n\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">Username</p>\n                    <p className=\"font-medium\">@{user.username}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">Full Name</p>\n                    <p className=\"font-medium\">{user.fullName}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">Email</p>\n                    <p className=\"font-medium\">{user.email}</p>\n                  </div>\n                  {user.phone && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-1\">Phone</p>\n                      <p className=\"font-medium\">{user.phone}</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CreditCard className=\"h-5 w-5\" />\n                  Subscription Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Current Plan</p>\n                      <p className=\"text-2xl font-bold text-primary mt-1\">\n                        {getPlanLabel(user.subscriptionPlan)}\n                      </p>\n                    </div>\n                    <Badge variant={getStatusVariant(user.subscriptionStatus)} className=\"text-sm\">\n                      {user.subscriptionStatus || \"N/A\"}\n                    </Badge>\n                  </div>\n\n                  {!user.subscriptionPlan && (\n                    <div className=\"pt-4 border-t\">\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        You don't have an active subscription yet. Subscribe now to give your feathered friend the best care!\n                      </p>\n                      <Link href=\"/subscription\">\n                        <Button data-testid=\"button-subscribe-now\">\n                          <Heart className=\"h-4 w-4 mr-2\" />\n                          Subscribe to Bird Care\n                        </Button>\n                      </Link>\n                    </div>\n                  )}\n\n                  {user.subscriptionPlan && (\n                    <div className=\"pt-4 border-t\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Thank you for being a valued member! Our team will contact you for your bird's health consultations.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-primary/20 bg-primary/5\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bird className=\"h-5 w-5 text-primary\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Link href=\"/\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-browse-birds\">\n                    <Bird className=\"h-4 w-4 mr-2\" />\n                    Browse Exotic Birds\n                  </Button>\n                </Link>\n                <Link href=\"/about\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-about\">\n                    Learn About Our Services\n                  </Button>\n                </Link>\n                {!user.subscriptionPlan && (\n                  <Link href=\"/subscription\">\n                    <Button variant=\"default\" className=\"w-full justify-start\" data-testid=\"button-subscription-page\">\n                      <Heart className=\"h-4 w-4 mr-2\" />\n                      View Subscription Plans\n                    </Button>\n                  </Link>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12977},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":98},"server/storage.ts":{"content":"import { \n  users, \n  subscriptionRequests, \n  adminUsers,\n  auditLogs,\n  userAccounts,\n  birdDetails,\n  otpAttempts,\n  siteMetrics,\n  metricsAuditLog,\n  appointments,\n  blockedSlots,\n  appointmentSettings,\n  type User, \n  type InsertUser, \n  type SubscriptionRequest, \n  type InsertSubscriptionRequest,\n  type AdminUser,\n  type InsertAdminUser,\n  type InsertAuditLog,\n  type AuditLog,\n  type UpdateSubscriptionData,\n  type UserAccount,\n  type InsertUserAccount,\n  type BirdDetails,\n  type InsertBirdDetails,\n  type UpdateBirdDetailsData,\n  type OtpAttempt,\n  type InsertOtpAttempt,\n  type SiteMetric,\n  type MetricsAuditLog,\n  type InsertMetricsAuditLog,\n  type Appointment,\n  type InsertAppointment,\n  type CreateAppointmentData,\n  type UpdateAppointmentData,\n  type BlockedSlot,\n  type CreateBlockedSlotData,\n  type AppointmentSettings,\n  type UpdateAppointmentSettingsData\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, or, like, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Regular user methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllSubscribers(): Promise<User[]>;\n  updateUserSubscription(id: string, plan: string, status: string): Promise<User | undefined>;\n  \n  // Subscription methods\n  createSubscriptionRequest(request: InsertSubscriptionRequest): Promise<SubscriptionRequest>;\n  getAllSubscriptions(): Promise<SubscriptionRequest[]>;\n  getSubscriptionById(id: string): Promise<SubscriptionRequest | undefined>;\n  updateSubscription(id: string, data: UpdateSubscriptionData): Promise<SubscriptionRequest | undefined>;\n  deleteSubscription(id: string): Promise<void>;\n  getSubscriptionByPhone(phone: string): Promise<SubscriptionRequest | undefined>;\n  \n  // Admin methods\n  getAdminByMobile(mobile: string): Promise<AdminUser | undefined>;\n  getAdmin(id: string): Promise<AdminUser | undefined>;\n  createAdmin(admin: InsertAdminUser): Promise<AdminUser>;\n  \n  // Audit log methods\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogsBySubscription(subscriptionId: string): Promise<AuditLog[]>;\n  \n  // User Account methods\n  getUserAccount(phone: string): Promise<UserAccount | undefined>;\n  createUserAccount(account: InsertUserAccount): Promise<UserAccount>;\n  updateUserAccountOTP(phone: string, otp: string, otpExpiry: Date, messageSid: string): Promise<UserAccount | undefined>;\n  verifyUserAccountOTP(phone: string): Promise<UserAccount | undefined>;\n  getAllUserAccounts(): Promise<UserAccount[]>;\n  deleteUserAccount(phone: string): Promise<void>;\n  getUserAccountsWithSubscriptions(): Promise<any[]>;\n  \n  // OTP Attempts methods\n  getOtpAttempt(phone: string): Promise<OtpAttempt | undefined>;\n  createOtpAttempt(phone: string): Promise<OtpAttempt>;\n  incrementOtpAttempts(phone: string): Promise<OtpAttempt | undefined>;\n  resetOtpAttempts(phone: string): Promise<void>;\n  \n  // Bird Details methods\n  createBirdDetails(bird: InsertBirdDetails): Promise<BirdDetails>;\n  getBirdDetailsByUser(userPhone: string): Promise<BirdDetails[]>;\n  getBirdDetailsById(id: string): Promise<BirdDetails | undefined>;\n  updateBirdDetails(id: string, data: UpdateBirdDetailsData): Promise<BirdDetails | undefined>;\n  deleteBirdDetails(id: string): Promise<void>;\n  \n  // Site Metrics methods\n  getMetric(key: string): Promise<SiteMetric | undefined>;\n  updateMetric(key: string, value: number, updatedBy: string): Promise<SiteMetric | undefined>;\n  incrementMetric(key: string, delta: number, updatedBy: string, reason: string, adminId?: string): Promise<SiteMetric | undefined>;\n  createMetricsAuditLog(log: InsertMetricsAuditLog): Promise<MetricsAuditLog>;\n  getMetricsAuditLogs(limit?: number): Promise<MetricsAuditLog[]>;\n  \n  // Appointment methods\n  createAppointment(appointment: CreateAppointmentData): Promise<Appointment>;\n  getAppointmentById(id: string): Promise<Appointment | undefined>;\n  getUserAppointments(userPhone: string): Promise<Appointment[]>;\n  getAppointmentsByDate(date: string): Promise<Appointment[]>;\n  getAppointmentBySlot(date: string, time: string): Promise<Appointment | undefined>;\n  getAllAppointments(date?: string, status?: string, plan?: string): Promise<any[]>;\n  updateAppointment(id: string, data: UpdateAppointmentData): Promise<Appointment | undefined>;\n  cancelAppointment(id: string, canceledBy: string, reason?: string, creditRestored?: boolean): Promise<void>;\n  updateSubscriptionConsultations(subscriptionId: string, newCount: number): Promise<void>;\n  getUserSubscription(userPhone: string): Promise<SubscriptionRequest | undefined>;\n  \n  // Blocked slots methods\n  createBlockedSlot(slot: CreateBlockedSlotData): Promise<BlockedSlot>;\n  getBlockedSlotsByDate(date: string): Promise<BlockedSlot[]>;\n  getAllBlockedSlots(): Promise<BlockedSlot[]>;\n  deleteBlockedSlot(id: string): Promise<void>;\n  isSlotBlocked(date: string, time: string): Promise<boolean>;\n  \n  // Appointment settings methods\n  getAppointmentSettings(): Promise<AppointmentSettings | undefined>;\n  updateAppointmentSettings(data: UpdateAppointmentSettingsData, updatedBy: string): Promise<AppointmentSettings | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getAllSubscribers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.isAdmin, false));\n  }\n\n  async updateUserSubscription(id: string, plan: string, status: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ subscriptionPlan: plan, subscriptionStatus: status })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async createSubscriptionRequest(insertRequest: InsertSubscriptionRequest): Promise<SubscriptionRequest> {\n    const [request] = await db\n      .insert(subscriptionRequests)\n      .values(insertRequest)\n      .returning();\n    return request;\n  }\n\n  async getAllSubscriptions(): Promise<SubscriptionRequest[]> {\n    return await db.select().from(subscriptionRequests).orderBy(desc(subscriptionRequests.createdAt));\n  }\n\n  async getSubscriptionById(id: string): Promise<SubscriptionRequest | undefined> {\n    const [subscription] = await db.select().from(subscriptionRequests).where(eq(subscriptionRequests.id, id));\n    return subscription || undefined;\n  }\n\n  async updateSubscription(id: string, data: UpdateSubscriptionData): Promise<SubscriptionRequest | undefined> {\n    const updateData: any = {};\n    \n    if (data.fullName !== undefined) updateData.fullName = data.fullName;\n    if (data.mobileNumber !== undefined) updateData.mobileNumber = data.mobileNumber;\n    if (data.birdSpecies !== undefined) updateData.birdSpecies = data.birdSpecies;\n    if (data.subscriptionPlan !== undefined) updateData.subscriptionPlan = data.subscriptionPlan;\n    if (data.subscriptionStartDate !== undefined) updateData.subscriptionStartDate = new Date(data.subscriptionStartDate);\n    if (data.subscriptionEndDate !== undefined) updateData.subscriptionEndDate = new Date(data.subscriptionEndDate);\n    if (data.amountPaid !== undefined) updateData.amountPaid = data.amountPaid;\n    if (data.consultationsRemaining !== undefined) updateData.consultationsRemaining = data.consultationsRemaining;\n    if (data.status !== undefined) updateData.status = data.status;\n\n    const [subscription] = await db\n      .update(subscriptionRequests)\n      .set(updateData)\n      .where(eq(subscriptionRequests.id, id))\n      .returning();\n    return subscription || undefined;\n  }\n\n  async deleteSubscription(id: string): Promise<void> {\n    await db.delete(subscriptionRequests).where(eq(subscriptionRequests.id, id));\n  }\n\n  async getAdminByMobile(mobile: string): Promise<AdminUser | undefined> {\n    const [admin] = await db.select().from(adminUsers).where(eq(adminUsers.mobile, mobile));\n    return admin || undefined;\n  }\n\n  async getAdmin(id: string): Promise<AdminUser | undefined> {\n    const [admin] = await db.select().from(adminUsers).where(eq(adminUsers.id, id));\n    return admin || undefined;\n  }\n\n  async createAdmin(insertAdmin: InsertAdminUser): Promise<AdminUser> {\n    const [admin] = await db\n      .insert(adminUsers)\n      .values(insertAdmin)\n      .returning();\n    return admin;\n  }\n\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db\n      .insert(auditLogs)\n      .values(insertLog)\n      .returning();\n    return log;\n  }\n\n  async getAuditLogsBySubscription(subscriptionId: string): Promise<AuditLog[]> {\n    return await db\n      .select()\n      .from(auditLogs)\n      .where(eq(auditLogs.subscriptionId, subscriptionId))\n      .orderBy(desc(auditLogs.timestamp));\n  }\n\n  async getSubscriptionByPhone(phone: string): Promise<SubscriptionRequest | undefined> {\n    const [subscription] = await db\n      .select()\n      .from(subscriptionRequests)\n      .where(eq(subscriptionRequests.mobileNumber, phone))\n      .orderBy(desc(subscriptionRequests.createdAt))\n      .limit(1);\n    return subscription || undefined;\n  }\n\n  async getUserAccount(phone: string): Promise<UserAccount | undefined> {\n    const [account] = await db\n      .select()\n      .from(userAccounts)\n      .where(eq(userAccounts.phone, phone));\n    return account || undefined;\n  }\n\n  async createUserAccount(insertAccount: InsertUserAccount): Promise<UserAccount> {\n    const [account] = await db\n      .insert(userAccounts)\n      .values(insertAccount)\n      .returning();\n    return account;\n  }\n\n  async createBirdDetails(insertBird: InsertBirdDetails): Promise<BirdDetails> {\n    const [bird] = await db\n      .insert(birdDetails)\n      .values(insertBird)\n      .returning();\n    return bird;\n  }\n\n  async getBirdDetailsByUser(userPhone: string): Promise<BirdDetails[]> {\n    return await db\n      .select()\n      .from(birdDetails)\n      .where(eq(birdDetails.userPhone, userPhone))\n      .orderBy(desc(birdDetails.createdAt));\n  }\n\n  async getBirdDetailsById(id: string): Promise<BirdDetails | undefined> {\n    const [bird] = await db\n      .select()\n      .from(birdDetails)\n      .where(eq(birdDetails.id, id));\n    return bird || undefined;\n  }\n\n  async updateBirdDetails(id: string, data: UpdateBirdDetailsData): Promise<BirdDetails | undefined> {\n    const updateData: any = {};\n    \n    if (data.birdName !== undefined) updateData.birdName = data.birdName;\n    if (data.species !== undefined) updateData.species = data.species;\n    if (data.ringId !== undefined) updateData.ringId = data.ringId;\n    if (data.weight !== undefined) updateData.weight = data.weight;\n    if (data.age !== undefined) updateData.age = data.age;\n    if (data.issues !== undefined) updateData.issues = data.issues;\n    \n    updateData.updatedAt = sql`NOW()`;\n\n    const [bird] = await db\n      .update(birdDetails)\n      .set(updateData)\n      .where(eq(birdDetails.id, id))\n      .returning();\n    return bird || undefined;\n  }\n\n  async deleteBirdDetails(id: string): Promise<void> {\n    await db.delete(birdDetails).where(eq(birdDetails.id, id));\n  }\n\n  async updateUserAccountOTP(phone: string, otp: string, otpExpiry: Date, messageSid: string): Promise<UserAccount | undefined> {\n    const [account] = await db\n      .update(userAccounts)\n      .set({ \n        otp, \n        otpExpiry, \n        twilioMessageSid: messageSid,\n        lastOtpSentAt: sql`NOW()`\n      })\n      .where(eq(userAccounts.phone, phone))\n      .returning();\n    return account || undefined;\n  }\n\n  async verifyUserAccountOTP(phone: string): Promise<UserAccount | undefined> {\n    const [account] = await db\n      .update(userAccounts)\n      .set({ \n        isMobileVerified: true,\n        verifiedAt: sql`NOW()`,\n        otp: null,\n        otpExpiry: null\n      })\n      .where(eq(userAccounts.phone, phone))\n      .returning();\n    return account || undefined;\n  }\n\n  async getAllUserAccounts(): Promise<UserAccount[]> {\n    return await db\n      .select()\n      .from(userAccounts)\n      .orderBy(desc(userAccounts.createdAt));\n  }\n\n  async deleteUserAccount(phone: string): Promise<void> {\n    await db\n      .delete(userAccounts)\n      .where(eq(userAccounts.phone, phone));\n  }\n\n  async getUserAccountsWithSubscriptions(): Promise<any[]> {\n    const results = await db\n      .select({\n        phone: userAccounts.phone,\n        fullName: userAccounts.fullName,\n        isMobileVerified: userAccounts.isMobileVerified,\n        verifiedAt: userAccounts.verifiedAt,\n        createdAt: userAccounts.createdAt,\n        subscriptionId: userAccounts.subscriptionId,\n        subscription: {\n          id: subscriptionRequests.id,\n          subscriptionPlan: subscriptionRequests.subscriptionPlan,\n          subscriptionStartDate: subscriptionRequests.subscriptionStartDate,\n          subscriptionEndDate: subscriptionRequests.subscriptionEndDate,\n          amountPaid: subscriptionRequests.amountPaid,\n          consultationsRemaining: subscriptionRequests.consultationsRemaining,\n          status: subscriptionRequests.status,\n          birdSpecies: subscriptionRequests.birdSpecies,\n          discountCoupon: subscriptionRequests.discountCoupon,\n          razorpayOrderId: subscriptionRequests.razorpayOrderId,\n          razorpayPaymentId: subscriptionRequests.razorpayPaymentId,\n          paymentStatus: subscriptionRequests.paymentStatus,\n        }\n      })\n      .from(userAccounts)\n      .leftJoin(\n        subscriptionRequests,\n        eq(userAccounts.subscriptionId, subscriptionRequests.id)\n      )\n      .orderBy(desc(userAccounts.createdAt));\n\n    return results;\n  }\n\n  async getOtpAttempt(phone: string): Promise<OtpAttempt | undefined> {\n    const [attempt] = await db\n      .select()\n      .from(otpAttempts)\n      .where(eq(otpAttempts.phone, phone));\n    return attempt || undefined;\n  }\n\n  async createOtpAttempt(phone: string): Promise<OtpAttempt> {\n    const [attempt] = await db\n      .insert(otpAttempts)\n      .values({ phone, attempts: 1 })\n      .returning();\n    return attempt;\n  }\n\n  async incrementOtpAttempts(phone: string): Promise<OtpAttempt | undefined> {\n    const [attempt] = await db\n      .update(otpAttempts)\n      .set({ \n        attempts: sql`${otpAttempts.attempts} + 1`,\n        lastAttemptAt: sql`NOW()`\n      })\n      .where(eq(otpAttempts.phone, phone))\n      .returning();\n    return attempt || undefined;\n  }\n\n  async resetOtpAttempts(phone: string): Promise<void> {\n    await db.delete(otpAttempts).where(eq(otpAttempts.phone, phone));\n  }\n\n  // Site Metrics methods\n  async getMetric(key: string): Promise<SiteMetric | undefined> {\n    const [metric] = await db\n      .select()\n      .from(siteMetrics)\n      .where(eq(siteMetrics.key, key));\n    return metric || undefined;\n  }\n\n  async updateMetric(key: string, value: number, updatedBy: string): Promise<SiteMetric | undefined> {\n    const [metric] = await db\n      .update(siteMetrics)\n      .set({ \n        value, \n        updatedBy, \n        lastUpdatedAt: sql`NOW()`\n      })\n      .where(eq(siteMetrics.key, key))\n      .returning();\n    return metric || undefined;\n  }\n\n  async incrementMetric(key: string, delta: number, updatedBy: string, reason: string, adminId?: string): Promise<SiteMetric | undefined> {\n    // Get current value\n    const current = await this.getMetric(key);\n    if (!current) {\n      return undefined;\n    }\n\n    const oldValue = current.value;\n    const newValue = oldValue + delta;\n\n    // Update metric using atomic increment\n    const [updated] = await db\n      .update(siteMetrics)\n      .set({ \n        value: sql`${siteMetrics.value} + ${delta}`,\n        updatedBy, \n        lastUpdatedAt: sql`NOW()`\n      })\n      .where(eq(siteMetrics.key, key))\n      .returning();\n\n    // Create audit log\n    await this.createMetricsAuditLog({\n      metricKey: key,\n      oldValue,\n      newValue,\n      delta,\n      updatedBy,\n      reason,\n      adminId: adminId || null,\n    });\n\n    return updated || undefined;\n  }\n\n  async createMetricsAuditLog(log: InsertMetricsAuditLog): Promise<MetricsAuditLog> {\n    const [auditLog] = await db\n      .insert(metricsAuditLog)\n      .values(log)\n      .returning();\n    return auditLog;\n  }\n\n  async getMetricsAuditLogs(limit: number = 50): Promise<MetricsAuditLog[]> {\n    return await db\n      .select()\n      .from(metricsAuditLog)\n      .orderBy(desc(metricsAuditLog.timestamp))\n      .limit(limit);\n  }\n\n  // Appointment methods\n  async createAppointment(appointment: CreateAppointmentData): Promise<Appointment> {\n    const [created] = await db\n      .insert(appointments)\n      .values(appointment)\n      .returning();\n    return created;\n  }\n\n  async getAppointmentById(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db\n      .select()\n      .from(appointments)\n      .where(eq(appointments.id, id));\n    return appointment || undefined;\n  }\n\n  async getUserAppointments(userPhone: string): Promise<Appointment[]> {\n    return await db\n      .select()\n      .from(appointments)\n      .where(eq(appointments.userPhone, userPhone))\n      .orderBy(desc(appointments.appointmentDate));\n  }\n\n  async getAppointmentsByDate(date: string): Promise<Appointment[]> {\n    // Convert date string to timestamp format for comparison\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db\n      .select()\n      .from(appointments)\n      .where(\n        sql`DATE(${appointments.appointmentDate}) = DATE(${date}::timestamp)`\n      );\n  }\n\n  async getAppointmentBySlot(date: string, time: string): Promise<Appointment | undefined> {\n    const results = await db\n      .select()\n      .from(appointments)\n      .where(\n        sql`DATE(${appointments.appointmentDate}) = DATE(${date}::timestamp) \n        AND ${appointments.slotStartTime} = ${time}\n        AND ${appointments.status} != 'canceled'`\n      );\n    return results[0] || undefined;\n  }\n\n  async getAllAppointments(date?: string, status?: string, plan?: string): Promise<any[]> {\n    // Build WHERE conditions as a SQL fragment\n    let whereConditions: string[] = [];\n    const params: any[] = [];\n\n    if (date) {\n      whereConditions.push(`DATE(appointment_date) = DATE($${params.length + 1}::timestamp)`);\n      params.push(date);\n    }\n\n    if (status) {\n      whereConditions.push(`appointments.status = $${params.length + 1}`);\n      params.push(status);\n    }\n\n    if (plan) {\n      whereConditions.push(`subscription_requests.subscription_plan = $${params.length + 1}`);\n      params.push(plan);\n    }\n\n    const whereClause = whereConditions.length > 0 \n      ? `WHERE ${whereConditions.join(' AND ')}` \n      : '';\n\n    const results = await db.execute(sql.raw(`\n      SELECT \n        appointments.id,\n        appointments.user_phone as \"userPhone\",\n        user_accounts.full_name as \"fullName\",\n        appointments.bird_name as \"birdName\",\n        appointments.appointment_date as \"appointmentDate\",\n        appointments.slot_start_time as \"slotStartTime\",\n        appointments.slot_end_time as \"slotEndTime\",\n        appointments.symptoms,\n        appointments.status,\n        subscription_requests.subscription_plan as \"subscriptionPlan\",\n        appointments.canceled_at as \"canceledAt\",\n        appointments.canceled_by as \"canceledBy\",\n        appointments.cancellation_reason as \"cancellationReason\",\n        appointments.admin_notes as \"adminNotes\",\n        appointments.created_at as \"createdAt\"\n      FROM appointments\n      LEFT JOIN user_accounts ON appointments.user_phone = user_accounts.phone\n      LEFT JOIN subscription_requests ON appointments.subscription_id = subscription_requests.id\n      ${whereClause}\n      ORDER BY appointments.appointment_date DESC\n    `));\n\n    return results.rows;\n  }\n\n  async updateAppointment(id: string, data: UpdateAppointmentData): Promise<Appointment | undefined> {\n    const [appointment] = await db\n      .update(appointments)\n      .set({ ...data, updatedAt: sql`NOW()` })\n      .where(eq(appointments.id, id))\n      .returning();\n    return appointment || undefined;\n  }\n\n  async cancelAppointment(id: string, canceledBy: string, reason?: string, creditRestored?: boolean): Promise<void> {\n    await db\n      .update(appointments)\n      .set({\n        status: 'canceled',\n        canceledAt: sql`NOW()`,\n        canceledBy,\n        cancellationReason: reason || null,\n        creditRestored: creditRestored || false,\n        updatedAt: sql`NOW()`,\n      })\n      .where(eq(appointments.id, id));\n  }\n\n  async updateSubscriptionConsultations(subscriptionId: string, newCount: number): Promise<void> {\n    await db\n      .update(subscriptionRequests)\n      .set({ consultationsRemaining: newCount })\n      .where(eq(subscriptionRequests.id, subscriptionId));\n  }\n\n  async getUserSubscription(userPhone: string): Promise<SubscriptionRequest | undefined> {\n    const userAccount = await this.getUserAccount(userPhone);\n    if (!userAccount || !userAccount.subscriptionId) {\n      return undefined;\n    }\n    return await this.getSubscriptionById(userAccount.subscriptionId);\n  }\n\n  // Blocked slots methods\n  async createBlockedSlot(slot: CreateBlockedSlotData): Promise<BlockedSlot> {\n    const [created] = await db\n      .insert(blockedSlots)\n      .values(slot)\n      .returning();\n    return created;\n  }\n\n  async getBlockedSlotsByDate(date: string): Promise<BlockedSlot[]> {\n    return await db\n      .select()\n      .from(blockedSlots)\n      .where(\n        sql`DATE(${blockedSlots.blockDate}) = DATE(${date}::timestamp)`\n      );\n  }\n\n  async getAllBlockedSlots(): Promise<BlockedSlot[]> {\n    return await db\n      .select()\n      .from(blockedSlots)\n      .orderBy(desc(blockedSlots.blockDate));\n  }\n\n  async deleteBlockedSlot(id: string): Promise<void> {\n    await db.delete(blockedSlots).where(eq(blockedSlots.id, id));\n  }\n\n  async isSlotBlocked(date: string, time: string): Promise<boolean> {\n    const results = await db\n      .select()\n      .from(blockedSlots)\n      .where(\n        sql`DATE(${blockedSlots.blockDate}) = DATE(${date}::timestamp) \n        AND (${blockedSlots.slotStartTime} IS NULL OR ${blockedSlots.slotStartTime} = ${time})`\n      );\n    return results.length > 0;\n  }\n\n  // Appointment settings methods\n  async getAppointmentSettings(): Promise<AppointmentSettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(appointmentSettings)\n      .limit(1);\n    return settings || undefined;\n  }\n\n  async updateAppointmentSettings(data: UpdateAppointmentSettingsData, updatedBy: string): Promise<AppointmentSettings | undefined> {\n    const current = await this.getAppointmentSettings();\n    if (!current) {\n      return undefined;\n    }\n\n    const [settings] = await db\n      .update(appointmentSettings)\n      .set({ ...data, updatedBy, updatedAt: sql`NOW()` })\n      .where(eq(appointmentSettings.id, current.id))\n      .returning();\n    return settings || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":23806},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return (\n    <Header \n      onSearch={(query) => console.log('Search:', query)}\n      searchQuery=\"\"\n    />\n  );\n}\n","size_bytes":192},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/pages/BirdProfile.tsx":{"content":"import { useRoute, Link } from \"wouter\";\nimport { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport PriceBadge from \"@/components/PriceBadge\";\nimport QuickFacts from \"@/components/QuickFacts\";\nimport CareChecklist from \"@/components/CareChecklist\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card } from \"@/components/ui/card\";\nimport { ChevronLeft, Download, CheckCircle } from \"lucide-react\";\nimport { birdsData } from \"@/lib/birdsData\";\n\nexport default function BirdProfile() {\n  const [, params] = useRoute(\"/bird/:slug\");\n  const bird = birdsData.find((b) => b.slug === params?.slug);\n\n  if (!bird) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-semibold mb-4\">Bird not found</h1>\n            <Link href=\"/\">\n              <Button data-testid=\"button-back-home\">Back to Home</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const handleDownloadPDF = () => {\n    console.log(\"Download PDF for\", bird.name);\n    alert(\"PDF download feature coming soon!\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n\n      <div className=\"relative h-96 overflow-hidden bg-muted\">\n        <img\n          src={bird.image}\n          alt={bird.name}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n        \n        <div className=\"absolute bottom-0 left-0 right-0 p-6\">\n          <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-4 text-white hover:text-white hover-elevate\" data-testid=\"button-back\">\n                <ChevronLeft className=\"mr-2 h-4 w-4\" />\n                Back to Birds\n              </Button>\n            </Link>\n            <h1 className=\"text-4xl font-bold text-white mb-2\" data-testid=\"text-bird-name\">\n              {bird.name}\n            </h1>\n            {bird.scientificName && (\n              <p className=\"text-lg text-white/90 italic\">{bird.scientificName}</p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <main className=\"flex-1 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            <div className=\"flex-1\">\n              <Tabs defaultValue=\"overview\" className=\"w-full\">\n                <TabsList className=\"w-full justify-start mb-6 flex-wrap h-auto\">\n                  <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"behavior\" data-testid=\"tab-behavior\">Behavior</TabsTrigger>\n                  <TabsTrigger value=\"diet\" data-testid=\"tab-diet\">Diet</TabsTrigger>\n                  <TabsTrigger value=\"as-pet\" data-testid=\"tab-as-pet\">As a Pet</TabsTrigger>\n                  <TabsTrigger value=\"documentation\" data-testid=\"tab-documentation\">Documentation</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"space-y-6\">\n                  <Card className=\"p-6\">\n                    <h2 className=\"text-2xl font-semibold mb-4\">About {bird.name}</h2>\n                    <div className=\"prose prose-sm max-w-none\">\n                      <p className=\"text-muted-foreground leading-relaxed\">{bird.behavior}</p>\n                    </div>\n                  </Card>\n\n                  <Card className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-3\">Origin & Habitat</h3>\n                    <p className=\"text-muted-foreground\">{bird.origin}</p>\n                  </Card>\n\n                  <Card className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-3\">Lifespan</h3>\n                    <p className=\"text-muted-foreground\">\n                      With proper care, {bird.name.toLowerCase()}s can live {bird.lifespan}, making them \n                      a long-term companion that requires serious commitment.\n                    </p>\n                  </Card>\n\n                  <Card className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-4\">Where to Buy</h3>\n                    <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                      If you're looking for a healthy, well-bred {bird.name}, we can introduce you to experienced breeders and trusted sellers who maintain strong parent stock, careful rearing and good husbandry practices.\n                    </p>\n                    <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        📞 For vetted contacts and current availability, message us on WhatsApp: <a href=\"https://wa.me/919014284059\" className=\"text-primary font-semibold hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\" data-testid=\"link-whatsapp\">+91 90142 84059</a>\n                      </p>\n                    </div>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"behavior\" className=\"space-y-6\">\n                  <Card className=\"p-6\">\n                    <h2 className=\"text-2xl font-semibold mb-4\">Behavioral Characteristics</h2>\n                    <p className=\"text-muted-foreground leading-relaxed mb-4\">{bird.behavior}</p>\n                    \n                    <h3 className=\"text-xl font-semibold mb-3 mt-6\">Social Needs</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\">{bird.humanCompatibility}</p>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"diet\" className=\"space-y-6\">\n                  <Card className=\"p-6\">\n                    <h2 className=\"text-2xl font-semibold mb-4\">Dietary Requirements</h2>\n                    <p className=\"text-muted-foreground leading-relaxed\">{bird.diet}</p>\n\n                    <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Important:</strong> Always consult with an avian veterinarian to create \n                        a tailored diet plan for your bird based on their age, health, and activity level.\n                      </p>\n                    </div>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"as-pet\" className=\"space-y-6\">\n                  <Card className=\"p-6\">\n                    <h2 className=\"text-2xl font-semibold mb-4\">As a Companion</h2>\n                    <p className=\"text-muted-foreground leading-relaxed mb-6\">{bird.humanCompatibility}</p>\n                    \n                    <h3 className=\"text-xl font-semibold mb-4 mt-6\">What Makes Them Special</h3>\n                    <ul className=\"space-y-3\">\n                      {bird.prosAsPet.map((pro, index) => (\n                        <li key={index} className=\"flex items-start gap-3\">\n                          <CheckCircle className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-muted-foreground leading-relaxed\">{pro}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"documentation\" className=\"space-y-6\">\n                  <Card className=\"p-6\">\n                    <h2 className=\"text-2xl font-semibold mb-4\">Essential Documentation</h2>\n                    <p className=\"text-muted-foreground leading-relaxed mb-6\">\n                      When purchasing a {bird.name}, proper documentation and health testing are crucial to ensure you're getting a healthy bird from a reputable source. Here's what you should request from the breeder or seller.\n                    </p>\n                  </Card>\n\n                  <Card className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                      <CheckCircle className=\"h-5 w-5 text-primary\" />\n                      DNA Testing with Bloodline\n                    </h3>\n                    <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                      DNA testing verifies the bird's genetic sex and can trace its lineage. This is especially important for breeding purposes and understanding hereditary health conditions. A reputable breeder should provide:\n                    </p>\n                    <ul className=\"space-y-2 text-sm text-muted-foreground ml-6\">\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-primary\">•</span>\n                        DNA sex certification from an accredited laboratory\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-primary\">•</span>\n                        Bloodline documentation showing parent lineage and genetic history\n                      </li>\n                      <li className=\"flex items-start gap-2\">\n                        <span className=\"text-primary\">•</span>\n                        Information about any known genetic strengths or concerns in the lineage\n                      </li>\n                    </ul>\n                  </Card>\n\n                  <Card className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-4\">Health Check Reports</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      These tests screen for the most common and serious diseases affecting parrots. All birds should be tested and certified negative before purchase.\n                    </p>\n\n                    <div className=\"space-y-6\">\n                      <div className=\"border-l-4 border-l-primary pl-4\">\n                        <h4 className=\"font-semibold mb-2\">PBFD (Psittacine Beak and Feather Disease)</h4>\n                        <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                          PBFD is a highly contagious viral disease that affects the immune system, feathers, and beak of parrots. It causes feather loss, beak deformities, and weakened immunity, making birds vulnerable to other infections. This disease is incurable and often fatal. Birds must test negative before purchase, and retesting is recommended periodically. PBFD can be transmitted through feather dust, droppings, and direct contact.\n                        </p>\n                      </div>\n\n                      <div className=\"border-l-4 border-l-primary pl-4\">\n                        <h4 className=\"font-semibold mb-2\">APV (Avian Polyomavirus)</h4>\n                        <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                          Avian Polyomavirus is a serious viral infection that primarily affects young birds, though adult birds can be carriers. It causes symptoms including lethargy, loss of appetite, feather abnormalities, enlarged abdomen, and sudden death in young chicks. APV spreads through feather dust, droppings, and crop feeding. While there's no cure, vaccination is available for some species. Testing ensures your bird is not a carrier of this potentially deadly virus.\n                        </p>\n                      </div>\n\n                      <div className=\"border-l-4 border-l-primary pl-4\">\n                        <h4 className=\"font-semibold mb-2\">Chlamydia (Psittacosis / Parrot Fever)</h4>\n                        <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                          Chlamydia psittaci causes psittacosis (also called parrot fever or chlamydiosis), a bacterial infection that affects the respiratory system and can be transmitted to humans. Symptoms in birds include lethargy, eye discharge, nasal discharge, breathing difficulties, and lime-green droppings. In humans, it causes flu-like symptoms and can lead to serious respiratory complications if untreated. This disease is treatable with antibiotics, but prevention through testing is crucial for both bird and human health.\n                        </p>\n                      </div>\n                    </div>\n                  </Card>\n\n                  <Card className=\"p-6 bg-primary/5 border-l-4 border-l-primary\">\n                    <h4 className=\"font-semibold mb-3\">Important Reminder</h4>\n                    <p className=\"text-sm text-muted-foreground leading-relaxed mb-3\">\n                      Always insist on seeing original health test results from certified avian veterinarians or accredited laboratories. Tests should be recent (within 30-60 days of purchase) and include the bird's identification details.\n                    </p>\n                    <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                      For assistance finding breeders who provide complete documentation, contact us on WhatsApp: <a href=\"https://wa.me/919014284059\" className=\"text-primary font-semibold hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\" data-testid=\"link-whatsapp-doc\">+91 90142 84059</a>\n                    </p>\n                  </Card>\n                </TabsContent>\n\n              </Tabs>\n            </div>\n\n            <aside className=\"lg:w-80 flex-shrink-0 space-y-6\">\n              <QuickFacts\n                scientificName={bird.scientificName}\n                origin={bird.origin}\n                lifespan={bird.lifespan}\n                size={bird.size}\n                noiseLevel={bird.noiseLevel}\n              />\n\n              <PriceBadge\n                priceMin={bird.priceMin}\n                priceMax={bird.priceMax}\n                lastUpdated={bird.lastUpdated}\n              />\n\n              <CareChecklist items={bird.careChecklist} />\n\n              <Button\n                className=\"w-full\"\n                variant=\"outline\"\n                onClick={handleDownloadPDF}\n                data-testid=\"button-download-pdf\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download PDF Profile\n              </Button>\n            </aside>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14585},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"design_guidelines.md":{"content":"# Design Guidelines: Exotic Birds Information Website\n\n## Design Approach\n\n**Selected Approach:** Reference-Based with Material Design influence\n- **Primary References:** National Geographic (wildlife presentation), Airbnb (card browsing patterns), Allbirds (nature-focused aesthetics)\n- **Supporting System:** Material Design for data-dense information sections\n- **Rationale:** Wildlife catalog requires trustworthy, educational presentation while maintaining visual appeal through nature imagery\n\n## Core Design Principles\n\n1. **Wildlife Photography First:** Let bird imagery dominate visual hierarchy\n2. **Scientific Credibility:** Professional, clean layouts that inspire trust for legal/CITES information\n3. **Discovery-Focused:** Easy browsing and filtering with clear visual feedback\n4. **Information Density Balance:** Rich details without overwhelming users\n\n---\n\n## Typography System\n\n**Font Families:**\n- **Headings:** Inter (700 weight for titles, 600 for subtitles)\n- **Body Text:** Inter (400 regular, 500 medium for emphasis)\n- **Accent/Legal:** System monospace for price badges and legal notices\n\n**Type Scale:**\n- **Hero Headlines:** 3xl on mobile (text-3xl), 5xl on tablet (md:text-5xl), 6xl on desktop (lg:text-6xl)\n- **Page Titles:** 2xl mobile, 3xl tablet, 4xl desktop\n- **Section Headers:** xl mobile, 2xl desktop\n- **Card Titles:** lg mobile, xl desktop\n- **Body Text:** Base (16px equivalent)\n- **Captions/Metadata:** sm for timestamps, legal notes\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Tailwind units of **2, 4, 6, 8, 12, 16, 20**\n- Micro spacing: p-2, gap-2 (within components)\n- Standard spacing: p-4, p-6, gap-4 (cards, sections)\n- Section padding: py-12 mobile, py-16 tablet, py-20 desktop\n- Generous spacing: p-8, gap-8, py-20 (hero sections, feature areas)\n\n**Container Strategy:**\n- Full-width sections with max-w-7xl centered containers\n- Content sections: max-w-6xl\n- Bird profile content: max-w-4xl for optimal reading\n- Admin panels: max-w-3xl\n\n**Grid Patterns:**\n- Bird Cards Grid: 1 column mobile, 2 columns tablet (md:grid-cols-2), 3 columns desktop (lg:grid-cols-3)\n- Filter Sidebar: Vertical on mobile (full-width), sticky sidebar on desktop (w-64)\n- Profile Page: Single column mobile, 2-column layout desktop (60/40 split for content/sidebar)\n\n---\n\n## Component Library\n\n### Header & Navigation\n**Structure:** Full-width sticky header with contained navigation\n- Logo left-aligned with bird icon or illustration\n- Desktop: horizontal nav menu (Home, About, Admin)\n- Search bar integrated in header (desktop: center-right, mobile: below nav)\n- Mobile: hamburger menu with slide-in drawer\n- Height: 16 units (h-16), with shadow on scroll\n\n### Home Page Layout\n\n**Hero Section:**\n- Height: 70vh minimum with nature/aviary background image (large hero image)\n- Overlay gradient for text legibility\n- Centered headline: \"Discover Exotic Pet Birds\" with descriptive subheading\n- Prominent search bar with rounded-full styling (w-full max-w-2xl)\n- Blurred-background CTA button for \"Browse All Species\"\n\n**Featured Birds Carousel:**\n- Horizontal scroll on mobile, 3-card grid on desktop\n- Large bird images (aspect-ratio-4/3) with subtle rounded corners (rounded-xl)\n- Card content overlay at bottom with name and price range\n- Auto-advance carousel with manual navigation dots\n\n**Filter Section:**\n- Sticky filter bar on desktop (top-20)\n- Chip-style filter buttons for quick categories (Size: Small/Medium/Large, Noise Level, Price Range)\n- Active state with filled background, inactive with border-only\n- Mobile: Collapsible filter drawer triggered by \"Filters\" button\n\n**Birds Grid:**\n- Masonry-style card layout with consistent gap-6\n- Cards maintain aspect ratio with overflow-hidden for images\n\n### Bird Card Component\n**Structure:**\n- Image container: aspect-ratio-square with object-cover\n- Hover state: subtle scale transform (hover:scale-105) and shadow elevation\n- Content padding: p-4 or p-6\n- Bird name: text-xl font-semibold\n- Quick stats row: text-sm with icons (size, noise level)\n- Price badge: absolute positioned top-right with backdrop-blur\n- \"Learn More\" link: text-base font-medium with arrow icon\n\n### Bird Profile Page\n\n**Hero Section:**\n- Full-width image banner (h-96 on desktop)\n- Image overlay gradient for breadcrumb navigation\n- Breadcrumb: Home > Birds > [Species Name]\n\n**Profile Layout (Desktop):**\n- Main content area (w-2/3): tabbed sections\n- Sidebar (w-1/3): Quick Facts card, Price Badge, Care Checklist card\n- Tab Navigation: Underline style with smooth transition (Overview | Behavior | Diet | As a Pet | Legal & Pricing)\n\n**Quick Facts Card:**\n- White/elevated background with rounded-lg, p-6\n- Icon-label pairs in grid (grid-cols-2 gap-4)\n- Items: Scientific name, Origin, Lifespan, Size, Noise Level\n\n**Price Badge Component:**\n- Prominent display with INR symbol\n- Range format: \"₹80,000 - ₹2,00,000\"\n- Subtitle: \"Estimated Price in India\" (text-sm)\n- Last updated timestamp with calendar icon\n- Info tooltip icon explaining price variability\n\n**Care Checklist Card:**\n- Checkbox-style list (visual only, not interactive)\n- Items: Daily feeding, Social interaction, Cage cleaning, Vet visits\n- Each item with spacing (gap-3)\n\n**Tab Content Sections:**\n- Rich text formatting with headings (text-xl font-semibold), paragraphs (space-y-4)\n- Bulleted lists with custom markers\n- Definition lists for structured data (Behavior characteristics, Diet requirements)\n- Callout boxes for important notes (rounded-lg border with background tint)\n\n### About Page\n- Single column centered layout (max-w-4xl)\n- Generous line-height (leading-relaxed) for readability\n- Legal notice section: border-l-4 with background tint, p-6\n- CITES information in expandable accordion sections\n\n### Admin Panel\n- Centered form layout (max-w-3xl)\n- Passphrase protection: simple input with \"Unlock\" button\n- JSON editor: monospace textarea (font-mono) with syntax highlighting consideration\n- Bird edit form: labeled inputs with clear spacing (space-y-6)\n- Save/Cancel action buttons in footer (sticky bottom)\n\n### Footer\n- Three-column layout on desktop, stacked on mobile\n- Sections: About & Legal, Quick Links, Contact & Social\n- Copyright notice and last-updated timestamp\n- Minimal height: py-12 with border-top\n\n---\n\n## Interactive Elements\n\n### Buttons\n**Primary:** Filled with medium-high contrast, rounded-lg, px-6 py-3, font-medium\n**Secondary:** Border-only with transparent background, same padding\n**Icon Buttons:** Square (w-10 h-10) with rounded-full, centered icon\n**Blurred Background (Hero CTAs):** backdrop-blur-md with semi-transparent background\n\n### Search Bar\n- Rounded-full with shadow-sm\n- Leading search icon (pl-12 for input padding)\n- Placeholder: \"Search birds by name, species...\"\n- Dropdown suggestions on focus with rounded-lg, shadow-lg\n\n### Filter Chips\n- Rounded-full, px-4 py-2, text-sm\n- Inactive: border-2 with transparent background\n- Active: filled background, border matches fill\n- Close icon on active chips (trailing X)\n\n### Hover States\n- Cards: Lift effect (shadow elevation increase, subtle scale)\n- Links: Underline animation from left to right\n- Images: Slight zoom on parent container (scale-105 over 300ms)\n\n---\n\n## Imagery Guidelines\n\n**Hero Image:** Large panoramic aviary or tropical bird habitat scene - vibrant, professional wildlife photography\n\n**Bird Profile Images:**\n- High-resolution species photos (minimum 1200x900)\n- Multiple angles if available (side profile, face close-up, in habitat)\n- Image gallery with thumbnail navigation\n\n**Card Thumbnails:**\n- Square crop focusing on bird's head/upper body\n- Consistent aspect ratio across all cards\n- Sharp, well-lit photography prioritized\n\n**Placeholder Strategy:**\n- Use bird silhouettes or illustrated placeholders when photos unavailable\n- Maintain visual hierarchy even with placeholders\n\n---\n\n## Accessibility & Interactions\n\n- Keyboard navigation: visible focus rings (ring-2 ring-offset-2)\n- Skip-to-content link for screen readers\n- Alt text pattern: \"[Bird Common Name] - [Key Visual Feature]\"\n- ARIA labels for icon-only buttons\n- Color contrast ratio minimum 4.5:1 for text\n- Form labels always visible (not placeholder-only)\n- Error states with icon + text explanation\n\n---\n\n## Visual Enhancements\n\n**Animations:** Minimal and purposeful\n- Page transitions: Fade-in for route changes (200ms)\n- Card hover: Transform and shadow (300ms ease)\n- Tab switching: Slide animation (200ms)\n- NO scroll-triggered animations to avoid distraction\n\n**Shadows:**\n- Cards: shadow-sm default, shadow-lg on hover\n- Dropdowns/Modals: shadow-xl\n- Sticky elements: shadow-md\n\n**Borders:**\n- Subtle borders (border-gray-200 equivalent) for separation\n- Accent borders (border-l-4) for callouts and legal notices\n\nThis design creates a professional, trustworthy catalog that balances beautiful wildlife imagery with dense educational content, ensuring both engagement and credibility for this specialized pet bird information resource.","size_bytes":9005},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/PriceBadge.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { IndianRupee, Calendar, Info } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\ninterface PriceBadgeProps {\n  priceMin: number;\n  priceMax: number;\n  lastUpdated: string;\n}\n\nexport default function PriceBadge({ priceMin, priceMax, lastUpdated }: PriceBadgeProps) {\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-start justify-between mb-3\">\n        <h3 className=\"font-semibold flex items-center gap-2\">\n          <IndianRupee className=\"h-5 w-5 text-primary\" />\n          Estimated Price in India\n        </h3>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <button className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"button-price-info\">\n              <Info className=\"h-4 w-4\" />\n            </button>\n          </TooltipTrigger>\n          <TooltipContent className=\"max-w-xs\">\n            <p className=\"text-sm\">\n              Prices vary based on location, breeder reputation, bird age, and training. \n              Always verify with licensed breeders and ensure legal compliance.\n            </p>\n          </TooltipContent>\n        </Tooltip>\n      </div>\n\n      <div className=\"text-3xl font-bold text-primary mb-3\" data-testid=\"text-price-range\">\n        {formatPrice(priceMin)} - {formatPrice(priceMax)}\n      </div>\n\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <Calendar className=\"h-4 w-4\" />\n        <span>Updated: {formatDate(lastUpdated)}</span>\n      </div>\n\n      <div className=\"mt-4 p-3 bg-muted rounded-md\">\n        <p className=\"text-xs text-muted-foreground\">\n          This is an estimated price range. Actual prices may vary significantly based on various factors \n          including the bird's lineage, training, and local market conditions.\n        </p>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2379},"client/src/components/BirdCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Bird } from \"@shared/schema\";\n\ninterface BirdCardProps {\n  bird: Bird;\n}\n\nexport default function BirdCard({ bird }: BirdCardProps) {\n  const formatPrice = (min: number, max: number) => {\n    return `₹${(min / 1000).toFixed(0)}k - ₹${(max / 1000).toFixed(0)}k`;\n  };\n\n  const getTraitLabel = (trait: string) => {\n    const labels: Record<string, string> = {\n      \"vibrant\": \"Vibrant\",\n      \"free-flying\": \"Free Flying\",\n      \"talking\": \"Talking\",\n      \"intelligent\": \"Intelligent\",\n      \"human-bonding\": \"Human Bonding\"\n    };\n    return labels[trait] || trait;\n  };\n\n  return (\n    <Link href={`/bird/${bird.slug}`} data-testid={`link-bird-${bird.slug}`}>\n      <Card className=\"overflow-hidden hover-elevate active-elevate-2 transition-all duration-300 cursor-pointer h-full flex flex-col\">\n        <div className=\"relative aspect-square overflow-hidden bg-muted\">\n          <img\n            src={bird.image}\n            alt={bird.name}\n            className=\"object-cover w-full h-full transition-transform duration-300 hover:scale-105\"\n            data-testid={`img-bird-${bird.slug}`}\n          />\n        </div>\n        \n        <div className=\"p-4 flex-1 flex flex-col\">\n          <h3 className=\"font-semibold text-lg mb-3\" data-testid={`text-bird-name-${bird.slug}`}>\n            {bird.name}\n          </h3>\n          \n          <div className=\"flex flex-wrap gap-2 mt-auto\">\n            {bird.traits.slice(0, 3).map((trait) => (\n              <Badge key={trait} variant=\"outline\" className=\"text-xs\">\n                {getTraitLabel(trait)}\n              </Badge>\n            ))}\n            <Badge variant=\"secondary\" className=\"text-xs bg-primary/10 text-primary border-primary/20\">\n              {formatPrice(bird.priceMin, bird.priceMax)}\n            </Badge>\n          </div>\n        </div>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":1983},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/Footer.tsx":{"content":"import { Bird } from \"lucide-react\";\nimport { SiInstagram, SiFacebook, SiYoutube, SiWhatsapp } from \"react-icons/si\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"border-t bg-card\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12\">\n        <div className=\"flex justify-center mb-6 md:mb-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-3 md:mb-4\">\n              <Bird className=\"h-5 w-5 text-primary\" />\n              <span className=\"font-semibold text-base md:text-base\">Fancy Feathers India</span>\n            </div>\n            <p className=\"text-xs sm:text-sm text-muted-foreground max-w-md\">\n              Nurturing exotic birds with love, care, and a cage-free lifestyle. Your guide to finding the perfect feathered companion.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mt-6 md:mt-8 pt-6 md:pt-8 border-t border-border\">\n          <div className=\"flex flex-col items-center gap-4 mb-6\">\n            <h3 className=\"font-semibold text-sm md:text-base\">Follow Us</h3>\n            <div className=\"flex items-center gap-4 md:gap-6\">\n              <a\n                href=\"https://www.instagram.com/fancy_feathers_india/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                aria-label=\"Follow us on Instagram\"\n                data-testid=\"link-instagram\"\n              >\n                <SiInstagram className=\"h-5 w-5 md:h-6 md:w-6\" />\n              </a>\n              <a\n                href=\"https://www.facebook.com/fancyfeathers.india\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                aria-label=\"Follow us on Facebook\"\n                data-testid=\"link-facebook\"\n              >\n                <SiFacebook className=\"h-5 w-5 md:h-6 md:w-6\" />\n              </a>\n              <a\n                href=\"https://www.youtube.com/@fancyfeathersindia\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                aria-label=\"Subscribe to our YouTube channel\"\n                data-testid=\"link-youtube\"\n              >\n                <SiYoutube className=\"h-5 w-5 md:h-6 md:w-6\" />\n              </a>\n              <a\n                href=\"https://wa.me/+919014284059\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                aria-label=\"Contact us on WhatsApp\"\n                data-testid=\"link-whatsapp-social\"\n              >\n                <SiWhatsapp className=\"h-5 w-5 md:h-6 md:w-6\" />\n              </a>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center text-xs sm:text-sm mb-6\">\n            <Link href=\"/contact-us\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"footer-link-contact\">\n              Contact Us\n            </Link>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-2 md:gap-4 text-xs sm:text-sm text-muted-foreground text-center sm:text-left\">\n            <p>&copy; {new Date().getFullYear()} Fancy Feathers India. All rights reserved.</p>\n            <p>Last updated: {new Date().toLocaleDateString()}</p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3701},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/examples/BirdCard.tsx":{"content":"import BirdCard from '../BirdCard';\nimport blueGoldMacaw from '@assets/blue-gold-macaw.jpg_1761290156282.jpeg';\n\nexport default function BirdCardExample() {\n  const mockBird = {\n    id: \"1\",\n    name: \"Blue-and-Gold Macaw\",\n    scientificName: \"Ara ararauna\",\n    slug: \"blue-gold-macaw\",\n    image: blueGoldMacaw,\n    size: \"large\" as const,\n    noiseLevel: \"loud\" as const,\n    traits: [\"vibrant\", \"talking\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"50-60 years\",\n    origin: \"South America\",\n    behavior: \"Highly social, loud, intelligent; needs lots of interaction and toys.\",\n    diet: \"Pellets, fruits (mango, papaya), nuts, occasional vegetables.\",\n    humanCompatibility: \"Affectionate but demanding; good with experienced owners.\",\n    priceMin: 80000,\n    priceMax: 200000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\"Highly intelligent\", \"Beautiful colors\", \"Can learn tricks\"],\n    consAsPet: [\"Very loud\", \"Needs large space\", \"Expensive\"],\n    careChecklist: [\"Daily feeding\", \"Social interaction\", \"Cage cleaning\"],\n    legalNotes: \"CITES Appendix II - Legal with proper documentation\"\n  };\n\n  return <BirdCard bird={mockBird} />;\n}\n","size_bytes":1172},"client/src/pages/About.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, Shield, Heart, Info, Phone, User } from \"lucide-react\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport aliImage from '@assets/og-image.jpg_1761292200700.jpeg';\n\nexport default function About() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n\n      <main className=\"flex-1 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl\">\n          <h1 className=\"text-4xl font-bold mb-8\">About Fancy Feathers India</h1>\n\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <Card \n              className=\"p-8 mb-8 cursor-pointer hover-elevate active-elevate-2 transition-all\"\n              onClick={() => setIsDialogOpen(true)}\n              data-testid=\"card-founder\"\n            >\n              <div className=\"flex flex-col md:flex-row gap-6 items-center md:items-start\">\n                <div className=\"flex-shrink-0\">\n                  <img \n                    src={aliImage} \n                    alt=\"Ali - Founder of Fancy Feathers India\" \n                    className=\"w-48 h-48 rounded-lg object-cover border-4 border-primary/20\"\n                  />\n                </div>\n                <div className=\"flex-1 text-center md:text-left\">\n                  <div className=\"flex items-center gap-2 justify-center md:justify-start mb-3\">\n                    <User className=\"h-6 w-6 text-primary\" />\n                    <h2 className=\"text-2xl font-semibold\">Meet the Founder - Ali</h2>\n                  </div>\n                  <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                    With 12+ years of dedicated experience in exotic bird care, training, and welfare, \n                    Ali has built Fancy Feathers India on a foundation of love, empathy, and deep understanding \n                    of these magnificent creatures.\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-read-more\">\n                    Click to Read Ali's Full Story\n                  </Button>\n                </div>\n              </div>\n            </Card>\n\n            <DialogContent className=\"max-w-3xl max-h-[85vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl flex items-center gap-2\">\n                  <User className=\"h-6 w-6 text-primary\" />\n                  About Me – Ali from Fancy Feathers India\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 text-muted-foreground leading-relaxed\">\n                <div className=\"flex justify-center mb-4\">\n                  <img \n                    src={aliImage} \n                    alt=\"Ali - Founder\" \n                    className=\"w-64 h-64 rounded-lg object-cover border-4 border-primary/20\"\n                  />\n                </div>\n                \n                <p>\n                  My name is <strong className=\"text-foreground\">Ali</strong>, and for the past <strong className=\"text-foreground\">12+ years</strong>, \n                  I have been managing Fancy Feathers India — a heartfelt initiative born out of love, care, and deep respect for exotic birds.\n                </p>\n\n                <p>\n                  I was born and raised in a family surrounded by exotic birds, and my journey with them started long before I even realized \n                  it was my calling. From a young age, I learned how to raise, groom, and train birds with empathy and understanding — \n                  not just as pets, but as companions with emotions, intelligence, and a voice of their own.\n                </p>\n\n                <p>\n                  Over the years, I have pursued professional training in bird behavior from renowned experts outside India, and continue \n                  to expand my knowledge by reading and studying avian psychology and care. But beyond education, it's the everyday bond \n                  with these magnificent creatures that has shaped who I am today.\n                </p>\n\n                <div className=\"bg-primary/10 p-4 rounded-lg border-l-4 border-l-primary\">\n                  <p className=\"font-semibold text-foreground mb-2\">My mission is simple yet profound —</p>\n                  <p className=\"text-primary font-medium\">👉 To ensure every bird lives a happy, healthy, and cage-free life.</p>\n                </div>\n\n                <p>\n                  At Fancy Feathers, my goal is to spread awareness, educate bird owners, and build a community that truly understands \n                  what it means to care for exotic birds responsibly. I believe that birds should not be confined to cages; they deserve \n                  space to fly, socialize, and express themselves freely.\n                </p>\n\n                <p>\n                  Whether you're a bird parent seeking guidance on care, nutrition, or behavior training — or someone who wishes to bring \n                  home an exotic bird from a trusted, ethical, and healthy bloodline — I'm here to help.\n                </p>\n\n                <Card className=\"p-4 bg-card border-2 border-primary/30\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <Phone className=\"h-5 w-5 text-primary\" />\n                    <h3 className=\"font-semibold text-foreground text-lg\">Get in Touch</h3>\n                  </div>\n                  <p className=\"mb-2\">\n                    You can reach me directly at{\" \"}\n                    <a \n                      href=\"tel:+919014284059\" \n                      className=\"text-primary font-semibold hover:underline\"\n                      data-testid=\"link-phone\"\n                    >\n                      📞 +91 90142 84059\n                    </a>\n                  </p>\n                  <p className=\"text-sm\">\n                    For any bird-related advice, guidance, or if you'd simply like to learn more about which bird suits you and \n                    your family — from talking birds, to vibrant colorful companions, to majestic free-flyers that soar hundreds \n                    of meters in the open sky.\n                  </p>\n                </Card>\n\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <p className=\"font-semibold text-foreground mb-2\">This is not just my profession — it's my purpose and social cause:</p>\n                  <p className=\"italic\">\n                    To create a world where every bird is cared for, understood, and given the freedom it deserves.\n                  </p>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          <Card className=\"p-8 mb-8\">\n            <div className=\"flex items-start gap-4 mb-4\">\n              <Heart className=\"h-8 w-8 text-primary flex-shrink-0\" />\n              <div>\n                <h2 className=\"text-2xl font-semibold mb-4\">Nurturing Exotic Birds with Love, Care, and a Cage-Free Lifestyle</h2>\n                <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                  At Fancy Feathers India, we promote free flight, cage-free living, and expert care. \n                  From training and nutrition to companionship, we ensure these intelligent beings thrive \n                  as part of your family while guiding you in choosing the best quality birds and finding \n                  the right companion.\n                </p>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  Our platform offers detailed species profiles, behavioral insights, care guides, and \n                  pricing information to help you discover the vibrant world of exotic pet birds. \n                  From majestic Macaws to charming Cockatoos and talking Amazon Parrots—explore their \n                  behavior, approximate price ranges, and find the bird that truly fits your home and family.\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-8 mb-8 border-l-4 border-l-primary\">\n            <div className=\"flex items-start gap-4\">\n              <Shield className=\"h-8 w-8 text-primary flex-shrink-0\" />\n              <div>\n                <h2 className=\"text-2xl font-semibold mb-4\">Our Commitment to Bird Welfare</h2>\n                <div className=\"space-y-4 text-muted-foreground leading-relaxed\">\n                  <p>\n                    At Fancy Feathers India, we believe in promoting responsible bird ownership through \n                    education and guidance. We can introduce you to experienced breeders and trusted sellers \n                    who maintain strong parent stock, careful rearing, and good husbandry practices.\n                  </p>\n                  <p>\n                    When choosing a bird companion, we encourage you to:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                    <li>Seek birds from proven parentage with health screening</li>\n                    <li>Ensure proper socialization and welfare practices</li>\n                    <li>Understand the lifelong commitment involved</li>\n                    <li>Prepare for proper housing, nutrition, and enrichment</li>\n                    <li>Connect with reputable breeders who focus on quality and care</li>\n                  </ul>\n                  <p className=\"mt-4\">\n                    We're here to help you make informed decisions and provide guidance every step of the way \n                    in your journey to welcoming a feathered friend into your family.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          <h2 className=\"text-2xl font-semibold mb-6\">Frequently Asked Questions</h2>\n\n          <Accordion type=\"single\" collapsible className=\"mb-8\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger data-testid=\"accordion-cites\">\n                What is CITES and why is it important?\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"text-muted-foreground leading-relaxed space-y-3\">\n                  <p>\n                    <strong className=\"text-foreground\">CITES (Convention on International Trade in Endangered Species of Wild Fauna and Flora)</strong> is \n                    an international agreement that ensures the trade of exotic animals and birds is done responsibly and ethically. \n                    It helps protect endangered species while allowing bird enthusiasts to legally own and care for captive-bred exotic birds.\n                  </p>\n                  <p className=\"text-primary font-medium\">\n                    All the birds we deal with are compliant with CITES regulations, so you can own them with complete peace of mind.\n                  </p>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem value=\"item-2\">\n              <AccordionTrigger data-testid=\"accordion-legal\">\n                Is it legal to own exotic birds in India?\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"text-muted-foreground leading-relaxed space-y-3\">\n                  <p>\n                    <strong className=\"text-foreground\">Yes, absolutely!</strong> It is completely legal to own exotic birds in India, \n                    provided they are non-native species (not originally from India). These include beautiful and popular species like \n                    Macaws, Cockatoos, and African Greys.\n                  </p>\n                  <p>\n                    The Indian government allows keeping and breeding of such birds as long as they are captive-bred and not taken from the wild.\n                  </p>\n                  <p className=\"text-primary font-medium\">\n                    Owning an exotic bird is a wonderful experience — and we ensure all our birds are ethically bred, healthy, \n                    and fully compliant with Indian and international guidelines.\n                  </p>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem value=\"item-3\">\n              <AccordionTrigger data-testid=\"accordion-pricing\">\n                How accurate is the pricing information?\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"text-muted-foreground leading-relaxed space-y-3\">\n                  <p>\n                    We strive to provide the most accurate and transparent pricing for all our exotic birds. Prices may vary \n                    slightly depending on factors like age, training level, color mutation, and breeder reputation — but we \n                    always make sure you get the best value for your investment.\n                  </p>\n                  <p>\n                    Each bird comes from responsible breeders who prioritize quality, care, and ethical breeding practices.\n                  </p>\n                  <p className=\"text-primary font-medium\">\n                    You'll always know exactly what you're paying for — a healthy, well-socialized bird that becomes part of your family.\n                  </p>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem value=\"item-4\">\n              <AccordionTrigger data-testid=\"accordion-care\">\n                Are exotic birds suitable for first-time pet owners?\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"text-muted-foreground leading-relaxed space-y-3\">\n                  <p>\n                    <strong className=\"text-foreground\">Yes, 100%!</strong> Many exotic birds are perfect for first-time owners — \n                    <strong className=\"text-primary\"> but only if they are human-raised and have good bonding with humans, and their tameness level is extremely good.</strong>\n                  </p>\n                  <p>\n                    They're intelligent, affectionate, and love to interact with humans when properly socialized from a young age.\n                  </p>\n                  <p>\n                    When you get a bird from us, you'll receive complete pre-purchase and post-purchase guidance — from selecting \n                    the right species to understanding diet, behavior, training, and bonding. Our team ensures that you feel \n                    confident and well-prepared before bringing your feathered friend home.\n                  </p>\n                  <p className=\"text-primary font-medium\">\n                    Birds that are hand-raised and human-socialized from the start tend to be especially friendly, making them wonderful \n                    companions even for beginners.\n                  </p>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem value=\"item-5\">\n              <AccordionTrigger data-testid=\"accordion-source\">\n                How do I find a reputable breeder?\n              </AccordionTrigger>\n              <AccordionContent>\n                <div className=\"text-muted-foreground leading-relaxed space-y-3\">\n                  <p>\n                    Finding the right breeder is key to ensuring your bird is healthy, friendly, and ethically raised. \n                    Always look for breeders who hand-raise their chicks, maintain hygienic breeding environments, and \n                    provide proper nutrition and care.\n                  </p>\n                  <p className=\"text-primary font-medium\">\n                    We can help you connect directly with verified and reputed breeders who follow the best standards \n                    in exotic bird care and breeding.\n                  </p>\n                  <Card className=\"p-4 bg-primary/5 border-primary/20 mt-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                      <p>\n                        <strong className=\"text-foreground\">Contact us at </strong>\n                        <a \n                          href=\"tel:+919014284059\" \n                          className=\"text-primary font-semibold hover:underline\"\n                          data-testid=\"link-phone-faq\"\n                        >\n                          +91 9014284059\n                        </a>\n                        <span className=\"text-foreground\"> and we'll happily guide you to the right sources and breeders \n                        to help you bring home your perfect feathered companion.</span>\n                      </p>\n                    </div>\n                  </Card>\n                </div>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n\n          <Card className=\"p-8\">\n            <div className=\"flex items-start gap-4\">\n              <Info className=\"h-8 w-8 text-primary flex-shrink-0\" />\n              <div>\n                <h2 className=\"text-2xl font-semibold mb-4\">Disclaimer</h2>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  The information provided on this website is for educational purposes only and should not \n                  be considered as professional veterinary, legal, or financial advice. While we strive to \n                  maintain accurate and up-to-date information, laws, regulations, and market prices can \n                  change. Always consult with qualified professionals including avian veterinarians, legal \n                  experts, and experienced bird breeders before making any decisions regarding exotic bird \n                  ownership.\n                </p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18480},"README.md":{"content":"# Exotic Birds Info\n\nA comprehensive, production-ready website cataloging exotic pet birds with detailed species profiles, care guides, and pricing information for India.\n\n![Exotic Birds Info](./docs/screenshot.png)\n\n## Features\n\n- **🦜 Species Catalog**: Detailed profiles for 7 exotic bird species including Macaws, Cockatoos, African Grey, and Amazon Parrots\n- **🔍 Advanced Search & Filters**: Search by name or filter by size, noise level, and price range\n- **📊 Detailed Profiles**: Comprehensive information on behavior, diet, care requirements, and legal considerations\n- **💰 India Pricing**: Estimated price ranges in INR with last-updated timestamps\n- **📱 Responsive Design**: Mobile-first design with Tailwind CSS and Shadcn UI components\n- **♿ Accessibility**: Keyboard navigable, semantic HTML, ARIA labels, and alt text for all images\n- **📄 PDF Export**: Download bird profile cards (coming soon)\n- **🔐 Admin Panel**: Simple passphrase-protected panel for updating bird data\n- **⚖️ Legal Compliance**: CITES and Wildlife Protection Act information for each species\n\n## Tech Stack\n\n### Frontend\n- **React** (Vite)\n- **Tailwind CSS** for styling\n- **Shadcn UI** components\n- **Wouter** for routing\n- **TanStack Query** for state management\n- **Lucide React** for icons\n\n### Backend\n- **Express.js**\n- **In-memory storage** (easily upgradeable to database)\n- **Zod** for validation\n- **TypeScript** throughout\n\n## Getting Started\n\n### Prerequisites\n- Node.js 20 or higher\n- npm or yarn\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd exotic-birds-info\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Start the development server:\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## Project Structure\n\n```\n├── client/\n│   ├── src/\n│   │   ├── components/       # Reusable React components\n│   │   │   ├── ui/          # Shadcn UI components\n│   │   │   ├── Header.tsx\n│   │   │   ├── Footer.tsx\n│   │   │   ├── BirdCard.tsx\n│   │   │   ├── FilterChips.tsx\n│   │   │   ├── PriceBadge.tsx\n│   │   │   ├── QuickFacts.tsx\n│   │   │   └── CareChecklist.tsx\n│   │   ├── pages/           # Page components\n│   │   │   ├── Home.tsx\n│   │   │   ├── BirdProfile.tsx\n│   │   │   ├── About.tsx\n│   │   │   └── Admin.tsx\n│   │   ├── lib/             # Utilities and data\n│   │   │   └── birdsData.ts # Seed data for birds\n│   │   └── App.tsx\n├── server/\n│   ├── routes.ts            # API routes\n│   └── storage.ts           # Storage interface\n├── shared/\n│   └── schema.ts            # Shared TypeScript types\n└── attached_assets/\n    └── generated_images/    # Bird images\n```\n\n## Updating Bird Data\n\n### Via Admin Panel (Recommended for Non-Technical Users)\n\n1. Navigate to `/admin`\n2. Enter the passphrase: `exotic2024` (change this in production!)\n3. Edit the JSON data\n4. Click \"Save Changes\"\n\n**Note**: Currently saves to browser memory only. See \"Future Enhancements\" for API integration.\n\n### Via Code (For Developers)\n\nEdit `client/src/lib/birdsData.ts` to update bird information:\n\n```typescript\n{\n  id: \"1\",\n  name: \"Blue-and-Gold Macaw\",\n  priceMin: 80000,\n  priceMax: 200000,\n  lastUpdated: new Date().toISOString(), // Update this when changing prices\n  // ... other fields\n}\n```\n\n## Customization\n\n### Changing Colors\n\nEdit `client/src/index.css` to customize the color scheme. The current theme uses a nature-focused teal color:\n\n```css\n:root {\n  --primary: 165 75% 28%; /* Teal color */\n  /* ... other colors */\n}\n```\n\n### Adding New Birds\n\nAdd new bird entries to `client/src/lib/birdsData.ts`:\n\n```typescript\n{\n  id: \"8\",\n  name: \"New Bird Species\",\n  scientificName: \"Species scientificus\",\n  slug: \"new-bird-species\",\n  image: \"/path/to/image.png\",\n  size: \"medium\",\n  noiseLevel: \"moderate\",\n  // ... complete all required fields\n}\n```\n\n### Updating Legal Information\n\nLegal notices and CITES information can be updated in:\n- Individual bird entries (`birdsData.ts`)\n- About page (`client/src/pages/About.tsx`)\n\n## SEO\n\nEach page includes:\n- Unique, descriptive title tags\n- Meta descriptions\n- Open Graph tags (can be extended)\n\n### Adding Meta Tags to Bird Pages\n\nThe BirdProfile page can be enhanced with dynamic meta tags using a library like `react-helmet`:\n\n```bash\nnpm install react-helmet\n```\n\n## Future Enhancements\n\n### Planned Features (TODO Comments in Code)\n\n1. **Real Pricing API Integration**\n   - Location: `client/src/pages/BirdProfile.tsx`\n   - Connect to regional marketplace API for live pricing across Indian cities\n\n2. **PDF Generation**\n   - Location: `client/src/pages/BirdProfile.tsx`\n   - Implement client-side PDF generation using jsPDF\n\n3. **Backend API for Bird Data**\n   - Location: `server/routes.ts`\n   - Create REST endpoints for CRUD operations on bird data\n   - Move from in-memory storage to database (PostgreSQL recommended)\n\n4. **Admin Authentication**\n   - Implement proper authentication instead of simple passphrase\n   - Add user roles and permissions\n\n5. **Breeder Directory**\n   - Add verified breeder listings\n   - User reviews and ratings\n   - Contact forms\n\n6. **Comparison Feature**\n   - Side-by-side species comparison\n   - Care requirement calculator\n\n## Deployment\n\n### Netlify / Vercel\n\nThis project is ready to deploy on Netlify or Vercel:\n\n1. Connect your repository\n2. Build command: `npm run build`\n3. Output directory: `dist`\n4. Environment variables: Set `SESSION_SECRET` for production\n\n### Environment Variables\n\nCreate a `.env` file for local development:\n\n```env\nSESSION_SECRET=your-secret-key-here\n```\n\n## Legal & Compliance\n\n**Important**: This website is for informational purposes only. Users must:\n\n- Check local laws regarding exotic pet ownership\n- Understand CITES regulations\n- Comply with India's Wildlife Protection Act, 1972\n- Work with licensed breeders only\n- Obtain all necessary permits\n\n## License\n\n[Your License Here]\n\n## Contributing\n\nContributions are welcome! Please:\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\n## Support\n\nFor questions or issues, please open an issue on GitHub or contact [your-email@example.com]\n\n---\n\n**Disclaimer**: The information provided is for educational purposes only. Always consult with qualified avian veterinarians and legal experts before acquiring exotic birds.\n","size_bytes":6617},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || \"fancy-feathers-secret-key-change-in-production\",\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n    httpOnly: true,\n    secure: process.env.NODE_ENV === \"production\",\n  }\n}));\n\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2568},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Eye, EyeOff, Loader2 } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { OTPVerification } from \"@/components/OTPVerification\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showSignupPassword, setShowSignupPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [signupOpen, setSignupOpen] = useState(false);\n  const [signupStep, setSignupStep] = useState<\"mobile\" | \"otp\" | \"password\">(\"mobile\");\n  const [formData, setFormData] = useState({\n    mobile: \"\",\n    password: \"\",\n    countryCode: \"+91\",\n  });\n  const [signupData, setSignupData] = useState({\n    mobile: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    countryCode: \"+91\",\n  });\n\n  // Country-specific phone validation\n  const validatePhoneNumber = (phone: string, countryCode: string) => {\n    // Remove any non-digit characters\n    const digits = phone.replace(/\\D/g, '');\n    \n    switch (countryCode) {\n      case \"+91\": // India\n        return /^[6-9]\\d{9}$/.test(digits);\n      case \"+1\": // USA/Canada\n        return /^\\d{10}$/.test(digits);\n      case \"+44\": // UK\n        return /^\\d{10,11}$/.test(digits);\n      case \"+61\": // Australia\n        return /^\\d{9,10}$/.test(digits);\n      case \"+971\": // UAE\n        return /^\\d{9}$/.test(digits);\n      case \"+966\": // Saudi Arabia\n        return /^\\d{9}$/.test(digits);\n      case \"+65\": // Singapore\n        return /^\\d{8}$/.test(digits);\n      default:\n        // Generic validation: 7-15 digits\n        return /^\\d{7,15}$/.test(digits);\n    }\n  };\n\n  const getPhoneNumberLength = (countryCode: string) => {\n    switch (countryCode) {\n      case \"+91\": return 10; // India\n      case \"+1\": return 10; // USA/Canada\n      case \"+44\": return \"10-11\"; // UK\n      case \"+61\": return \"9-10\"; // Australia\n      case \"+971\": return 9; // UAE\n      case \"+966\": return 9; // Saudi Arabia\n      case \"+65\": return 8; // Singapore\n      default: return \"7-15\";\n    }\n  };\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { mobile: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/login', data);\n      return await response.json();  // Parse JSON from Response object\n    },\n    onSuccess: (data: any) => {\n      console.log('[LOGIN] Success callback triggered', data);\n      const userType = data.userType || \"user\";\n      const redirectTo = data.redirectTo || \"/user-dashboard\";\n      console.log('[LOGIN] Redirecting to:', redirectTo);\n      \n      toast({\n        title: \"Login Successful\",\n        description: userType === \"admin\" \n          ? \"Welcome to the admin dashboard!\" \n          : \"Welcome back! Redirecting to your dashboard...\",\n      });\n      \n      // Use window.location for more reliable redirect\n      console.log('[LOGIN] Setting up redirect in 500ms...');\n      setTimeout(() => {\n        console.log('[LOGIN] Executing redirect now to:', redirectTo);\n        window.location.href = redirectTo;\n      }, 500);\n    },\n    onError: (error: any) => {\n      console.error('[LOGIN] Error callback triggered:', error);\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid mobile number or password\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const sendOtpMutation = useMutation({\n    mutationFn: async (data: { phone: string }) => {\n      const response = await apiRequest('POST', '/api/otp/send', data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"OTP Sent\",\n        description: data.message || \"An OTP has been sent to your mobile number.\",\n      });\n      setSignupStep(\"otp\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send OTP\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const countryCodes = [\n    { code: \"+91\", country: \"India\", flag: \"🇮🇳\" },\n    { code: \"+1\", country: \"USA/Canada\", flag: \"🇺🇸\" },\n    { code: \"+44\", country: \"UK\", flag: \"🇬🇧\" },\n    { code: \"+61\", country: \"Australia\", flag: \"🇦🇺\" },\n    { code: \"+971\", country: \"UAE\", flag: \"🇦🇪\" },\n    { code: \"+966\", country: \"Saudi Arabia\", flag: \"🇸🇦\" },\n    { code: \"+65\", country: \"Singapore\", flag: \"🇸🇬\" },\n    { code: \"+92\", country: \"Pakistan\", flag: \"🇵🇰\" },\n    { code: \"+880\", country: \"Bangladesh\", flag: \"🇧🇩\" },\n    { code: \"+94\", country: \"Sri Lanka\", flag: \"🇱🇰\" },\n  ];\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: { phone: string; username: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/user-account/signup', data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Account Created\",\n        description: data.message || \"Your account has been created successfully. Logging you in...\",\n      });\n      setSignupOpen(false);\n      setSignupStep(\"mobile\");\n      setSignupData({ mobile: \"\", username: \"\", password: \"\", confirmPassword: \"\", countryCode: \"+91\" });\n      setLocation(\"/user-dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validate password\n    if (!formData.password || formData.password.length < 1) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter your password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Send full phone number with country code for login\n    const fullPhone = formData.countryCode + formData.mobile.replace(/\\D/g, '');\n    loginMutation.mutate({\n      mobile: fullPhone,\n      password: formData.password,\n    });\n  };\n\n  const handleSendOtp = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Send full phone number with country code\n    const fullPhone = signupData.countryCode + signupData.mobile.replace(/\\D/g, '');\n    sendOtpMutation.mutate({ phone: fullPhone });\n  };\n\n  const handleOtpVerified = () => {\n    setSignupStep(\"password\");\n  };\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validate username\n    if (signupData.username.trim().length < 3) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Username must be at least 3 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate password\n    const passwordRegex = /^(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*(),.?\":{}|<>]).{8,}$/;\n    if (!passwordRegex.test(signupData.password)) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Password must be at least 8 characters with 1 uppercase, 1 number, and 1 special character\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate password confirmation\n    if (signupData.password !== signupData.confirmPassword) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Passwords do not match. Please make sure both passwords are the same.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Send full phone number with country code\n    const fullPhone = signupData.countryCode + signupData.mobile.replace(/\\D/g, '');\n    signupMutation.mutate({\n      phone: fullPhone,\n      username: signupData.username,\n      password: signupData.password,\n    });\n  };\n\n  const handleSignupDialogChange = (open: boolean) => {\n    setSignupOpen(open);\n    if (!open) {\n      // Reset signup form and step when dialog closes\n      setSignupStep(\"mobile\");\n      setSignupData({ mobile: \"\", username: \"\", password: \"\", confirmPassword: \"\", countryCode: \"+91\" });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n\n      <main className=\"flex-1 flex items-center justify-center py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-md\">\n          <Card>\n            <CardHeader className=\"space-y-1\">\n              <CardTitle className=\"text-2xl font-bold text-center\">Login to Your Account</CardTitle>\n              <CardDescription className=\"text-center\">\n                Enter your mobile number and password to access your dashboard\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"mobile\">\n                    Mobile Number <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <div className=\"flex gap-2\">\n                    <Select\n                      value={formData.countryCode}\n                      onValueChange={(value) => {\n                        setFormData({ ...formData, countryCode: value, mobile: \"\" });\n                      }}\n                    >\n                      <SelectTrigger className=\"w-[140px]\" data-testid=\"select-login-country-code\">\n                        <SelectValue>\n                          <div className=\"flex items-center gap-2\">\n                            <span>{countryCodes.find(c => c.code === formData.countryCode)?.flag}</span>\n                            <span>{formData.countryCode}</span>\n                          </div>\n                        </SelectValue>\n                      </SelectTrigger>\n                      <SelectContent>\n                        {countryCodes.map((country) => (\n                          <SelectItem key={country.code} value={country.code}>\n                            <div className=\"flex items-center gap-2\">\n                              <span>{country.flag}</span>\n                              <span className=\"font-medium\">{country.country}</span>\n                              <span className=\"text-muted-foreground\">{country.code}</span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <Input\n                      id=\"mobile\"\n                      type=\"tel\"\n                      placeholder={formData.countryCode === \"+91\" ? \"9876543210\" : \"Phone number\"}\n                      value={formData.mobile}\n                      onChange={(e) => {\n                        let digits = e.target.value.replace(/\\D/g, '');\n                        setFormData({ ...formData, mobile: digits.slice(0, 15) });\n                      }}\n                      required\n                      data-testid=\"input-mobile\"\n                      className=\"flex-1\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">\n                    Password <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={formData.password}\n                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                      required\n                      data-testid=\"input-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"button-toggle-password\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n                </Button>\n\n                <div className=\"text-center text-sm text-muted-foreground\">\n                  Don't have an account?{\" \"}\n                  <Dialog open={signupOpen} onOpenChange={handleSignupDialogChange}>\n                    <DialogTrigger asChild>\n                      <span className=\"text-primary hover:underline cursor-pointer\" data-testid=\"link-signup\">\n                        Signup\n                      </span>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {signupStep === \"mobile\" && \"Create New Account\"}\n                          {signupStep === \"otp\" && \"Verify Mobile Number\"}\n                          {signupStep === \"password\" && \"Complete Your Profile\"}\n                        </DialogTitle>\n                        <DialogDescription>\n                          {signupStep === \"mobile\" && \"Enter your mobile number to get started\"}\n                          {signupStep === \"otp\" && \"We've sent a verification code to your phone\"}\n                          {signupStep === \"password\" && \"Set your username and password\"}\n                        </DialogDescription>\n                      </DialogHeader>\n\n                      {signupStep === \"mobile\" && (\n                        <form onSubmit={handleSendOtp} className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"signup-mobile\">\n                              Mobile Number <span className=\"text-destructive\">*</span>\n                            </Label>\n                            <div className=\"flex gap-2\">\n                              <Select\n                                value={signupData.countryCode}\n                                onValueChange={(value) => {\n                                  setSignupData({ ...signupData, countryCode: value, mobile: \"\" });\n                                }}\n                              >\n                                <SelectTrigger className=\"w-[140px]\" data-testid=\"select-country-code\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {countryCodes.map((country) => (\n                                    <SelectItem key={country.code} value={country.code}>\n                                      <span className=\"flex items-center gap-2\">\n                                        <span>{country.flag}</span>\n                                        <span>{country.code}</span>\n                                      </span>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <Input\n                                id=\"signup-mobile\"\n                                type=\"tel\"\n                                placeholder={signupData.countryCode === \"+91\" ? \"9876543210\" : \"Phone number\"}\n                                value={signupData.mobile}\n                                onChange={(e) => {\n                                  let digits = e.target.value.replace(/\\D/g, '');\n                                  setSignupData({ ...signupData, mobile: digits.slice(0, 15) });\n                                }}\n                                required\n                                data-testid=\"input-signup-mobile\"\n                                autoFocus\n                                className=\"flex-1\"\n                              />\n                            </div>\n                          </div>\n\n                          <Button\n                            type=\"submit\"\n                            className=\"w-full\"\n                            disabled={sendOtpMutation.isPending}\n                            data-testid=\"button-send-otp\"\n                          >\n                            {sendOtpMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                Sending OTP...\n                              </>\n                            ) : (\n                              \"Send OTP\"\n                            )}\n                          </Button>\n                        </form>\n                      )}\n\n                      {signupStep === \"otp\" && (\n                        <OTPVerification\n                          phone={signupData.countryCode + signupData.mobile.replace(/\\D/g, '')}\n                          onVerified={handleOtpVerified}\n                          onCancel={() => setSignupStep(\"mobile\")}\n                        />\n                      )}\n\n                      {signupStep === \"password\" && (\n                        <form onSubmit={handleSignup} className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"signup-username\">\n                              Username <span className=\"text-destructive\">*</span>\n                            </Label>\n                            <Input\n                              id=\"signup-username\"\n                              type=\"text\"\n                              placeholder=\"Enter your name\"\n                              value={signupData.username}\n                              onChange={(e) => setSignupData({ ...signupData, username: e.target.value })}\n                              required\n                              data-testid=\"input-signup-username\"\n                              autoFocus\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"signup-password\">\n                              Password <span className=\"text-destructive\">*</span>\n                            </Label>\n                            <div className=\"relative\">\n                              <Input\n                                id=\"signup-password\"\n                                type={showSignupPassword ? \"text\" : \"password\"}\n                                placeholder=\"Enter your password\"\n                                value={signupData.password}\n                                onChange={(e) => setSignupData({ ...signupData, password: e.target.value })}\n                                required\n                                data-testid=\"input-signup-password\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                onClick={() => setShowSignupPassword(!showSignupPassword)}\n                                data-testid=\"button-toggle-signup-password\"\n                              >\n                                {showSignupPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Min 8 characters, 1 uppercase, 1 number, 1 special character\n                            </p>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"signup-confirm-password\">\n                              Confirm Password <span className=\"text-destructive\">*</span>\n                            </Label>\n                            <div className=\"relative\">\n                              <Input\n                                id=\"signup-confirm-password\"\n                                type={showConfirmPassword ? \"text\" : \"password\"}\n                                placeholder=\"Re-enter your password\"\n                                value={signupData.confirmPassword}\n                                onChange={(e) => setSignupData({ ...signupData, confirmPassword: e.target.value })}\n                                required\n                                data-testid=\"input-signup-confirm-password\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                data-testid=\"button-toggle-confirm-password\"\n                              >\n                                {showConfirmPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Both passwords must match\n                            </p>\n                          </div>\n\n                          <Button\n                            type=\"submit\"\n                            className=\"w-full\"\n                            disabled={signupMutation.isPending}\n                            data-testid=\"button-signup-submit\"\n                          >\n                            {signupMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                Creating Account...\n                              </>\n                            ) : (\n                              \"Create Account\"\n                            )}\n                          </Button>\n                        </form>\n                      )}\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":24009},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  phone: text(\"phone\"),\n  fullName: text(\"full_name\").notNull(),\n  subscriptionPlan: text(\"subscription_plan\"),\n  subscriptionStatus: text(\"subscription_status\").default(\"active\"),\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const subscriptionRequests = pgTable(\"subscription_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  mobileNumber: text(\"mobile_number\").notNull(),\n  birdSpecies: text(\"bird_species\").notNull(),\n  transactionId: text(\"transaction_id\"), // Optional - for manual UPI payments\n  subscriptionPlan: text(\"subscription_plan\"), // monthly, six-month, annual - nullable temporarily for migration\n  subscriptionStartDate: timestamp(\"subscription_start_date\").defaultNow(),\n  subscriptionEndDate: timestamp(\"subscription_end_date\"),\n  amountPaid: integer(\"amount_paid\"), // amount in rupees - nullable temporarily for migration\n  consultationsRemaining: integer(\"consultations_remaining\"), // 2, 18, or 48 - nullable temporarily for migration\n  discountCoupon: text(\"discount_coupon\"), // coupon code if applied\n  status: text(\"status\").default(\"active\").notNull(), // active, expired, exhausted\n  razorpayOrderId: text(\"razorpay_order_id\"), // Razorpay order ID\n  razorpayPaymentId: text(\"razorpay_payment_id\"), // Razorpay payment ID\n  razorpaySignature: text(\"razorpay_signature\"), // Razorpay payment signature\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, success, failed\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  mobile: text(\"mobile\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").notNull().references(() => adminUsers.id),\n  subscriptionId: varchar(\"subscription_id\").notNull().references(() => subscriptionRequests.id, { onDelete: \"cascade\" }),\n  action: text(\"action\").notNull(), // e.g., \"updated_consultations\"\n  previousValue: text(\"previous_value\"),\n  newValue: text(\"new_value\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const userAccounts = pgTable(\"user_accounts\", {\n  phone: text(\"phone\").primaryKey(), // Phone number as user ID\n  password: text(\"password\").notNull(), // Hashed password\n  fullName: text(\"full_name\").notNull(), // User's full name\n  subscriptionId: varchar(\"subscription_id\").references(() => subscriptionRequests.id), // Optional subscription reference\n  otp: text(\"otp\"), // Encrypted OTP\n  otpExpiry: timestamp(\"otp_expiry\"), // OTP expiration time\n  isMobileVerified: boolean(\"is_mobile_verified\").default(false).notNull(), // Mobile verification status\n  verifiedAt: timestamp(\"verified_at\"), // Verification timestamp\n  twilioMessageSid: text(\"twilio_message_sid\"), // Twilio message SID for tracking\n  lastOtpSentAt: timestamp(\"last_otp_sent_at\"), // Last OTP sent time for resend cooldown\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const birdDetails = pgTable(\"bird_details\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userPhone: text(\"user_phone\").notNull().references(() => userAccounts.phone, { onDelete: \"cascade\" }),\n  birdName: text(\"bird_name\").notNull(),\n  species: text(\"species\").notNull(),\n  ringId: text(\"ring_id\"),\n  weight: integer(\"weight\"), // in grams\n  age: text(\"age\"), // e.g., \"6 months\", \"2 years\"\n  issues: text(\"issues\"), // multi-line symptoms/issues\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const otpAttempts = pgTable(\"otp_attempts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phone: text(\"phone\").notNull(), // Phone number attempting verification\n  attempts: integer(\"attempts\").default(0).notNull(), // Number of failed attempts\n  lastAttemptAt: timestamp(\"last_attempt_at\").defaultNow().notNull(), // Last attempt timestamp\n  windowStartAt: timestamp(\"window_start_at\").defaultNow().notNull(), // Start of 10-minute window\n});\n\nexport const siteMetrics = pgTable(\"site_metrics\", {\n  key: text(\"key\").primaryKey(), // e.g., \"active_subscriptions\"\n  value: integer(\"value\").notNull(), // numeric value\n  lastUpdatedAt: timestamp(\"last_updated_at\").defaultNow().notNull(),\n  updatedBy: text(\"updated_by\").notNull(), // 'system', 'admin', 'payment'\n});\n\nexport const metricsAuditLog = pgTable(\"metrics_audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  metricKey: text(\"metric_key\").notNull(), // e.g., \"active_subscriptions\"\n  oldValue: integer(\"old_value\"),\n  newValue: integer(\"new_value\").notNull(),\n  delta: integer(\"delta\").notNull(), // change amount\n  updatedBy: text(\"updated_by\").notNull(), // 'system', 'admin', 'payment'\n  reason: text(\"reason\"), // description of why it changed\n  adminId: varchar(\"admin_id\").references(() => adminUsers.id), // if updated by admin\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const registerSchema = insertUserSchema.extend({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  fullName: z.string().min(1, \"Full name is required\"),\n  phone: z.string().nullable().optional(),\n  subscriptionPlan: z.string().nullable().optional(),\n  subscriptionStatus: z.string().nullable().optional(),\n  isAdmin: z.boolean().optional(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\n\nexport const insertSubscriptionRequestSchema = createInsertSchema(subscriptionRequests).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n  subscriptionStartDate: true,\n  subscriptionEndDate: true,\n  amountPaid: true,\n  consultationsRemaining: true,\n});\n\nexport const subscriptionRequestSchema = insertSubscriptionRequestSchema.extend({\n  fullName: z.string().min(2, \"Name must be at least 2 characters\"),\n  mobileNumber: z.string().regex(/^[6-9]\\d{9}$/, \"Please enter a valid 10-digit mobile number\"),\n  birdSpecies: z.string().min(1, \"Please select a bird species\"),\n  transactionId: z.string().regex(/^[A-Z0-9]{10,16}$/i, \"Please enter a valid UPI transaction ID (10-16 characters). For assistance, contact +91 90142 84059\").optional(),\n  subscriptionPlan: z.enum([\"monthly\", \"six-month\", \"annual\"]),\n  discountCoupon: z.string().optional(),\n  razorpayOrderId: z.string().optional(),\n  razorpayPaymentId: z.string().optional(),\n  razorpaySignature: z.string().optional(),\n  paymentStatus: z.enum([\"pending\", \"success\", \"failed\"]).optional(),\n});\n\nexport type InsertSubscriptionRequest = z.infer<typeof insertSubscriptionRequestSchema>;\nexport type SubscriptionRequest = typeof subscriptionRequests.$inferSelect;\nexport type SubscriptionRequestData = z.infer<typeof subscriptionRequestSchema>;\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const adminLoginSchema = z.object({\n  mobile: z.string().regex(/^\\+\\d{10,15}$/, \"Please enter a valid mobile number\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type AdminLoginCredentials = z.infer<typeof adminLoginSchema>;\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\n\nexport const updateSubscriptionSchema = z.object({\n  fullName: z.string().min(2).optional(),\n  mobileNumber: z.string().regex(/^[6-9]\\d{9}$/).optional(),\n  birdSpecies: z.string().min(1).optional(),\n  subscriptionPlan: z.enum([\"monthly\", \"six-month\", \"annual\"]).optional(),\n  subscriptionStartDate: z.string().optional(),\n  subscriptionEndDate: z.string().optional(),\n  amountPaid: z.number().optional(),\n  consultationsRemaining: z.number().optional(),\n  status: z.enum([\"active\", \"expired\", \"exhausted\"]).optional(),\n});\n\nexport type UpdateSubscriptionData = z.infer<typeof updateSubscriptionSchema>;\n\nexport const birdSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  scientificName: z.string(),\n  slug: z.string(),\n  image: z.string(),\n  size: z.enum([\"small\", \"medium\", \"large\"]),\n  noiseLevel: z.enum([\"quiet\", \"moderate\", \"loud\"]),\n  traits: z.array(z.string()),\n  lifespan: z.string(),\n  origin: z.string(),\n  behavior: z.string(),\n  diet: z.string(),\n  humanCompatibility: z.string(),\n  priceMin: z.number(),\n  priceMax: z.number(),\n  lastUpdated: z.string(),\n  prosAsPet: z.array(z.string()),\n  consAsPet: z.array(z.string()),\n  careChecklist: z.array(z.string()),\n  legalNotes: z.string().optional(),\n});\n\nexport const insertBirdSchema = birdSchema.omit({ id: true });\n\nexport type Bird = z.infer<typeof birdSchema>;\nexport type InsertBird = z.infer<typeof insertBirdSchema>;\n\nexport const insertUserAccountSchema = createInsertSchema(userAccounts).omit({\n  createdAt: true,\n});\n\nexport const userAccountRegistrationSchema = z.object({\n  phone: z.string().regex(/^(\\+\\d{1,4}\\d{7,15}|[6-9]\\d{9})$/, \"Please enter a valid mobile number\"),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one capital letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\")\n    .regex(/[!@#$%^&*(),.?\":{}|<>]/, \"Password must contain at least one special character\"),\n  confirmPassword: z.string(),\n  subscriptionId: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const userAccountLoginSchema = z.object({\n  phone: z.string().regex(/^(\\+\\d{1,4}\\d{7,15}|[6-9]\\d{9})$/, \"Please enter a valid mobile number\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const userAccountSignupSchema = z.object({\n  phone: z.string().regex(/^(\\+\\d{1,4}\\d{7,15}|[6-9]\\d{9})$/, \"Please enter a valid mobile number\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one capital letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\")\n    .regex(/[!@#$%^&*(),.?\":{}|<>]/, \"Password must contain at least one special character\"),\n});\n\nexport type InsertUserAccount = z.infer<typeof insertUserAccountSchema>;\nexport type UserAccount = typeof userAccounts.$inferSelect;\nexport type UserAccountRegistrationData = z.infer<typeof userAccountRegistrationSchema>;\nexport type UserAccountLoginData = z.infer<typeof userAccountLoginSchema>;\nexport type UserAccountSignupData = z.infer<typeof userAccountSignupSchema>;\n\nexport const insertBirdDetailsSchema = createInsertSchema(birdDetails).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const birdDetailsSchema = insertBirdDetailsSchema.extend({\n  birdName: z.string().min(1, \"Bird name is required\"),\n  species: z.string().min(1, \"Species is required\"),\n  ringId: z.string().optional(),\n  weight: z.number().optional(),\n  age: z.string().optional(),\n  issues: z.string().optional(),\n});\n\nexport const updateBirdDetailsSchema = z.object({\n  birdName: z.string().min(1).optional(),\n  species: z.string().min(1).optional(),\n  ringId: z.string().optional(),\n  weight: z.number().optional(),\n  age: z.string().optional(),\n  issues: z.string().optional(),\n});\n\nexport type InsertBirdDetails = z.infer<typeof insertBirdDetailsSchema>;\nexport type BirdDetails = typeof birdDetails.$inferSelect;\nexport type BirdDetailsData = z.infer<typeof birdDetailsSchema>;\nexport type UpdateBirdDetailsData = z.infer<typeof updateBirdDetailsSchema>;\n\nexport const sendOtpSchema = z.object({\n  phone: z.string().regex(/^(\\+\\d{1,4}\\d{7,15}|[6-9]\\d{9})$/, \"Please enter a valid mobile number\"),\n});\n\nexport const verifyOtpSchema = z.object({\n  phone: z.string().regex(/^(\\+\\d{1,4}\\d{7,15}|[6-9]\\d{9})$/, \"Please enter a valid mobile number\"),\n  otp: z.string().length(4, \"OTP must be 4 digits\").regex(/^\\d{4}$/, \"OTP must contain only numbers\"),\n});\n\nexport const insertOtpAttemptSchema = createInsertSchema(otpAttempts).omit({\n  id: true,\n  lastAttemptAt: true,\n  windowStartAt: true,\n});\n\nexport type SendOtpData = z.infer<typeof sendOtpSchema>;\nexport type VerifyOtpData = z.infer<typeof verifyOtpSchema>;\nexport type InsertOtpAttempt = z.infer<typeof insertOtpAttemptSchema>;\nexport type OtpAttempt = typeof otpAttempts.$inferSelect;\n\n// Site Metrics types\nexport type SiteMetric = typeof siteMetrics.$inferSelect;\nexport type MetricsAuditLog = typeof metricsAuditLog.$inferSelect;\n\nexport const insertSiteMetricSchema = createInsertSchema(siteMetrics);\nexport const insertMetricsAuditLogSchema = createInsertSchema(metricsAuditLog).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertSiteMetric = z.infer<typeof insertSiteMetricSchema>;\nexport type InsertMetricsAuditLog = z.infer<typeof insertMetricsAuditLogSchema>;\n\n// Appointment Booking Tables\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userPhone: text(\"user_phone\").notNull().references(() => userAccounts.phone, { onDelete: \"cascade\" }),\n  subscriptionId: varchar(\"subscription_id\").notNull().references(() => subscriptionRequests.id, { onDelete: \"cascade\" }),\n  birdId: varchar(\"bird_id\").references(() => birdDetails.id, { onDelete: \"set null\" }),\n  birdName: text(\"bird_name\").notNull(), // Store bird name for records even if bird is deleted\n  appointmentDate: timestamp(\"appointment_date\", { mode: \"string\" }).notNull(), // Date and time in ISO format\n  slotStartTime: text(\"slot_start_time\").notNull(), // e.g., \"10:00\"\n  slotEndTime: text(\"slot_end_time\").notNull(), // e.g., \"10:30\"\n  symptoms: text(\"symptoms\").notNull(), // Description of bird's issues\n  imageUrl: text(\"image_url\"), // Optional uploaded image\n  status: text(\"status\").default(\"booked\").notNull(), // booked, completed, canceled, missed\n  canceledAt: timestamp(\"canceled_at\"), // When appointment was canceled\n  canceledBy: text(\"canceled_by\"), // 'user' or 'admin'\n  cancellationReason: text(\"cancellation_reason\"),\n  creditRestored: boolean(\"credit_restored\").default(false).notNull(), // Whether consultation credit was restored\n  adminNotes: text(\"admin_notes\"), // Admin can add notes\n  reminderSent24h: boolean(\"reminder_sent_24h\").default(false).notNull(), // Track if 24h reminder sent\n  reminderSent1h: boolean(\"reminder_sent_1h\").default(false).notNull(), // Track if 1h reminder sent\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const blockedSlots = pgTable(\"blocked_slots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  blockDate: timestamp(\"block_date\", { mode: \"string\" }).notNull(), // Full day block or specific date\n  slotStartTime: text(\"slot_start_time\"), // null means full day block\n  slotEndTime: text(\"slot_end_time\"), // null means full day block\n  reason: text(\"reason\").notNull(), // e.g., \"Holiday\", \"Leave\", \"Maintenance\"\n  blockedBy: varchar(\"blocked_by\").notNull().references(() => adminUsers.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const appointmentSettings = pgTable(\"appointment_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slotDuration: integer(\"slot_duration\").default(30).notNull(), // in minutes\n  bufferTime: integer(\"buffer_time\").default(0).notNull(), // buffer between slots in minutes\n  workingHoursStart: text(\"working_hours_start\").default(\"10:00\").notNull(),\n  workingHoursEnd: text(\"working_hours_end\").default(\"17:00\").notNull(),\n  timezone: text(\"timezone\").default(\"Asia/Kolkata\").notNull(),\n  maxAdvanceBookingDays: integer(\"max_advance_booking_days\").default(30).notNull(), // How far in advance users can book\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  updatedBy: varchar(\"updated_by\").references(() => adminUsers.id),\n});\n\n// Appointment schemas\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n  canceledAt: true,\n  canceledBy: true,\n  cancellationReason: true,\n  creditRestored: true,\n  adminNotes: true,\n  reminderSent24h: true,\n  reminderSent1h: true,\n});\n\nexport const createAppointmentSchema = insertAppointmentSchema.extend({\n  userPhone: z.string(),\n  subscriptionId: z.string(),\n  birdId: z.string().optional(),\n  birdName: z.string().min(1, \"Bird name is required\"),\n  appointmentDate: z.string(), // ISO date string\n  slotStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Invalid time format\"),\n  slotEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Invalid time format\"),\n  symptoms: z.string().min(10, \"Please provide at least 10 characters describing the symptoms\"),\n  imageUrl: z.string().optional(),\n});\n\nexport const updateAppointmentSchema = z.object({\n  status: z.enum([\"booked\", \"completed\", \"canceled\", \"missed\"]).optional(),\n  adminNotes: z.string().optional(),\n  cancellationReason: z.string().optional(),\n});\n\nexport const insertBlockedSlotSchema = createInsertSchema(blockedSlots).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const createBlockedSlotSchema = insertBlockedSlotSchema.extend({\n  blockDate: z.string(), // ISO date string\n  slotStartTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Invalid time format\").optional(),\n  slotEndTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Invalid time format\").optional(),\n  reason: z.string().min(1, \"Reason is required\"),\n  blockedBy: z.string(),\n});\n\nexport const updateAppointmentSettingsSchema = z.object({\n  slotDuration: z.number().min(15).max(120).optional(),\n  bufferTime: z.number().min(0).max(60).optional(),\n  workingHoursStart: z.string().regex(/^\\d{2}:\\d{2}$/, \"Invalid time format\").optional(),\n  workingHoursEnd: z.string().regex(/^\\d{2}:\\d{2}$/, \"Invalid time format\").optional(),\n  maxAdvanceBookingDays: z.number().min(1).max(90).optional(),\n});\n\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type CreateAppointmentData = z.infer<typeof createAppointmentSchema>;\nexport type UpdateAppointmentData = z.infer<typeof updateAppointmentSchema>;\n\nexport type BlockedSlot = typeof blockedSlots.$inferSelect;\nexport type InsertBlockedSlot = z.infer<typeof insertBlockedSlotSchema>;\nexport type CreateBlockedSlotData = z.infer<typeof createBlockedSlotSchema>;\n\nexport type AppointmentSettings = typeof appointmentSettings.$inferSelect;\nexport type UpdateAppointmentSettingsData = z.infer<typeof updateAppointmentSettingsSchema>;\n","size_bytes":20122},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 240 5% 10%;\n\n  --border: 240 6% 88%;\n\n  --card: 240 5% 98%;\n\n  --card-foreground: 240 5% 10%;\n\n  --card-border: 240 6% 93%;\n\n  --sidebar: 240 5% 96%;\n\n  --sidebar-foreground: 240 5% 10%;\n\n  --sidebar-border: 240 6% 91%;\n\n  --sidebar-primary: 165 75% 28%;\n\n  --sidebar-primary-foreground: 165 75% 97%;\n\n  --sidebar-accent: 240 5% 92%;\n\n  --sidebar-accent-foreground: 240 5% 20%;\n\n  --sidebar-ring: 165 75% 28%;\n\n  --popover: 240 5% 94%;\n\n  --popover-foreground: 240 5% 10%;\n\n  --popover-border: 240 6% 89%;\n\n  --primary: 165 75% 28%;\n\n  --primary-foreground: 165 75% 97%;\n\n  --secondary: 240 5% 90%;\n\n  --secondary-foreground: 240 5% 18%;\n\n  --muted: 240 8% 92%;\n\n  --muted-foreground: 240 5% 35%;\n\n  --accent: 165 12% 88%;\n\n  --accent-foreground: 165 60% 18%;\n\n  --destructive: 0 72% 32%;\n\n  --destructive-foreground: 0 72% 97%;\n\n  --input: 240 8% 75%;\n  --ring: 165 75% 28%;\n  --chart-1: 165 75% 28%;\n  --chart-2: 35 85% 45%;\n  --chart-3: 200 75% 35%;\n  --chart-4: 280 65% 40%;\n  --chart-5: 15 70% 42%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: ui-monospace, Menlo, Monaco, 'Courier New', monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 6% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 6% 10% / 0.08);\n  --shadow-sm: 0px 1px 2px 0px hsl(240 6% 10% / 0.06), 0px 1px 3px 0px hsl(240 6% 10% / 0.10);\n  --shadow: 0px 1px 3px 0px hsl(240 6% 10% / 0.10), 0px 1px 2px -1px hsl(240 6% 10% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(240 6% 10% / 0.10), 0px 2px 4px -2px hsl(240 6% 10% / 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsl(240 6% 10% / 0.10), 0px 4px 6px -4px hsl(240 6% 10% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(240 6% 10% / 0.10), 0px 8px 10px -6px hsl(240 6% 10% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 6% 10% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 5% 8%;\n\n  --foreground: 240 5% 95%;\n\n  --border: 240 5% 18%;\n\n  --card: 240 5% 10%;\n\n  --card-foreground: 240 5% 95%;\n\n  --card-border: 240 5% 15%;\n\n  --sidebar: 240 5% 12%;\n\n  --sidebar-foreground: 240 5% 95%;\n\n  --sidebar-border: 240 5% 17%;\n\n  --sidebar-primary: 165 75% 28%;\n\n  --sidebar-primary-foreground: 165 75% 97%;\n\n  --sidebar-accent: 240 5% 16%;\n\n  --sidebar-accent-foreground: 240 5% 90%;\n\n  --sidebar-ring: 165 75% 40%;\n\n  --popover: 240 5% 14%;\n\n  --popover-foreground: 240 5% 95%;\n\n  --popover-border: 240 5% 19%;\n\n  --primary: 165 75% 28%;\n\n  --primary-foreground: 165 75% 97%;\n\n  --secondary: 240 5% 18%;\n\n  --secondary-foreground: 240 5% 92%;\n\n  --muted: 240 8% 16%;\n\n  --muted-foreground: 240 5% 70%;\n\n  --accent: 165 12% 20%;\n\n  --accent-foreground: 165 60% 88%;\n\n  --destructive: 0 72% 32%;\n\n  --destructive-foreground: 0 72% 97%;\n\n  --input: 240 8% 30%;\n  --ring: 165 75% 40%;\n  --chart-1: 165 75% 65%;\n  --chart-2: 35 85% 70%;\n  --chart-3: 200 75% 65%;\n  --chart-4: 280 65% 70%;\n  --chart-5: 15 70% 68%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.35), 0px 1px 3px 0px hsl(0 0% 0% / 0.45);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.45), 0px 1px 2px -1px hsl(0 0% 0% / 0.45);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.45), 0px 2px 4px -2px hsl(0 0% 0% / 0.45);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.45), 0px 4px 6px -4px hsl(0 0% 0% / 0.45);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.45), 0px 8px 10px -6px hsl(0 0% 0% / 0.45);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.60);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Logo floating animation */\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px) rotate(0deg);\n    }\n    25% {\n      transform: translateY(-4px) rotate(2deg);\n    }\n    50% {\n      transform: translateY(-8px) rotate(0deg);\n    }\n    75% {\n      transform: translateY(-4px) rotate(-2deg);\n    }\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n}","size_bytes":11571},"client/src/components/examples/PriceBadge.tsx":{"content":"import PriceBadge from '../PriceBadge';\n\nexport default function PriceBadgeExample() {\n  return (\n    <div className=\"p-6 max-w-md\">\n      <PriceBadge \n        priceMin={80000}\n        priceMax={200000}\n        lastUpdated={new Date().toISOString()}\n      />\n    </div>\n  );\n}\n","size_bytes":277},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/lib/birdsData.ts":{"content":"import type { Bird } from \"@shared/schema\";\nimport blueGoldMacaw from '@assets/blue-gold-macaw.jpg_1761290156282.jpeg';\nimport greenWingedMacaw from '@assets/green-wing-macaw_1761290156281.png';\nimport harlequinMacaw from '@assets/harlequin-macaw_1761290156280.jpg';\nimport scarletMacaw from '@assets/WhatsApp Image 2025-10-24 at 15.11.30_1761298928539.jpeg';\nimport umbrellaCockatoo from '@assets/umbrella-cockatoo_1761290156275.jpeg';\nimport moluccanCockatoo from '@assets/moluccan-cockatoo_1761290156278.jpeg';\nimport africanGrey from '@assets/african-grey_1761290156279.jpg';\nimport amazonParrot from '@assets/amazon12_1761290156276.jpeg';\nimport whiteBelliedCaique from '@assets/generated_images/White-bellied_Caique_parrot_portrait_72edcfff.png';\nimport blackHeadedCaique from '@assets/generated_images/Black-headed_Caique_parrot_portrait_c6f1ed9f.png';\nimport blueEyedCockatoo from '@assets/blue-eyed-cockatoo_1761307694686.png';\nimport sulphurCrestedCockatoo from '@assets/generated_images/Sulphur-crested_Cockatoo_portrait_9b831e58.png';\n\nexport const birdsData: Bird[] = [\n  {\n    id: \"1\",\n    name: \"Blue-and-Gold Macaw\",\n    scientificName: \"\",\n    slug: \"blue-gold-macaw\",\n    image: blueGoldMacaw,\n    size: \"large\",\n    noiseLevel: \"loud\",\n    traits: [\"vibrant\", \"free-flying\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"60-70 years\",\n    origin: \"South America (Brazil, Bolivia, Paraguay)\",\n    behavior: \"Known for their vibrant spirit and affectionate nature, Blue & Gold Macaws are highly social parrots that thrive on interaction and mental stimulation. They are intelligent, playful, and form deep bonds with their families, making them wonderful lifelong companions.\",\n    diet: \"A balanced diet supports their radiant colors and lively energy. They thrive on high-quality pellets, nuts, seeds, fresh fruits like mango and papaya, and a variety of vegetables. Fresh water should always be available.\",\n    humanCompatibility: \"Strikingly beautiful, affectionate, and interactive, the Blue & Gold Macaw makes a wonderful companion for experienced bird owners. They need consistent interaction and engagement to thrive as part of your family.\",\n    priceMin: 185000,\n    priceMax: 250000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Highly intelligent and trainable\",\n      \"Dazzling golden-yellow chest and cobalt wings\",\n      \"Can learn to mimic words and sounds\",\n      \"Forms strong bonds with family members\",\n      \"Long lifespan (60-70 years with proper care)\"\n    ],\n    consAsPet: [\n      \"Loud vocalizations\",\n      \"Requires very large cage or aviary space\",\n      \"Needs significant daily interaction\",\n      \"Can be destructive if bored\",\n      \"Requires experienced owner\"\n    ],\n    careChecklist: [\n      \"Provide spacious aviary at least 4-5 feet wide\",\n      \"Fresh food and water daily\",\n      \"Multiple hours of interaction and enrichment\",\n      \"Regular toy rotation for mental stimulation\",\n      \"Weekly cage deep cleaning\",\n      \"Regular veterinary checkups\",\n      \"Natural light and moderate temperatures\"\n    ]\n  },\n  {\n    id: \"2\",\n    name: \"Green-winged Macaw\",\n    scientificName: \"Ara chloropterus\",\n    slug: \"green-winged-macaw\",\n    image: greenWingedMacaw,\n    size: \"large\",\n    noiseLevel: \"loud\",\n    traits: [\"vibrant\", \"free-flying\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"60-80 years\",\n    origin: \"South America (Amazon Basin)\",\n    behavior: \"Often celebrated as the 'Gentle Giant,' the Green Wing Macaw is admired for its calm, loving, and intelligent nature. Known as one of the most affectionate macaws, it bonds deeply with families, showing both loyalty and playfulness. These magnificent birds enjoy interaction and bonding with people of all ages.\",\n    diet: \"They thrive on a diet of premium pellets, fresh fruits, leafy greens, wholesome vegetables, and nuts. Occasional treats like walnuts or pecans enrich their diet and provide essential variety. Fresh water should always be available.\",\n    humanCompatibility: \"Elegant, affectionate, and full of personality, the Green Wing Macaw is a perfect choice for families seeking a majestic parrot with a gentle temperament. With consistent interaction, they reward you with loyalty and charm for decades.\",\n    priceMin: 400000,\n    priceMax: 470000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Gentle and calm temperament despite large size\",\n      \"Brilliant crimson plumage with green and blue wings\",\n      \"Very loyal and affectionate with families\",\n      \"Highly intelligent and trainable\",\n      \"Exceptional longevity (60-80 years)\"\n    ],\n    consAsPet: [\n      \"Loud vocalizations\",\n      \"Requires expert-level care and commitment\",\n      \"High initial and maintenance costs\",\n      \"Needs extremely large living space\",\n      \"Long lifespan requires generational planning\"\n    ],\n    careChecklist: [\n      \"Aviary or cage at least 4-5 feet wide\",\n      \"Daily fresh fruits, vegetables, and premium pellets\",\n      \"Multiple hours of supervised interaction\",\n      \"Sturdy perches, chew toys, and climbing ropes\",\n      \"Free-flight time for exercise\",\n      \"Regular veterinary care\",\n      \"Natural light and moderate temperatures\"\n    ]\n  },\n  {\n    id: \"3\",\n    name: \"Harlequin Macaw\",\n    scientificName: \"Ara hybrid (Blue-and-Gold × Green-winged)\",\n    slug: \"harlequin-macaw\",\n    image: harlequinMacaw,\n    size: \"large\",\n    noiseLevel: \"loud\",\n    traits: [\"vibrant\", \"free-flying\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"50-65 years\",\n    origin: \"Captive bred hybrid\",\n    behavior: \"The Harlequin Macaw is truly a living masterpiece, born from the majestic pairing of the Blue & Gold Macaw and the Green Wing Macaw. As a hybrid, it represents the best of both worlds — inheriting the affectionate, playful personality of the Blue & Gold, along with the calm, gentle nature of the Green Wing. Loved for their intelligence, charm, and dazzling looks, Harlequins are among the most captivating parrots a family can welcome.\",\n    diet: \"Keep your Harlequin glowing with health by offering a wholesome blend of premium pellets, crunchy nuts, fresh fruits, and a variety of vegetables. Occasional treats like almonds and pecans make mealtimes extra enriching. Fresh, clean water should always be available.\",\n    humanCompatibility: \"Breathtakingly colorful, intelligent, and affectionate, the Harlequin Macaw is the perfect combination of beauty and personality. With daily interaction, they provide years of laughter, companionship, and charm—making them an unforgettable feathered friend.\",\n    priceMin: 375000,\n    priceMax: 450000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Hybrid vigor (often healthier and stronger)\",\n      \"Breathtaking blend of golden, blue, red, and green plumage\",\n      \"Playful and entertaining personality\",\n      \"Intelligent and good talkers\",\n      \"Each bird is completely unique in coloration\"\n    ],\n    consAsPet: [\n      \"High initial cost\",\n      \"Loud vocalizations\",\n      \"Requires expert handling and experience\",\n      \"Large space requirements\",\n      \"Strong beak requires durable toys\"\n    ],\n    careChecklist: [\n      \"Large aviary with climbing space\",\n      \"Premium pelleted diet with fresh supplements\",\n      \"Daily training and enrichment activities\",\n      \"Variety of durable, chewable toys\",\n      \"Regular exercise and free-flight time\",\n      \"Routine veterinary checkups\",\n      \"Socialization with multiple family members\"\n    ]\n  },\n  {\n    id: \"4\",\n    name: \"Scarlet Macaw\",\n    scientificName: \"\",\n    slug: \"scarlet-macaw\",\n    image: scarletMacaw,\n    size: \"large\",\n    noiseLevel: \"loud\",\n    traits: [\"vibrant\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"60-80 years\",\n    origin: \"Central and South America\",\n    behavior: \"Known for their elegance and charm, Scarlet Macaws are intelligent and affectionate parrots. With dazzling scarlet-red feathers accented by vibrant blues and golden yellows, they are truly living works of art. They bond deeply with their families, offering warmth and joy. Playful and engaging, they brighten any room with their loyalty and entertainment.\",\n    diet: \"A wholesome mix of fresh fruits, leafy greens, nuts, and premium pellets keeps their radiant colors glowing. Their nutritional needs are easy to meet, making daily care simple and rewarding. Fresh water should always be available.\",\n    humanCompatibility: \"Choosing a Scarlet Macaw means welcoming pure beauty and joy into your life. Among them, 'Triple Band' Scarlet Macaws are the most prized, showcasing three golden-yellow wing bands. These rare birds symbolize prestige, making them living jewels and lifelong companions.\",\n    priceMin: 375000,\n    priceMax: 450000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Breathtaking scarlet-red plumage with blue and yellow accents\",\n      \"Highly intelligent and affectionate\",\n      \"Forms deep bonds with family members\",\n      \"Triple Band variants are highly prized\",\n      \"Exceptional longevity (60-80 years)\"\n    ],\n    consAsPet: [\n      \"Loud vocalizations\",\n      \"Requires spacious aviary or cage\",\n      \"Needs daily interaction and mental stimulation\",\n      \"Strong beak requires durable toys\",\n      \"High initial cost\"\n    ],\n    careChecklist: [\n      \"Spacious cage or aviary with sturdy perches\",\n      \"Premium pellets with fresh fruits and vegetables daily\",\n      \"Multiple hours of interaction and enrichment\",\n      \"Regular free-flight time for exercise\",\n      \"Durable chewable toys for mental stimulation\",\n      \"Regular veterinary checkups\",\n      \"Natural light and moderate temperatures\"\n    ]\n  },\n  {\n    id: \"5\",\n    name: \"Umbrella Cockatoo\",\n    scientificName: \"Cacatua alba\",\n    slug: \"umbrella-cockatoo\",\n    image: umbrellaCockatoo,\n    size: \"medium\",\n    noiseLevel: \"loud\",\n    traits: [\"talking\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"50-70 years\",\n    origin: \"Indonesia (Moluccan Islands)\",\n    behavior: \"Native to Indonesia, Umbrella Cockatoos are named for their large crests that fan open like an umbrella. With snowy white plumage and expressive personalities, they are affectionate parrots that form strong human bonds. Known as 'velcro birds' for their clingy affection, they are playful, intelligent, and thrive on attention.\",\n    diet: \"A diet of high-quality pellets, seeds, nuts, fresh fruits, and vegetables is essential. Avoid fatty foods, avocado, and chocolate. Calcium supplements are especially helpful for females. Fresh water should always be available.\",\n    humanCompatibility: \"These birds require constant companionship and are best suited for owners with flexible schedules who can spend hours daily with them. While they can be loud at times, their loyalty makes them rewarding companions.\",\n    priceMin: 185000,\n    priceMax: 250000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Extremely affectionate and cuddly\",\n      \"Beautiful snowy white plumage\",\n      \"Impressive crest display\",\n      \"Highly intelligent and trainable\",\n      \"Forms deep bonds with owners\"\n    ],\n    consAsPet: [\n      \"Prone to separation anxiety\",\n      \"Very loud vocalizations\",\n      \"Destructive behavior when bored\",\n      \"Demands constant attention and companionship\",\n      \"Produces feather dust\"\n    ],\n    careChecklist: [\n      \"Spacious cage or aviary with strong bars\",\n      \"Daily cuddle and play time (multiple hours)\",\n      \"Chewable toys and climbing structures\",\n      \"Warm, well-lit environment with family presence\",\n      \"Consistent daily routine\",\n      \"Regular bathing or misting\",\n      \"Routine health checkups\"\n    ]\n  },\n  {\n    id: \"6\",\n    name: \"Moluccan Cockatoo\",\n    scientificName: \"Cacatua moluccensis\",\n    slug: \"moluccan-cockatoo\",\n    image: moluccanCockatoo,\n    size: \"medium\",\n    noiseLevel: \"loud\",\n    traits: [\"talking\", \"vibrant\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"60-70 years\",\n    origin: \"Indonesia (Seram Islands)\",\n    behavior: \"Native to Indonesia's Seram Islands, Moluccan Cockatoos are famed for their peach-pink feathers and dramatic crests. They are affectionate, intelligent, and strikingly beautiful. Playful and loving, they can mimic human speech but also demand constant engagement and stimulation.\",\n    diet: \"They thrive on high-quality pellets, nuts, seeds, and fresh fruits. Avoid avocado, onions, and chocolate. Nuts are best used as training rewards. Fresh water should always be available.\",\n    humanCompatibility: \"Moluccans require constant companionship and are best for experienced owners with time to dedicate daily. With good care and enrichment, they make incredibly loving lifelong companions.\",\n    priceMin: 385000,\n    priceMax: 470000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Incredibly loving and affectionate\",\n      \"Beautiful peach-pink coloring with dramatic crest\",\n      \"Exceptional longevity (60-70 years)\",\n      \"Very intelligent and can mimic speech\",\n      \"Forms deep emotional bonds\"\n    ],\n    consAsPet: [\n      \"Very loud vocalizations\",\n      \"Severe separation anxiety if left alone\",\n      \"High maintenance and demanding\",\n      \"Requires experienced handler\",\n      \"Needs constant mental stimulation\"\n    ],\n    careChecklist: [\n      \"Very large aviary with sturdy bars\",\n      \"Multiple hours of daily companionship\",\n      \"High-quality pellets with portion control\",\n      \"Destructible toys for chewing instincts\",\n      \"Consistent daily routine and engagement\",\n      \"Regular veterinary checkups\",\n      \"Mental enrichment and training\"\n    ]\n  },\n  {\n    id: \"7\",\n    name: \"African Grey Parrot\",\n    scientificName: \"\",\n    slug: \"african-grey-parrot\",\n    image: africanGrey,\n    size: \"small\",\n    noiseLevel: \"moderate\",\n    traits: [\"talking\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"40-60 years\",\n    origin: \"West and Central Africa\",\n    behavior: \"Highly intelligent, excellent talker, needs mental stimulation. Considered one of the most intelligent bird species.\",\n    diet: \"Pellets, fruits, leafy greens, occasional nuts. Calcium-rich diet important for health.\",\n    humanCompatibility: \"Very bonded with routines; needs experienced owner who can provide consistency and mental enrichment.\",\n    priceMin: 65000,\n    priceMax: 120000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Exceptional intelligence\",\n      \"Outstanding talking ability\",\n      \"Calmer than large parrots\",\n      \"Can learn extensive vocabulary\",\n      \"Forms deep emotional bonds\"\n    ],\n    consAsPet: [\n      \"Prone to anxiety and plucking\",\n      \"Needs strict routine\",\n      \"Can be one-person birds\",\n      \"Requires constant mental stimulation\",\n      \"Sensitive to environmental changes\"\n    ],\n    careChecklist: [\n      \"Medium to large cage\",\n      \"Consistent daily schedule\",\n      \"Puzzle toys and foraging activities\",\n      \"Fresh vegetables and pellets daily\",\n      \"Calcium supplements\",\n      \"Regular training sessions\",\n      \"Annual vet checkups with bloodwork\"\n    ]\n  },\n  {\n    id: \"8\",\n    name: \"Blue-fronted Amazon\",\n    scientificName: \"Amazona aestiva\",\n    slug: \"blue-fronted-amazon\",\n    image: amazonParrot,\n    size: \"small\",\n    noiseLevel: \"moderate\",\n    traits: [\"vibrant\", \"talking\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"50-70 years\",\n    origin: \"South America (Brazil, Argentina, Paraguay)\",\n    behavior: \"Playful, vocal, good mimics. Known for their entertaining personalities and singing abilities.\",\n    diet: \"Pellets, fruits, vegetables. They enjoy a varied diet and love foraging activities.\",\n    humanCompatibility: \"Great companions if socialized; can be territorial during breeding seasons. Best with experienced owners.\",\n    priceMin: 60000,\n    priceMax: 250000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Excellent talkers and singers\",\n      \"Entertaining and playful\",\n      \"Hardy and adaptable\",\n      \"Good family birds when socialized\",\n      \"Long-lived companions\"\n    ],\n    consAsPet: [\n      \"Can be loud, especially morning/evening\",\n      \"Territorial during breeding season\",\n      \"May become aggressive if not trained\",\n      \"Requires consistent boundaries\",\n      \"Can be nippy\"\n    ],\n    careChecklist: [\n      \"Spacious cage for activity\",\n      \"Daily fresh food and water\",\n      \"Socialization with all family members\",\n      \"Training from young age\",\n      \"Foraging toys and activities\",\n      \"Regular wing and nail trimming\",\n      \"Annual health examinations\"\n    ]\n  },\n  {\n    id: \"9\",\n    name: \"White-bellied Caique\",\n    scientificName: \"Pionites leucogaster\",\n    slug: \"white-bellied-caique\",\n    image: whiteBelliedCaique,\n    size: \"small\",\n    noiseLevel: \"moderate\",\n    traits: [\"vibrant\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"25-40 years\",\n    origin: \"South America (Brazil, Bolivia, Peru)\",\n    behavior: \"Known as the 'clowns of the parrot world,' White-bellied Caiques are extremely energetic, playful, and mischievous. They are fearless, curious, and constantly active—hopping, climbing, and exploring everything. These entertaining parrots enjoy lying on their backs, 'wrestling' with toys, and surfing on towels. They are social and affectionate, bonding strongly with their owners and demanding daily interaction.\",\n    diet: \"High-quality pellets form the base of their diet, supplemented with fresh vegetables daily like spinach, carrots, broccoli, peas, and kale. Fresh fruits in moderation (apples, berries, mango, grapes), small amounts of soaked seeds, and bird-safe branches for chewing. Fresh, clean water should always be available. Feed twice daily—morning and late afternoon.\",\n    humanCompatibility: \"White-bellied Caiques are incredibly entertaining and affectionate companions that require significant time, energy, and commitment. Best for experienced owners who have 2+ hours daily for interaction and can provide consistent mental and physical stimulation. They can be nippy when over-excited and need proper training from a young age.\",\n    priceMin: 120000,\n    priceMax: 180000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Extremely playful and entertaining\",\n      \"Beautiful colorful plumage (white belly, orange head, green wings)\",\n      \"Moderate noise level (quieter than macaws/cockatoos)\",\n      \"Highly intelligent and can learn tricks\",\n      \"Very active and fun to watch\"\n    ],\n    consAsPet: [\n      \"Can bite when over-excited\",\n      \"Requires constant stimulation to prevent boredom\",\n      \"Very messy (shred toys, toss food)\",\n      \"Not great talkers (limited speech ability)\",\n      \"Can be territorial in the home\"\n    ],\n    careChecklist: [\n      \"Spacious cage with horizontal space for climbing\",\n      \"Minimum 2 hours daily out-of-cage time\",\n      \"Plenty of destructible toys (rotate frequently)\",\n      \"Fresh vegetables and pellets daily\",\n      \"Daily bathing opportunities (they love water)\",\n      \"Bird-proof environment (they're fearless explorers)\",\n      \"Regular vet checkups\"\n    ]\n  },\n  {\n    id: \"10\",\n    name: \"Black-headed Caique\",\n    scientificName: \"Pionites melanocephalus\",\n    slug: \"black-headed-caique\",\n    image: blackHeadedCaique,\n    size: \"small\",\n    noiseLevel: \"moderate\",\n    traits: [\"vibrant\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"20-40 years\",\n    origin: \"South America (Northern Amazon Basin)\",\n    behavior: \"Famous as the 'clown of the parrot world,' Black-headed Caiques are highly playful, energetic, and entertaining. They are constantly on the move—hopping, climbing, and performing acrobatic tricks. Known for their clownish behavior like 'surfing' (sliding on their back), hopping like kangaroos, and wrestling with toys. They are intelligent, curious, and form strong bonds with owners, though they can be nippy when testing boundaries.\",\n    diet: \"Core diet should be high-quality vitamin and mineral-rich pellets. Supplement with fresh fruits (apples, pears, oranges, grapes, mango, banana), fresh vegetables (corn, carrots, sweet potato, broccoli, spinach, peas), and soaked or sprouted seeds. Feed twice daily—morning and late afternoon. They love fruit and are messy eaters, so regular cage cleaning is essential.\",\n    humanCompatibility: \"Black-headed Caiques are delightful, high-energy parrots that reward committed owners with years of laughter, affection, and entertainment. Best for experienced bird owners who enjoy active, playful, interactive pets and have time for daily attention and enrichment. Not ideal for first-time owners due to their stubborn, strong-willed nature.\",\n    priceMin: 120000,\n    priceMax: 180000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Extremely entertaining and acrobatic\",\n      \"Striking appearance (black head, white belly, green wings, orange cheeks)\",\n      \"Affectionate and forms strong bonds\",\n      \"Intelligent and learns tricks easily\",\n      \"Moderate noise level compared to larger parrots\"\n    ],\n    consAsPet: [\n      \"Can be nippy and bite-prone\",\n      \"Territorial and stubborn\",\n      \"Requires firm, consistent training\",\n      \"Limited talking ability\",\n      \"High energy requires constant mental stimulation\"\n    ],\n    careChecklist: [\n      \"Large cage with 3/4 inch bar spacing\",\n      \"Multiple wooden perches for gnawing\",\n      \"Daily enrichment with destructible toys\",\n      \"Fresh pellets, fruits, and vegetables daily\",\n      \"Regular toy rotation (they destroy them quickly)\",\n      \"Worming every 6 months\",\n      \"Annual avian veterinary checkups\"\n    ]\n  },\n  {\n    id: \"11\",\n    name: \"Blue-eyed Cockatoo\",\n    scientificName: \"Cacatua ophthalmica\",\n    slug: \"blue-eyed-cockatoo\",\n    image: blueEyedCockatoo,\n    size: \"medium\",\n    noiseLevel: \"moderate\",\n    traits: [\"intelligent\", \"human-bonding\"],\n    lifespan: \"40-50 years\",\n    origin: \"Papua New Guinea (New Britain, New Ireland)\",\n    behavior: \"Blue-eyed Cockatoos are gentle, intelligent, and affectionate parrots. They are one of the friendliest and calmest cockatoo species, bonding strongly with their families while displaying playful and curious personalities. They thrive on social interaction and enjoy performing tricks. Less noisy than other large cockatoos, they can mimic human speech in their own charming way.\",\n    diet: \"Their diet should include 75-80% high-quality cockatoo pellets and 20-25% fresh fruits and vegetables. Recommended foods include oranges, apples, celery, cabbage, and carrots. Small quantities of nuts (walnuts, almonds) as treats. Calcium-rich foods are particularly important for their health. Fresh water should be changed daily.\",\n    humanCompatibility: \"Blue-eyed Cockatoos are stunning, affectionate companions that form deep bonds with owners. They require several hours of daily interaction and are high maintenance. Best suited for experienced bird owners with significant time to dedicate, as neglect leads to feather plucking, screaming, and destructive behavior. A lifelong commitment spanning 40-50 years.\",\n    priceMin: 250000,\n    priceMax: 350000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"One of the calmest and friendliest cockatoo species\",\n      \"Beautiful white plumage with distinctive blue eye rings\",\n      \"Less noisy than other large cockatoos\",\n      \"Highly intelligent and enjoys tricks\",\n      \"Very affectionate and cuddly\"\n    ],\n    consAsPet: [\n      \"High maintenance and demanding\",\n      \"Requires several hours of daily interaction\",\n      \"Expensive to purchase (rare species)\",\n      \"Prone to feather plucking if neglected\",\n      \"Not suitable for first-time bird owners\"\n    ],\n    careChecklist: [\n      \"Very large cage or aviary (room to spread wings)\",\n      \"Daily enrichment with toys and climbing structures\",\n      \"High-quality pellets and fresh produce daily\",\n      \"Regular bathing or misting for feather health\",\n      \"Multiple hours of social interaction daily\",\n      \"Annual avian veterinary checkups\",\n      \"Adequate sunlight exposure\"\n    ]\n  },\n  {\n    id: \"12\",\n    name: \"Sulphur-crested Cockatoo\",\n    scientificName: \"Cacatua galerita\",\n    slug: \"sulphur-crested-cockatoo\",\n    image: sulphurCrestedCockatoo,\n    size: \"large\",\n    noiseLevel: \"loud\",\n    traits: [\"vibrant\", \"intelligent\", \"human-bonding\"],\n    lifespan: \"65-80 years\",\n    origin: \"Australia, Papua New Guinea, Indonesia\",\n    behavior: \"Sulphur-crested Cockatoos are highly social, playful, and intelligent parrots with iconic white plumage and vibrant yellow crests. They are cheeky, mischievous, and affectionate, forming deep bonds with their owners. Known for their loud vocalizations, they can mimic human speech and sounds. These intelligent birds have learning capacity comparable to a 1-2 year old human and require daily attention and mental stimulation.\",\n    diet: \"In captivity, provide high-quality cockatoo-specific pellets as the base diet, supplemented with fresh vegetables (carrots, cabbage, corn, leafy greens), fresh fruits in moderation (apples, oranges, grapes), and small amounts of seeds and nuts. Occasional cooked foods like rice, corn, and chicken. Provide cuttlebone for beak maintenance and calcium. Avoid monotonous diets and create foraging opportunities.\",\n    humanCompatibility: \"Sulphur-crested Cockatoos are stunning, intelligent companions for experienced bird owners prepared for a 65-80 year commitment. They require 3-4 hours minimum of daily out-of-cage time and social interaction. Very loud and not suitable for apartment living. Best for owners with time, patience, and ability to provide extensive daily care and mental enrichment.\",\n    priceMin: 150000,\n    priceMax: 250000,\n    lastUpdated: new Date().toISOString(),\n    prosAsPet: [\n      \"Majestic appearance with iconic yellow crest\",\n      \"Highly intelligent (comparable to toddler)\",\n      \"Very affectionate and cuddly\",\n      \"Can learn to mimic speech and sounds\",\n      \"Exceptional longevity (65-80 years)\"\n    ],\n    consAsPet: [\n      \"Very loud vocalizations (not suitable for apartments)\",\n      \"Extremely demanding (requires 3-4+ hours daily)\",\n      \"Prone to feather plucking from boredom or stress\",\n      \"Can be destructive if not properly stimulated\",\n      \"Multi-generational commitment (can outlive owners)\"\n    ],\n    careChecklist: [\n      \"Very large cage allowing full wing spread\",\n      \"Outdoor aviary recommended for fresh air and sunlight\",\n      \"3-4 hours minimum daily out-of-cage time\",\n      \"Foraging toys, puzzles, and chewing toys\",\n      \"Regular bathing or misting\",\n      \"High-quality pellets with fresh produce daily\",\n      \"Annual veterinary checkups with avian specialist\"\n    ]\n  }\n];\n","size_bytes":26865},"client/src/components/FilterChips.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { X, ChevronDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\n\nexport interface Filters {\n  traits: string[];\n  priceRange: string | null;\n  sizes: string[];\n}\n\ninterface FilterChipsProps {\n  filters: Filters;\n  onFilterChange: (filters: Filters) => void;\n}\n\nconst traitOptions = [\n  { value: \"vibrant\", label: \"Vibrant\" },\n  { value: \"free-flying\", label: \"Free Flying\" },\n  { value: \"talking\", label: \"Talking\" },\n  { value: \"intelligent\", label: \"Intelligent\" },\n  { value: \"human-bonding\", label: \"Human Bonding\" },\n];\n\nconst sizeOptions = [\n  { value: \"small\", label: \"Small\" },\n  { value: \"medium\", label: \"Medium\" },\n  { value: \"large\", label: \"Large\" },\n];\n\nconst priceRangeOptions = [\n  { label: \"Under ₹1L\", value: \"0-100000\" },\n  { label: \"₹1L - ₹2L\", value: \"100000-200000\" },\n  { label: \"₹2L - ₹3L\", value: \"200000-300000\" },\n  { label: \"Above ₹3L\", value: \"300000-999999999\" },\n];\n\nexport default function FilterChips({ filters, onFilterChange }: FilterChipsProps) {\n  const [openSection, setOpenSection] = useState<string | null>(null);\n\n  const handleSectionToggle = (section: string) => {\n    setOpenSection(openSection === section ? null : section);\n  };\n\n  const toggleTrait = (trait: string) => {\n    const newTraits = filters.traits.includes(trait)\n      ? filters.traits.filter(t => t !== trait)\n      : [...filters.traits, trait];\n    onFilterChange({ ...filters, traits: newTraits });\n  };\n\n  const toggleSize = (size: string) => {\n    const newSizes = filters.sizes.includes(size)\n      ? filters.sizes.filter(s => s !== size)\n      : [...filters.sizes, size];\n    onFilterChange({ ...filters, sizes: newSizes });\n  };\n\n  const togglePriceRange = (range: string) => {\n    onFilterChange({ \n      ...filters, \n      priceRange: filters.priceRange === range ? null : range \n    });\n  };\n\n  const clearAll = () => {\n    onFilterChange({ traits: [], priceRange: null, sizes: [] });\n  };\n\n  const hasActiveFilters = filters.traits.length > 0 || filters.priceRange !== null || filters.sizes.length > 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-xl font-bold text-foreground\">Filter Birds</h3>\n        {hasActiveFilters && (\n          <button\n            onClick={clearAll}\n            className=\"text-sm text-primary hover:text-primary/80 font-medium transition-colors flex items-center gap-1\"\n            data-testid=\"button-clear-filters\"\n          >\n            <X className=\"h-4 w-4\" />\n            Clear all\n          </button>\n        )}\n      </div>\n\n      <div className=\"space-y-4\">\n        <Collapsible open={openSection === 'traits'} onOpenChange={() => handleSectionToggle('traits')} className=\"border-b pb-4\">\n          <CollapsibleTrigger className=\"flex items-center justify-between w-full hover-elevate p-2 rounded-md\" data-testid=\"toggle-traits\">\n            <p className=\"text-sm font-semibold text-foreground uppercase tracking-wide\">Bird Traits</p>\n            <ChevronDown className={`h-4 w-4 text-muted-foreground transition-transform ${openSection === 'traits' ? 'rotate-180' : ''}`} />\n          </CollapsibleTrigger>\n          <CollapsibleContent className=\"pt-3\">\n            <div className=\"flex flex-col gap-2\">\n              {traitOptions.map((trait) => (\n                <label\n                  key={trait.value}\n                  className=\"flex items-center gap-2 cursor-pointer hover-elevate p-2 rounded-md transition-colors\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={filters.traits.includes(trait.value)}\n                    onChange={() => toggleTrait(trait.value)}\n                    className=\"w-4 h-4 text-primary rounded border-gray-300 focus:ring-primary\"\n                    data-testid={`filter-trait-${trait.value}`}\n                  />\n                  <span className=\"text-sm text-foreground\">{trait.label}</span>\n                </label>\n              ))}\n            </div>\n          </CollapsibleContent>\n        </Collapsible>\n\n        <Collapsible open={openSection === 'size'} onOpenChange={() => handleSectionToggle('size')} className=\"border-b pb-4\">\n          <CollapsibleTrigger className=\"flex items-center justify-between w-full hover-elevate p-2 rounded-md\" data-testid=\"toggle-size\">\n            <p className=\"text-sm font-semibold text-foreground uppercase tracking-wide\">Size</p>\n            <ChevronDown className={`h-4 w-4 text-muted-foreground transition-transform ${openSection === 'size' ? 'rotate-180' : ''}`} />\n          </CollapsibleTrigger>\n          <CollapsibleContent className=\"pt-3\">\n            <div className=\"flex flex-col gap-2\">\n              {sizeOptions.map((size) => (\n                <label\n                  key={size.value}\n                  className=\"flex items-center gap-2 cursor-pointer hover-elevate p-2 rounded-md transition-colors\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={filters.sizes.includes(size.value)}\n                    onChange={() => toggleSize(size.value)}\n                    className=\"w-4 h-4 text-primary rounded border-gray-300 focus:ring-primary\"\n                    data-testid={`filter-size-${size.value}`}\n                  />\n                  <span className=\"text-sm text-foreground\">{size.label}</span>\n                </label>\n              ))}\n            </div>\n          </CollapsibleContent>\n        </Collapsible>\n\n        <Collapsible open={openSection === 'price'} onOpenChange={() => handleSectionToggle('price')} className=\"pt-2\">\n          <CollapsibleTrigger className=\"flex items-center justify-between w-full hover-elevate p-2 rounded-md\" data-testid=\"toggle-price\">\n            <p className=\"text-sm font-semibold text-foreground uppercase tracking-wide\">Price Range</p>\n            <ChevronDown className={`h-4 w-4 text-muted-foreground transition-transform ${openSection === 'price' ? 'rotate-180' : ''}`} />\n          </CollapsibleTrigger>\n          <CollapsibleContent className=\"pt-3\">\n            <div className=\"flex flex-col gap-2\">\n              {priceRangeOptions.map((range) => (\n                <label\n                  key={range.value}\n                  className=\"flex items-center gap-2 cursor-pointer hover-elevate p-2 rounded-md transition-colors\"\n                >\n                  <input\n                    type=\"radio\"\n                    checked={filters.priceRange === range.value}\n                    onChange={() => togglePriceRange(range.value)}\n                    className=\"w-4 h-4 text-primary border-gray-300 focus:ring-primary\"\n                    data-testid={`filter-price-${range.value}`}\n                  />\n                  <span className=\"text-sm text-foreground\">{range.label}</span>\n                </label>\n              ))}\n            </div>\n          </CollapsibleContent>\n        </Collapsible>\n\n        {hasActiveFilters && (\n          <div className=\"pt-4 border-t\">\n            <p className=\"text-xs font-medium text-muted-foreground mb-2\">Active Filters:</p>\n            <div className=\"flex flex-wrap gap-2\">\n              {filters.traits.map((trait) => (\n                <Badge key={trait} variant=\"default\" className=\"text-xs\">\n                  {traitOptions.find(t => t.value === trait)?.label}\n                  <button\n                    onClick={() => toggleTrait(trait)}\n                    className=\"ml-1 hover:text-destructive\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </button>\n                </Badge>\n              ))}\n              {filters.sizes.map((size) => (\n                <Badge key={size} variant=\"default\" className=\"text-xs\">\n                  {sizeOptions.find(s => s.value === size)?.label}\n                  <button\n                    onClick={() => toggleSize(size)}\n                    className=\"ml-1 hover:text-destructive\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </button>\n                </Badge>\n              ))}\n              {filters.priceRange && (\n                <Badge variant=\"default\" className=\"text-xs\">\n                  {priceRangeOptions.find(r => r.value === filters.priceRange)?.label}\n                  <button\n                    onClick={() => togglePriceRange(filters.priceRange!)}\n                    className=\"ml-1 hover:text-destructive\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </button>\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8817},"client/src/components/DisabledPromotionalSections.tsx":{"content":"/**\n * DISABLED PROMOTIONAL SECTIONS\n * \n * This file contains promotional sections that have been temporarily disabled from the homepage.\n * They can be re-enabled by copying the desired section back to client/src/pages/Home.tsx\n * \n * Sections included:\n * 1. Toys That Bring Joy (Bird Toys & Accessories)\n * 2. Comfort & Care (Bird Cages)\n * 3. Nutrition That Nurtures (Bird Food)\n * \n * To re-enable: Copy the section code and paste it in Home.tsx between the \n * \"Discover the Vibrant World\" section and the bird catalog section.\n */\n\n// SECTION 1: BIRD TOYS & ACCESSORIES\n// Copy this entire section block to re-enable\n/*\n      <section className=\"bg-muted/30 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"border-2 border-primary/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex flex-col md:flex-row items-center justify-between gap-6\">\n                <div className=\"flex-1 text-center md:text-left\">\n                  <div className=\"flex items-center justify-center md:justify-start gap-2 mb-3\">\n                    <Sparkles className=\"h-6 w-6 text-primary\" />\n                    <Heart className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <h2 className=\"text-2xl md:text-3xl font-bold text-foreground mb-3\">\n                    Toys That Bring Joy — Safe, Smart & Handcrafted for Your Feathered Family\n                  </h2>\n                  <p className=\"text-muted-foreground max-w-2xl\">\n                    Bird toys aren't just playthings — they're essential for your bird's happiness, health, and mental growth. Every toy must be safe, non-toxic, and free from harmful plastics or swallowable parts. The right toy keeps your bird active, curious, and emotionally balanced, while also showing how much you care.\n                    <br /><br />\n                    At Fancy Feathers, each toy is handcrafted with love and tested with care, designed to provide mental stimulation, physical exercise, and pure joy — for your bird and for you. Because a happy bird makes a happy home. 🪶💛\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Button\n                    size=\"lg\"\n                    className=\"bg-primary text-primary-foreground hover-elevate active-elevate-2\"\n                    onClick={() => {\n                      // Placeholder - toys catalog will be added later\n                      window.scrollTo({ top: 0, behavior: 'smooth' });\n                    }}\n                    data-testid=\"button-explore-toys\"\n                  >\n                    Explore Toys and Accessories\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n*/\n\n// SECTION 2: BIRD CAGES\n// Copy this entire section block to re-enable\n/*\n      <section className=\"bg-muted/30 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"border-2 border-primary/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex flex-col md:flex-row items-center justify-between gap-6\">\n                <div className=\"flex-1 text-center md:text-left\">\n                  <div className=\"flex items-center justify-center md:justify-start gap-2 mb-3\">\n                    <HomeIcon className=\"h-6 w-6 text-primary\" />\n                    <Heart className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <h2 className=\"text-2xl md:text-3xl font-bold text-foreground mb-3\">\n                    Comfort & Care — Thoughtfully Designed Bird Cages for Rest and Safety\n                  </h2>\n                  <p className=\"text-muted-foreground max-w-2xl\">\n                    At Fancy Feathers, we believe birds are meant to fly free and explore, not stay confined. However, a well-designed cage plays an important role as a safe feeding station and peaceful resting space, especially during the night or when supervision isn't possible.\n                    <br /><br />\n                    Our collection of cages is ergonomically crafted to provide comfort, freedom of movement, and easy navigation for your feathered friend — ideal for short resting periods. Each cage is easy to clean, durable, and built from premium-quality materials, carefully selected from the best global manufacturers.\n                    <br /><br />\n                    Because even when your bird is resting, it deserves comfort, safety, and care — just like home. 🪶💛\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Button\n                    size=\"lg\"\n                    className=\"bg-primary text-primary-foreground hover-elevate active-elevate-2\"\n                    onClick={() => {\n                      // Placeholder - cages catalog will be added later\n                      window.scrollTo({ top: 0, behavior: 'smooth' });\n                    }}\n                    data-testid=\"button-explore-cages\"\n                  >\n                    Explore Cage and resting station\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n*/\n\n// SECTION 3: BIRD FOOD & NUTRITION\n// Copy this entire section block to re-enable\n/*\n      <section className=\"bg-muted/30 py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"border-2 border-primary/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex flex-col md:flex-row items-center justify-between gap-6\">\n                <div className=\"flex-1 text-center md:text-left\">\n                  <div className=\"flex items-center justify-center md:justify-start gap-2 mb-3\">\n                    <Apple className=\"h-6 w-6 text-primary\" />\n                    <Heart className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <h2 className=\"text-2xl md:text-3xl font-bold text-foreground mb-3\">\n                    Nutrition That Nurtures — Premium Bird Food for Every Species & Stage\n                  </h2>\n                  <p className=\"text-muted-foreground max-w-2xl\">\n                    Balanced nutrition is the foundation of a healthy, happy bird. While fresh fruits and vegetables are essential, they often lack the complete vitamins, minerals, and supplements that birds need for long-term well-being. Every bird — depending on its species, age, and activity level — requires a unique diet plan to thrive.\n                    <br /><br />\n                    At Fancy Feathers, we've handpicked premium bird foods from the world's finest manufacturers, imported from the USA, Canada, and Germany, ensuring the highest standards of quality and safety. Each blend is carefully chosen to support your bird's immune health, feather growth, and vitality.\n                    <br /><br />\n                    When you receive your personalized diet chart, we also recommend the most suitable food brands and mixes tailored to your bird's needs — because good nutrition is not just feeding, it's nurturing. 🌿💛\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <Button\n                    size=\"lg\"\n                    className=\"bg-primary text-primary-foreground hover-elevate active-elevate-2\"\n                    onClick={() => {\n                      // Placeholder - bird food catalog will be added later\n                      window.scrollTo({ top: 0, behavior: 'smooth' });\n                    }}\n                    data-testid=\"button-bird-food\"\n                  >\n                    Bird Food and Diet\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n*/\n\n// REQUIRED IMPORTS FOR THESE SECTIONS:\n// Make sure these icons are imported in Home.tsx when re-enabling:\n// import { Sparkles, Home as HomeIcon, Apple } from \"lucide-react\";\n\nexport {};\n","size_bytes":8365},"client/src/components/SubscriptionShowcase.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Pause, Play, Check, Calendar, DollarSign } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ShowcaseSection {\n  id: string;\n  title: string;\n  content: JSX.Element;\n}\n\ninterface Props {\n  doctorImage: string;\n}\n\nexport default function SubscriptionShowcase({ doctorImage }: Props) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n\n  const sections: ShowcaseSection[] = useMemo(() => [\n    {\n      id: \"doctor\",\n      title: \"Meet Our Exotic Bird Specialist\",\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"relative overflow-hidden rounded-lg\">\n            <img\n              src={doctorImage}\n              alt=\"Dr. B. Anand Rathore\"\n              className=\"w-full h-80 object-cover object-top rounded-lg\"\n              data-testid=\"showcase-doctor-image\"\n            />\n          </div>\n          <div>\n            <h3 className=\"text-xl font-bold text-foreground mb-1\" data-testid=\"showcase-doctor-name\">\n              Dr. B. Anand Rathore\n            </h3>\n            <p className=\"text-xs text-muted-foreground mb-2\">\n              Certified Exotic Bird Veterinarian — Reg. No: TGVC/02597\n            </p>\n            <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"showcase-doctor-specialization\">\n              12+ years of focused experience in avian surgery, medicine, nutrition, and wildlife conservation\n            </p>\n            <div className=\"flex flex-wrap gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Avian Surgery & Medicine\n              </Badge>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Bird Nutritionist\n              </Badge>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Behavioral Medicine\n              </Badge>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: \"plans\",\n      title: \"Subscription Plans\",\n      content: (\n        <div className=\"space-y-3\">\n          <Card className=\"border-2 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"font-semibold text-foreground\">Monthly Plan</h4>\n                <span className=\"text-xl font-bold text-primary\">₹2,100/mo</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  2 consultations/month\n                </Badge>\n                <Badge className=\"text-xs bg-orange-600 hover:bg-orange-700\">\n                  <DollarSign className=\"h-3 w-3 mr-1\" />\n                  20% OFF\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-2 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"font-semibold text-foreground\">6-Month Plan</h4>\n                <span className=\"text-xl font-bold text-primary\">₹21,600</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  3 consultations/month\n                </Badge>\n                <Badge className=\"text-xs bg-primary hover:bg-primary/90\">\n                  <DollarSign className=\"h-3 w-3 mr-1\" />\n                  25% OFF\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"relative border-2 border-green-500/50 bg-green-50/50 dark:bg-green-950/20 overflow-visible\">\n            <div className=\"absolute -top-2 -right-2 bg-amber-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg z-10\">\n              Best Value\n            </div>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"font-semibold text-foreground\">Annual Plan</h4>\n                <span className=\"text-xl font-bold text-green-600\">₹37,400/yr</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" className=\"text-xs border-green-600 text-green-600\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  4 consultations/month\n                </Badge>\n                <Badge className=\"text-xs bg-green-600 hover:bg-green-700\">\n                  <DollarSign className=\"h-3 w-3 mr-1\" />\n                  35% OFF\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    },\n    {\n      id: \"coverage\",\n      title: \"What You'll Receive\",\n      content: (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50\">\n            <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-foreground text-sm mb-1\">\n                Deworming & Preventive Care\n              </h4>\n              <p className=\"text-xs text-muted-foreground\">\n                Regular protocols to keep your bird healthy\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50\">\n            <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-foreground text-sm mb-1\">\n                Personalized Diet Plans\n              </h4>\n              <p className=\"text-xs text-muted-foreground\">\n                Tailored nutrition for your bird's species and age\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50\">\n            <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-foreground text-sm mb-1\">\n                Supplements Guidance\n              </h4>\n              <p className=\"text-xs text-muted-foreground\">\n                Expert advice on vitamins and minerals\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50\">\n            <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-foreground text-sm mb-1\">\n                Behavior Training\n              </h4>\n              <p className=\"text-xs text-muted-foreground\">\n                Tips and enrichment activities for happy birds\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50\">\n            <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-semibold text-foreground text-sm mb-1\">\n                24/7 WhatsApp Support\n              </h4>\n              <p className=\"text-xs text-muted-foreground\">\n                Urgent concerns answered anytime\n              </p>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  ], [doctorImage]);\n\n  const currentSection = sections[currentIndex];\n\n  useEffect(() => {\n    if (isPaused || isHovered || hasFocus) return;\n    if (sections.length === 0) return;\n\n    const interval = setInterval(() => {\n      setCurrentIndex((prev) => (prev + 1) % sections.length);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [isPaused, isHovered, hasFocus, sections.length]);\n\n  return (\n    <Card\n      className=\"relative overflow-hidden max-w-md w-full\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onFocusCapture={() => setHasFocus(true)}\n      onBlurCapture={(e) => {\n        if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n          setHasFocus(false);\n        }\n      }}\n      data-testid=\"subscription-showcase\"\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-bold text-foreground\" data-testid=\"showcase-section-title\">\n            {currentSection.title}\n          </h3>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"h-8 w-8\"\n            onClick={() => setIsPaused(!isPaused)}\n            aria-label={isPaused ? \"Resume slideshow\" : \"Pause slideshow\"}\n            data-testid=\"subscription-showcase-pause-button\"\n          >\n            {isPaused ? (\n              <Play className=\"h-4 w-4\" />\n            ) : (\n              <Pause className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n\n        <div data-testid={`showcase-section-${currentSection.id}`}>\n          {currentSection.content}\n        </div>\n\n        <div\n          className=\"flex justify-center gap-2 mt-6\"\n          role=\"tablist\"\n          aria-label=\"Section selection\"\n        >\n          {sections.map((section, index) => (\n            <button\n              key={section.id}\n              onClick={() => setCurrentIndex(index)}\n              className={`h-2 rounded-full transition-all ${\n                index === currentIndex\n                  ? \"w-8 bg-primary\"\n                  : \"w-2 bg-muted-foreground/30\"\n              }`}\n              aria-label={`Select ${section.title}`}\n              aria-current={index === currentIndex ? \"true\" : undefined}\n              role=\"tab\"\n              data-testid={`subscription-section-indicator-${index}`}\n            />\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10190},"client/src/components/BirdShowcase.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { IndianRupee, Ruler, Pause, Play } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Bird } from \"@shared/schema\";\n\ninterface BirdShowcaseProps {\n  birds: Bird[];\n}\n\nexport default function BirdShowcase({ birds }: BirdShowcaseProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const currentBird = birds[currentIndex];\n\n  useEffect(() => {\n    if (isPaused || isHovered) return;\n\n    const interval = setInterval(() => {\n      setCurrentIndex((prev) => (prev + 1) % birds.length);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [birds.length, isPaused, isHovered]);\n\n  if (!currentBird) return null;\n\n  const formatPrice = (min: number, max: number) => {\n    const formatNum = (num: number) => {\n      if (num >= 100000) {\n        return `${(num / 100000).toFixed(1)}L`;\n      }\n      return `${(num / 1000).toFixed(0)}K`;\n    };\n    return `₹${formatNum(min)}-${formatNum(max)}`;\n  };\n\n  const formatSize = (size: string) => {\n    return size.charAt(0).toUpperCase() + size.slice(1);\n  };\n\n  const formatTrait = (trait: string) => {\n    return trait.split('-').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  return (\n    <div className=\"relative w-full max-w-md mx-auto md:mx-0\" data-testid=\"bird-showcase\">\n      <div \n        className=\"relative aspect-square rounded-lg overflow-hidden bg-muted\"\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onFocus={() => setIsHovered(true)}\n        onBlur={() => setIsHovered(false)}\n      >\n        <img\n          src={currentBird.image}\n          alt={currentBird.name}\n          className=\"w-full h-full object-cover transition-opacity duration-500\"\n          data-testid=\"showcase-bird-image\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent\" />\n        \n        <Button\n          size=\"icon\"\n          variant=\"secondary\"\n          className=\"absolute top-4 right-4 bg-white/90 hover:bg-white z-10\"\n          onClick={() => setIsPaused(!isPaused)}\n          aria-label={isPaused ? \"Resume slideshow\" : \"Pause slideshow\"}\n          data-testid=\"showcase-pause-button\"\n        >\n          {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n        </Button>\n        \n        <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white\">\n          <h3 className=\"text-xl font-bold mb-3\" data-testid=\"showcase-bird-name\">\n            {currentBird.name}\n          </h3>\n          \n          <div className=\"flex items-center gap-2 text-sm flex-wrap\">\n            <Badge \n              variant=\"secondary\" \n              className=\"bg-white/90 text-foreground hover:bg-white/90 no-default-hover-elevate no-default-active-elevate\"\n              data-testid=\"showcase-trait\"\n            >\n              {formatTrait(currentBird.traits[0])}\n            </Badge>\n            \n            <span className=\"text-white/80\">|</span>\n            \n            <Badge \n              variant=\"secondary\" \n              className=\"bg-white/90 text-foreground hover:bg-white/90 no-default-hover-elevate no-default-active-elevate flex items-center gap-1\"\n              data-testid=\"showcase-price\"\n            >\n              <IndianRupee className=\"h-3 w-3\" />\n              {formatPrice(currentBird.priceMin, currentBird.priceMax)}\n            </Badge>\n            \n            <span className=\"text-white/80\">|</span>\n            \n            <Badge \n              variant=\"secondary\" \n              className=\"bg-white/90 text-foreground hover:bg-white/90 no-default-hover-elevate no-default-active-elevate flex items-center gap-1\"\n              data-testid=\"showcase-size\"\n            >\n              <Ruler className=\"h-3 w-3\" />\n              {formatSize(currentBird.size)}\n            </Badge>\n          </div>\n          \n          <div className=\"flex justify-center gap-1.5 mt-3\" role=\"tablist\" aria-label=\"Bird selection\">\n            {birds.map((_, index) => (\n              <button\n                key={index}\n                role=\"tab\"\n                onClick={() => setCurrentIndex(index)}\n                className={`h-1.5 rounded-full transition-all ${\n                  index === currentIndex \n                    ? 'bg-white w-6' \n                    : 'bg-white/50 w-1.5 hover:bg-white/70'\n                }`}\n                data-testid={`showcase-indicator-${index}`}\n                aria-label={`View ${birds[index].name}`}\n                aria-selected={index === currentIndex}\n                aria-current={index === currentIndex ? \"true\" : undefined}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4956},"client/src/components/DoctorShowcase.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { Pause, Play } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SubscriptionPlan {\n  name: string;\n  price: string;\n  consultations: string;\n  savings?: string;\n}\n\ninterface DoctorInfo {\n  name: string;\n  image: string;\n  credentials: string[];\n  specialization: string;\n}\n\ninterface Props {\n  doctor: DoctorInfo;\n  subscriptionPlans: SubscriptionPlan[];\n}\n\nexport default function DoctorShowcase({ doctor, subscriptionPlans }: Props) {\n  const [currentPlanIndex, setCurrentPlanIndex] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const currentPlan = subscriptionPlans[currentPlanIndex];\n\n  useEffect(() => {\n    if (isPaused || isHovered || subscriptionPlans.length <= 1) return;\n\n    const interval = setInterval(() => {\n      setCurrentPlanIndex((prev) => (prev + 1) % subscriptionPlans.length);\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [isPaused, isHovered, subscriptionPlans.length]);\n\n  return (\n    <Card\n      className=\"relative overflow-hidden max-w-md w-full\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onFocus={() => setIsHovered(true)}\n      onBlur={() => setIsHovered(false)}\n      tabIndex={0}\n      data-testid=\"doctor-showcase\"\n    >\n      <div className=\"relative\">\n        <img\n          src={doctor.image}\n          alt={doctor.name}\n          className=\"w-full h-64 object-cover\"\n          data-testid=\"doctor-image\"\n        />\n        \n        {subscriptionPlans.length > 1 && (\n          <Button\n            size=\"icon\"\n            variant=\"secondary\"\n            className=\"absolute top-4 right-4 h-8 w-8 bg-background/80 backdrop-blur-sm hover:bg-background/90\"\n            onClick={() => setIsPaused(!isPaused)}\n            aria-label={isPaused ? \"Resume slideshow\" : \"Pause slideshow\"}\n            data-testid=\"showcase-pause-button\"\n          >\n            {isPaused ? (\n              <Play className=\"h-4 w-4\" />\n            ) : (\n              <Pause className=\"h-4 w-4\" />\n            )}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-bold text-foreground mb-2\" data-testid=\"doctor-name\">\n          {doctor.name}\n        </h3>\n        \n        <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"doctor-specialization\">\n          {doctor.specialization}\n        </p>\n\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {doctor.credentials.map((credential, idx) => (\n            <Badge\n              key={idx}\n              variant=\"secondary\"\n              className=\"text-xs\"\n              data-testid={`credential-${idx}`}\n            >\n              {credential}\n            </Badge>\n          ))}\n        </div>\n\n        <div className=\"border-t pt-4\">\n          <div className=\"flex items-baseline justify-between mb-2\">\n            <h4 className=\"text-lg font-semibold text-foreground\" data-testid=\"plan-name\">\n              {currentPlan.name}\n            </h4>\n            <span className=\"text-2xl font-bold text-primary\" data-testid=\"plan-price\">\n              {currentPlan.price}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2 mb-3\">\n            <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"plan-consultations\">\n              {currentPlan.consultations}\n            </Badge>\n            {currentPlan.savings && (\n              <Badge className=\"text-xs bg-green-600 hover:bg-green-700\" data-testid=\"plan-savings\">\n                {currentPlan.savings}\n              </Badge>\n            )}\n          </div>\n\n          {subscriptionPlans.length > 1 && (\n            <div\n              className=\"flex justify-center gap-2 mt-4\"\n              role=\"tablist\"\n              aria-label=\"Subscription plan selection\"\n            >\n              {subscriptionPlans.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => setCurrentPlanIndex(index)}\n                  className={`h-2 rounded-full transition-all ${\n                    index === currentPlanIndex\n                      ? \"w-8 bg-primary\"\n                      : \"w-2 bg-muted-foreground/30\"\n                  }`}\n                  aria-label={`Select ${subscriptionPlans[index].name}`}\n                  aria-current={index === currentPlanIndex ? \"true\" : undefined}\n                  role=\"tab\"\n                  data-testid={`plan-indicator-${index}`}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4797},"client/src/components/AnimatedLogo.tsx":{"content":"import logoImage from '@assets/og-image.jpg_1761307925834.jpeg';\n\ninterface AnimatedLogoProps {\n  className?: string;\n}\n\nexport default function AnimatedLogo({ className = \"h-6 w-6 md:h-7 md:w-7\" }: AnimatedLogoProps) {\n  return (\n    <img \n      src={logoImage} \n      alt=\"Fancy Feathers India Logo\" \n      className={`${className} object-contain animate-float rounded-full`}\n    />\n  );\n}\n","size_bytes":392},"client/src/pages/UserAccountRegister.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, CheckCircle2 } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst registerSchema = z.object({\n  phone: z.string().min(1, \"Phone number is required\"),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one capital letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\")\n    .regex(/[!@#$%^&*(),.?\":{}|<>]/, \"Password must contain at least one special character\"),\n  confirmPassword: z.string(),\n  subscriptionId: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function UserAccountRegister() {\n  const [, navigate] = useLocation();\n  const [, params] = useRoute(\"/user-account/register/:phone/:subscriptionId\");\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      phone: params?.phone || \"\",\n      subscriptionId: params?.subscriptionId || \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterFormData) => {\n      return await apiRequest(\"POST\", \"/api/user-account/register\", data);\n    },\n    onSuccess: (data: any) => {\n      setSuccessMessage(data.message);\n      setTimeout(() => {\n        navigate(\"/user-dashboard\");\n      }, 2000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  if (successMessage) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <CheckCircle2 className=\"h-16 w-16 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Account Created!</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"border-green-200 bg-green-50\">\n              <AlertDescription className=\"text-center text-green-800\">\n                {successMessage}\n              </AlertDescription>\n            </Alert>\n            <p className=\"text-center text-sm text-muted-foreground mt-4\">\n              Redirecting to your dashboard...\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Create Your Account</CardTitle>\n          <CardDescription>\n            Set up your password to access your Bird Care dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>User ID (Phone Number)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"9876543210\"\n                        disabled\n                        className=\"bg-muted\"\n                        data-testid=\"input-phone\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      This is your phone number from the subscription\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter your password\"\n                          data-testid=\"input-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormDescription className=\"text-xs\">\n                      Minimum 8 characters, at least one capital letter, one number, and one special character\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Re-enter your password\"\n                          data-testid=\"input-confirm-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          data-testid=\"button-toggle-confirm-password\"\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"button-create-account\"\n              >\n                {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8386},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  LogOut, \n  Search, \n  Eye, \n  Edit, \n  Trash2, \n  RefreshCw,\n  Filter,\n  UserX\n} from \"lucide-react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle,\n  DialogFooter \n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { format } from \"date-fns\";\nimport AdminAppointments from \"@/components/AdminAppointments\";\n\ntype UserSubscription = {\n  phone: string;\n  fullName: string;\n  isMobileVerified: boolean;\n  verifiedAt: string | null;\n  createdAt: string;\n  subscriptionStatus: \"Active\" | \"Expired\" | \"Exhausted\" | \"No Subscription\";\n  subscription: {\n    id: string;\n    subscriptionPlan: string;\n    subscriptionStartDate: string;\n    subscriptionEndDate: string;\n    amountPaid: number;\n    consultationsRemaining: number;\n    status: string;\n    birdSpecies: string;\n    discountCoupon: string | null;\n    razorpayOrderId: string | null;\n    razorpayPaymentId: string | null;\n    paymentStatus: string | null;\n  } | null;\n};\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [filterPlan, setFilterPlan] = useState(\"all\");\n  const [selectedUser, setSelectedUser] = useState<UserSubscription | null>(null);\n  const [viewMode, setViewMode] = useState<\"view\" | \"edit\" | null>(null);\n  const [deleteSubscriptionId, setDeleteSubscriptionId] = useState<string | null>(null);\n  const [deleteUserPhone, setDeleteUserPhone] = useState<string | null>(null);\n  const [consultationUpdateId, setConsultationUpdateId] = useState<string | null>(null);\n  const [customConsultations, setCustomConsultations] = useState<number>(0);\n  const [editFormData, setEditFormData] = useState<any>({});\n  const [metricsValue, setMetricsValue] = useState<number>(0);\n  const [metricsReason, setMetricsReason] = useState<string>(\"\");\n  const [showMetricsDialog, setShowMetricsDialog] = useState(false);\n\n  // Check admin session\n  const { data: sessionData } = useQuery<{ admin: any }>({\n    queryKey: [\"/api/admin/session\"],\n  });\n\n  useEffect(() => {\n    if (sessionData && !sessionData.admin) {\n      setLocation(\"/admin/login\");\n    }\n  }, [sessionData, setLocation]);\n\n  // Fetch unified user-subscriptions data\n  const { data: userSubscriptionsData, isLoading } = useQuery<{ userSubscriptions: UserSubscription[] }>({\n    queryKey: [\"/api/admin/user-subscriptions\"],\n    enabled: !!sessionData?.admin,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/logout\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/session\"] });\n      setLocation(\"/login\");\n    },\n  });\n\n  const updateSubscriptionMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/subscriptions/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/user-subscriptions\"] });\n      setViewMode(null);\n      setSelectedUser(null);\n      toast({\n        title: \"Success\",\n        description: \"Subscription updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update subscription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateConsultationsMutation = useMutation({\n    mutationFn: async ({ id, consultations }: { id: string; consultations: number }) => {\n      return await apiRequest(\"POST\", `/api/admin/subscriptions/${id}/consultations`, { consultations });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/user-subscriptions\"] });\n      setConsultationUpdateId(null);\n      setCustomConsultations(0);\n      toast({\n        title: \"Success\",\n        description: \"Consultations Updated\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update consultations\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSubscriptionMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/subscriptions/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/user-subscriptions\"] });\n      setDeleteSubscriptionId(null);\n      toast({\n        title: \"Success\",\n        description: \"Subscription deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete subscription\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserAccountMutation = useMutation({\n    mutationFn: async (phone: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/user-accounts/${encodeURIComponent(phone)}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/user-subscriptions\"] });\n      setDeleteUserPhone(null);\n      toast({\n        title: \"Success\",\n        description: \"User account deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fetch metrics\n  const { data: activeSubscriptionsMetric } = useQuery<{ value: number; last_updated: string }>({\n    queryKey: [\"/api/metrics/active-subscriptions\"],\n    enabled: !!sessionData?.admin,\n  });\n\n  const updateMetricsMutation = useMutation({\n    mutationFn: async ({ value, reason }: { value: number; reason: string }) => {\n      return await apiRequest(\"POST\", \"/api/admin/metrics/active-subscriptions\", { value, reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics/active-subscriptions\"] });\n      setShowMetricsDialog(false);\n      setMetricsValue(0);\n      setMetricsReason(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Metrics updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update metrics\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConsultationUpdate = (subscriptionId: string, consultations: number) => {\n    updateConsultationsMutation.mutate({ id: subscriptionId, consultations });\n  };\n\n  const handleSubscriptionEdit = (user: UserSubscription) => {\n    if (user.subscription) {\n      setSelectedUser(user);\n      setEditFormData({\n        fullName: user.fullName,\n        mobileNumber: user.phone,\n        birdSpecies: user.subscription.birdSpecies,\n        subscriptionPlan: user.subscription.subscriptionPlan,\n        subscriptionStartDate: user.subscription.subscriptionStartDate,\n        subscriptionEndDate: user.subscription.subscriptionEndDate,\n        amountPaid: user.subscription.amountPaid,\n        consultationsRemaining: user.subscription.consultationsRemaining,\n        status: user.subscription.status,\n      });\n      setViewMode(\"edit\");\n    }\n  };\n\n  const handleSaveEdit = () => {\n    if (selectedUser?.subscription) {\n      updateSubscriptionMutation.mutate({\n        id: selectedUser.subscription.id,\n        data: editFormData,\n      });\n    }\n  };\n\n  // Filter and search logic\n  const filteredUsers = userSubscriptionsData?.userSubscriptions.filter((user) => {\n    const matchesSearch = \n      user.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.phone.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = \n      filterStatus === \"all\" || \n      user.subscriptionStatus.toLowerCase().replace(\" \", \"-\") === filterStatus;\n    \n    const matchesPlan = \n      filterPlan === \"all\" || \n      (user.subscription && user.subscription.subscriptionPlan === filterPlan);\n    \n    return matchesSearch && matchesStatus && matchesPlan;\n  }) || [];\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"Active\":\n        return \"default\";\n      case \"Expired\":\n        return \"secondary\";\n      case \"Exhausted\":\n        return \"secondary\";\n      case \"No Subscription\":\n        return \"outline\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b\">\n        <div className=\"container mx-auto px-4 py-4 flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n          <Button\n            variant=\"outline\"\n            onClick={() => logoutMutation.mutate()}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 space-y-6\">\n        {/* Social Proof Metrics Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Social Proof Metrics</CardTitle>\n            <CardDescription>Manage active subscriptions count displayed on the subscription page</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-3xl font-bold text-primary\">\n                    {activeSubscriptionsMetric?.value || 0}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">Current Active Subscriptions Count</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Last updated: {activeSubscriptionsMetric?.last_updated \n                      ? format(new Date(activeSubscriptionsMetric.last_updated), \"PPp\")\n                      : \"Never\"}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-6 flex items-center justify-center\">\n                  <Button\n                    onClick={() => {\n                      setMetricsValue(activeSubscriptionsMetric?.value || 0);\n                      setShowMetricsDialog(true);\n                    }}\n                    data-testid=\"button-update-metrics\"\n                  >\n                    <RefreshCw className=\"mr-2 h-4 w-4\" />\n                    Update Metrics\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>User Management</CardTitle>\n            <CardDescription>Manage all users and their subscription status</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Filters and Search */}\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search by name or phone...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-full sm:w-[200px]\" data-testid=\"select-filter-status\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"expired\">Expired</SelectItem>\n                  <SelectItem value=\"exhausted\">Exhausted</SelectItem>\n                  <SelectItem value=\"no-subscription\">No Subscription</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={filterPlan} onValueChange={setFilterPlan}>\n                <SelectTrigger className=\"w-full sm:w-[200px]\" data-testid=\"select-filter-plan\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue placeholder=\"Filter by plan\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Plans</SelectItem>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                  <SelectItem value=\"six-month\">6-Month</SelectItem>\n                  <SelectItem value=\"annual\">Annual</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-2xl font-bold\">\n                    {userSubscriptionsData?.userSubscriptions.length || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Total Users</p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {userSubscriptionsData?.userSubscriptions.filter(u => u.subscriptionStatus === \"Active\").length || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Active Subscriptions</p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {userSubscriptionsData?.userSubscriptions.filter(u => u.subscriptionStatus === \"Expired\").length || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Expired</p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"text-2xl font-bold text-gray-600\">\n                    {userSubscriptionsData?.userSubscriptions.filter(u => u.subscriptionStatus === \"No Subscription\").length || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">No Subscription</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Table */}\n            <div className=\"border rounded-lg overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Subscription Status</TableHead>\n                    <TableHead>Plan</TableHead>\n                    <TableHead>Consultations</TableHead>\n                    <TableHead>Valid Until</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {isLoading ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8\">\n                        Loading...\n                      </TableCell>\n                    </TableRow>\n                  ) : filteredUsers.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                        No users found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredUsers.map((user) => (\n                      <TableRow key={user.phone}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{user.fullName}</div>\n                            <div className=\"text-sm text-muted-foreground\">{user.phone}</div>\n                            {user.isMobileVerified && (\n                              <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                                Verified\n                              </Badge>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getStatusBadgeVariant(user.subscriptionStatus)}>\n                            {user.subscriptionStatus}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {user.subscription ? (\n                            <span className=\"capitalize\">\n                              {user.subscription.subscriptionPlan.replace(\"-\", \" \")}\n                            </span>\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {user.subscription ? (\n                            <span>{user.subscription.consultationsRemaining}</span>\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {user.subscription ? (\n                            <span className=\"text-sm\">\n                              {format(new Date(user.subscription.subscriptionEndDate), \"MMM d, yyyy\")}\n                            </span>\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end gap-2\">\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    onClick={() => {\n                                      setSelectedUser(user);\n                                      setViewMode(\"view\");\n                                    }}\n                                    data-testid={`button-view-${user.phone}`}\n                                  >\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>View Details</TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n\n                            {user.subscription && (\n                              <>\n                                <TooltipProvider>\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        onClick={() => handleSubscriptionEdit(user)}\n                                        data-testid={`button-edit-${user.subscription?.id}`}\n                                      >\n                                        <Edit className=\"h-4 w-4\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>Edit Subscription</TooltipContent>\n                                  </Tooltip>\n                                </TooltipProvider>\n\n                                <TooltipProvider>\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        onClick={() => setConsultationUpdateId(user.subscription?.id || null)}\n                                        data-testid={`button-update-consultations-${user.subscription?.id}`}\n                                      >\n                                        <RefreshCw className=\"h-4 w-4\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>Update Consultations</TooltipContent>\n                                  </Tooltip>\n                                </TooltipProvider>\n\n                                <TooltipProvider>\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        onClick={() => setDeleteSubscriptionId(user.subscription?.id || null)}\n                                        data-testid={`button-delete-subscription-${user.subscription?.id}`}\n                                      >\n                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>Delete Subscription</TooltipContent>\n                                  </Tooltip>\n                                </TooltipProvider>\n                              </>\n                            )}\n\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    onClick={() => setDeleteUserPhone(user.phone)}\n                                    data-testid={`button-delete-user-${user.phone}`}\n                                  >\n                                    <UserX className=\"h-4 w-4 text-destructive\" />\n                                  </Button>\n                                </TooltipTrigger>\n                                <TooltipContent>Delete User Account</TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      {/* View/Edit Subscription Dialog */}\n      <Dialog open={viewMode !== null} onOpenChange={() => setViewMode(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {viewMode === \"view\" ? \"User Details\" : \"Edit Subscription\"}\n            </DialogTitle>\n          </DialogHeader>\n          {selectedUser && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Name</Label>\n                  {viewMode === \"view\" ? (\n                    <p className=\"font-medium\">{selectedUser.fullName}</p>\n                  ) : (\n                    <Input\n                      value={editFormData.fullName || \"\"}\n                      onChange={(e) => setEditFormData({ ...editFormData, fullName: e.target.value })}\n                      data-testid=\"input-edit-name\"\n                    />\n                  )}\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Mobile</Label>\n                  <p className=\"font-medium\">{selectedUser.phone}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Verification Status</Label>\n                  <p>\n                    {selectedUser.isMobileVerified ? (\n                      <Badge variant=\"outline\">Verified</Badge>\n                    ) : (\n                      <Badge variant=\"secondary\">Unverified</Badge>\n                    )}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Subscription Status</Label>\n                  <p>\n                    <Badge variant={getStatusBadgeVariant(selectedUser.subscriptionStatus)}>\n                      {selectedUser.subscriptionStatus}\n                    </Badge>\n                  </p>\n                </div>\n              </div>\n\n              {selectedUser.subscription && (\n                <>\n                  <div className=\"border-t pt-4 mt-4\">\n                    <h3 className=\"font-semibold mb-3\">Subscription Details</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-sm text-muted-foreground\">Plan</Label>\n                        {viewMode === \"view\" ? (\n                          <p className=\"font-medium capitalize\">\n                            {selectedUser.subscription.subscriptionPlan.replace(\"-\", \" \")}\n                          </p>\n                        ) : (\n                          <Select\n                            value={editFormData.subscriptionPlan}\n                            onValueChange={(value) => setEditFormData({ ...editFormData, subscriptionPlan: value })}\n                          >\n                            <SelectTrigger data-testid=\"select-edit-plan\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"monthly\">Monthly</SelectItem>\n                              <SelectItem value=\"six-month\">6-Month</SelectItem>\n                              <SelectItem value=\"annual\">Annual</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        )}\n                      </div>\n                      <div>\n                        <Label className=\"text-sm text-muted-foreground\">Bird Species</Label>\n                        {viewMode === \"view\" ? (\n                          <p className=\"font-medium\">{selectedUser.subscription.birdSpecies}</p>\n                        ) : (\n                          <Input\n                            value={editFormData.birdSpecies || \"\"}\n                            onChange={(e) => setEditFormData({ ...editFormData, birdSpecies: e.target.value })}\n                            data-testid=\"input-edit-species\"\n                          />\n                        )}\n                      </div>\n                      <div>\n                        <Label className=\"text-sm text-muted-foreground\">Amount Paid</Label>\n                        {viewMode === \"view\" ? (\n                          <p className=\"font-medium\">₹{selectedUser.subscription.amountPaid}</p>\n                        ) : (\n                          <Input\n                            type=\"number\"\n                            value={editFormData.amountPaid || \"\"}\n                            onChange={(e) => setEditFormData({ ...editFormData, amountPaid: parseFloat(e.target.value) })}\n                            data-testid=\"input-edit-amount\"\n                          />\n                        )}\n                      </div>\n                      <div>\n                        <Label className=\"text-sm text-muted-foreground\">Consultations Remaining</Label>\n                        <p className=\"font-medium\">{selectedUser.subscription.consultationsRemaining}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm text-muted-foreground\">Start Date</Label>\n                        {viewMode === \"view\" ? (\n                          <p className=\"font-medium\">\n                            {format(new Date(selectedUser.subscription.subscriptionStartDate), \"MMM d, yyyy\")}\n                          </p>\n                        ) : (\n                          <Input\n                            type=\"date\"\n                            value={editFormData.subscriptionStartDate?.split(\"T\")[0] || \"\"}\n                            onChange={(e) => setEditFormData({ ...editFormData, subscriptionStartDate: e.target.value })}\n                            data-testid=\"input-edit-start-date\"\n                          />\n                        )}\n                      </div>\n                      <div>\n                        <Label className=\"text-sm text-muted-foreground\">End Date</Label>\n                        {viewMode === \"view\" ? (\n                          <p className=\"font-medium\">\n                            {format(new Date(selectedUser.subscription.subscriptionEndDate), \"MMM d, yyyy\")}\n                          </p>\n                        ) : (\n                          <Input\n                            type=\"date\"\n                            value={editFormData.subscriptionEndDate?.split(\"T\")[0] || \"\"}\n                            onChange={(e) => setEditFormData({ ...editFormData, subscriptionEndDate: e.target.value })}\n                            data-testid=\"input-edit-end-date\"\n                          />\n                        )}\n                      </div>\n                      {selectedUser.subscription.discountCoupon && (\n                        <div>\n                          <Label className=\"text-sm text-muted-foreground\">Discount Coupon</Label>\n                          <p className=\"font-medium\">{selectedUser.subscription.discountCoupon}</p>\n                        </div>\n                      )}\n                      {selectedUser.subscription.razorpayPaymentId && (\n                        <div className=\"col-span-2\">\n                          <Label className=\"text-sm text-muted-foreground\">Payment ID</Label>\n                          <p className=\"font-medium text-sm\">{selectedUser.subscription.razorpayPaymentId}</p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            {viewMode === \"edit\" && (\n              <Button onClick={handleSaveEdit} data-testid=\"button-save-edit\">\n                Save Changes\n              </Button>\n            )}\n            <Button variant=\"outline\" onClick={() => setViewMode(null)}>\n              {viewMode === \"view\" ? \"Close\" : \"Cancel\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Update Consultations Dialog */}\n      <Dialog open={consultationUpdateId !== null} onOpenChange={() => {\n        setConsultationUpdateId(null);\n        setCustomConsultations(0);\n      }}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Update Consultations</DialogTitle>\n            <DialogDescription>\n              Choose a preset or enter a custom value\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Preset Values</Label>\n              <div className=\"grid grid-cols-3 gap-2\">\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => handleConsultationUpdate(consultationUpdateId!, 2)}\n                        data-testid=\"button-set-consultations-2\"\n                        className=\"flex-1\"\n                      >\n                        2 (Monthly)\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Set consultations for Monthly plan</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => handleConsultationUpdate(consultationUpdateId!, 18)}\n                        data-testid=\"button-set-consultations-18\"\n                        className=\"flex-1\"\n                      >\n                        18 (6-Month)\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Set consultations for 6-Month plan</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => handleConsultationUpdate(consultationUpdateId!, 48)}\n                        data-testid=\"button-set-consultations-48\"\n                        className=\"flex-1\"\n                      >\n                        48 (Annual)\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Set consultations for Annual plan</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">Or enter custom value</span>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"custom-consultations\">Custom Number of Consultations</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"custom-consultations\"\n                  type=\"number\"\n                  min=\"0\"\n                  placeholder=\"Enter any number\"\n                  value={customConsultations || ''}\n                  onChange={(e) => setCustomConsultations(parseInt(e.target.value) || 0)}\n                  data-testid=\"input-custom-consultations\"\n                />\n                <Button\n                  onClick={() => handleConsultationUpdate(consultationUpdateId!, customConsultations)}\n                  disabled={!customConsultations || customConsultations < 0}\n                  data-testid=\"button-set-custom-consultations\"\n                >\n                  Set\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Subscription Confirmation */}\n      <AlertDialog open={deleteSubscriptionId !== null} onOpenChange={() => setDeleteSubscriptionId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete this subscription\n              from the database. The user account will remain active.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteSubscriptionId && deleteSubscriptionMutation.mutate(deleteSubscriptionId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Delete User Account Confirmation */}\n      <AlertDialog open={deleteUserPhone !== null} onOpenChange={() => setDeleteUserPhone(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User Account?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete this user account\n              and all associated bird details from the database. The user will need to create \n              a new account to login again.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-user\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteUserPhone && deleteUserAccountMutation.mutate(deleteUserPhone)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-user\"\n            >\n              Delete Account\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Update Metrics Dialog */}\n      <Dialog open={showMetricsDialog} onOpenChange={setShowMetricsDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Update Active Subscriptions Metric</DialogTitle>\n            <DialogDescription>\n              Set the active subscriptions count displayed on the subscription page\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"metrics-value\">Active Subscriptions Count</Label>\n              <Input\n                id=\"metrics-value\"\n                type=\"number\"\n                value={metricsValue}\n                onChange={(e) => setMetricsValue(Number(e.target.value))}\n                min={0}\n                placeholder=\"Enter count\"\n                data-testid=\"input-metrics-value\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"metrics-reason\">Reason for Change</Label>\n              <Input\n                id=\"metrics-reason\"\n                value={metricsReason}\n                onChange={(e) => setMetricsReason(e.target.value)}\n                placeholder=\"e.g., Manual correction, seasonal adjustment\"\n                data-testid=\"input-metrics-reason\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowMetricsDialog(false)}\n              data-testid=\"button-cancel-metrics\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => updateMetricsMutation.mutate({ value: metricsValue, reason: metricsReason })}\n              disabled={!metricsReason || updateMetricsMutation.isPending}\n              data-testid=\"button-save-metrics\"\n            >\n              {updateMetricsMutation.isPending ? \"Updating...\" : \"Update\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":40869},"client/src/pages/UserAccountLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, LogIn } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  phone: z.string().min(1, \"Phone number is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function UserAccountLogin() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      phone: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return await apiRequest(\"POST\", \"/api/user-account/login\", data);\n    },\n    onSuccess: () => {\n      navigate(\"/user-dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid user ID or password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center\">\n              <LogIn className=\"h-6 w-6 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl\">User Login</CardTitle>\n          <CardDescription>\n            Access your Bird Care dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>User ID (Phone Number)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"9876543210\"\n                        maxLength={10}\n                        data-testid=\"input-phone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter your password\"\n                          data-testid=\"input-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4873},"client/src/pages/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [mobile, setMobile] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { mobile: string; password: string }) => {\n      return await apiRequest(\"POST\", \"/api/admin/login\", credentials);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to the admin dashboard\",\n      });\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!mobile || !password) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter both mobile number and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Send with country code prefix for India\n    const fullMobile = `+91${mobile}`;\n    loginMutation.mutate({ mobile: fullMobile, password });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 to-secondary/10 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n              <Lock className=\"w-6 h-6 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Admin Login</CardTitle>\n          <CardDescription>\n            Enter your credentials to access the admin dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"mobile\">Mobile Number</Label>\n              <Input\n                id=\"mobile\"\n                type=\"tel\"\n                placeholder=\"7032645053\"\n                value={mobile}\n                onChange={(e) => setMobile(e.target.value.replace(/\\D/g, '').slice(0, 10))}\n                data-testid=\"input-admin-mobile\"\n                maxLength={10}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                data-testid=\"input-admin-password\"\n                required\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-admin-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3771},"client/src/lib/reviewsData.ts":{"content":"export interface Review {\n  id: number;\n  name: string;\n  rating: number;\n  review: string;\n}\n\nexport const reviewsData: Review[] = [\n  {\n    id: 1,\n    name: \"Ananya Mehta\",\n    rating: 5,\n    review: \"My parrot was having severe loose motion. I booked a consultation through the subscription, and the doctor guided me with proper medication and diet. Within 3 days, my bird was completely fine. Highly recommend this service!\"\n  },\n  {\n    id: 2,\n    name: \"Rajesh Kumar\",\n    rating: 5,\n    review: \"My cockatiel started vomiting suddenly, and I was really worried. The vet responded quickly and suggested a simple home remedy along with medication. The issue was resolved in two days. Great experience!\"\n  },\n  {\n    id: 3,\n    name: \"Priya Sharma\",\n    rating: 5,\n    review: \"I needed deworming for my budgie. The subscription made it so easy to connect with an expert. They explained the process and gave me a schedule for future prevention. Very satisfied!\"\n  },\n  {\n    id: 4,\n    name: \"Arvind Patel\",\n    rating: 5,\n    review: \"I wanted a proper diet chart for my African Grey. The doctor provided a detailed plan with seasonal fruits and protein sources. My bird looks healthier and more active now. Excellent guidance!\"\n  },\n  {\n    id: 5,\n    name: \"Sneha Reddy\",\n    rating: 5,\n    review: \"My bird's feather quality was poor, and I was concerned. The vet suggested supplements and a change in diet. Within a month, the feathers became shiny and strong. Amazing results!\"\n  },\n  {\n    id: 6,\n    name: \"Vikram Joshi\",\n    rating: 5,\n    review: \"My parrot was plucking its feathers constantly. The doctor explained it was stress-related and gave tips to improve the environment. It worked! My bird is much calmer now.\"\n  },\n  {\n    id: 7,\n    name: \"Kavita Nair\",\n    rating: 5,\n    review: \"My bird had started biting aggressively. The vet gave behavioural tips and suggested toys to keep it engaged. The biting reduced significantly. Very helpful advice!\"\n  },\n  {\n    id: 8,\n    name: \"Deepak Singh\",\n    rating: 5,\n    review: \"My bird was underweight, and I didn't know what to do. The subscription helped me get a customised diet plan. After two weeks, I could see visible improvement. Great service!\"\n  },\n  {\n    id: 9,\n    name: \"Manish Verma\",\n    rating: 4,\n    review: \"I took a basic subscription and tried calling the doctor, but the line was busy. They asked me to wait for two hours, which was a bit inconvenient. However, once connected, the advice was good, and my bird recovered well.\"\n  },\n  {\n    id: 10,\n    name: \"Ritu Chatterjee\",\n    rating: 3,\n    review: \"The medicine prescribed was not available nearby, so I had to call the doctor again for alternatives. It took extra time, but finally, my bird got better. Overall, an okay experience.\"\n  }\n];\n","size_bytes":2791},"client/src/pages/UserDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertCircle, Bird, Calendar, CreditCard, Tag, LogOut, Plus, Edit, Trash2, Loader2 } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { format } from \"date-fns\";\nimport SubscriptionPrompt from \"@/components/SubscriptionPrompt\";\n\nconst birdFormSchema = z.object({\n  birdName: z.string().min(1, \"Bird name is required\"),\n  species: z.string().min(1, \"Species is required\"),\n  ringId: z.string().optional(),\n  weight: z.string().optional(),\n  age: z.string().optional(),\n  issues: z.string().optional(),\n});\n\ntype BirdFormData = z.infer<typeof birdFormSchema>;\n\ninterface BirdDetail {\n  id: string;\n  birdName: string;\n  species: string;\n  ringId?: string;\n  weight?: number;\n  age?: string;\n  issues?: string;\n}\n\nexport default function UserDashboard() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [showBirdForm, setShowBirdForm] = useState(false);\n  const [editingBird, setEditingBird] = useState<BirdDetail | null>(null);\n  const [deleteBirdId, setDeleteBirdId] = useState<string | null>(null);\n\n  const form = useForm<BirdFormData>({\n    resolver: zodResolver(birdFormSchema),\n    defaultValues: {\n      birdName: \"\",\n      species: \"\",\n      ringId: \"\",\n      weight: \"\",\n      age: \"\",\n      issues: \"\",\n    },\n  });\n\n  // Fetch user session\n  const { data: sessionData, isLoading: sessionLoading } = useQuery<any>({\n    queryKey: [\"/api/user-account/session\"],\n  });\n\n  // Fetch subscription details\n  const { data: subscriptionData, isLoading: subscriptionLoading } = useQuery<any>({\n    queryKey: [\"/api/user-account/subscription\"],\n    enabled: !!sessionData?.account,\n  });\n\n  // Fetch bird details\n  const { data: birdsData, isLoading: birdsLoading } = useQuery<any>({\n    queryKey: [\"/api/bird-details\"],\n    enabled: !!sessionData?.account,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/user-account/logout\", {});\n    },\n    onSuccess: () => {\n      navigate(\"/login\");\n    },\n  });\n\n  const saveBirdMutation = useMutation({\n    mutationFn: async (data: BirdFormData) => {\n      const payload = {\n        ...data,\n        weight: data.weight ? parseInt(data.weight) : undefined,\n      };\n      if (editingBird) {\n        return await apiRequest(\"PATCH\", `/api/bird-details/${editingBird.id}`, payload);\n      } else {\n        return await apiRequest(\"POST\", \"/api/bird-details\", payload);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bird-details\"] });\n      setShowBirdForm(false);\n      setEditingBird(null);\n      form.reset();\n      toast({\n        title: editingBird ? \"Bird Updated\" : \"Bird Added\",\n        description: editingBird ? \"Bird details updated successfully.\" : \"Your bird's details have been saved successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save bird details\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBirdMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/bird-details/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bird-details\"] });\n      setDeleteBirdId(null);\n      toast({\n        title: \"Bird Deleted\",\n        description: \"Bird deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete bird\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditBird = (bird: BirdDetail) => {\n    setEditingBird(bird);\n    form.reset({\n      birdName: bird.birdName,\n      species: bird.species,\n      ringId: bird.ringId || \"\",\n      weight: bird.weight ? bird.weight.toString() : \"\",\n      age: bird.age || \"\",\n      issues: bird.issues || \"\",\n    });\n    setShowBirdForm(true);\n  };\n\n  const handleAddNewBird = () => {\n    setEditingBird(null);\n    form.reset({\n      birdName: \"\",\n      species: \"\",\n      ringId: \"\",\n      weight: \"\",\n      age: \"\",\n      issues: \"\",\n    });\n    setShowBirdForm(true);\n  };\n\n  const onSubmitBird = (data: BirdFormData) => {\n    saveBirdMutation.mutate(data);\n  };\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!sessionLoading && !sessionData?.account) {\n      navigate(\"/login\");\n    }\n  }, [sessionLoading, sessionData, navigate]);\n\n  if (sessionLoading || subscriptionLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!sessionData?.account) {\n    return null;\n  }\n\n  const subscription = subscriptionData?.subscription;\n  const birds = birdsData?.birds || [];\n\n  const getStatusBadge = (status: string) => {\n    if (status === \"active\") return <Badge className=\"bg-green-600 hover:bg-green-700\">Active</Badge>;\n    if (status === \"expired\") return <Badge variant=\"destructive\">Expired</Badge>;\n    if (status === \"exhausted\") return <Badge variant=\"secondary\">Consultations Exhausted</Badge>;\n    return <Badge>{status}</Badge>;\n  };\n\n  const getPlanName = (plan: string) => {\n    if (plan === \"monthly\") return \"Monthly\";\n    if (plan === \"six-month\") return \"6 Months\";\n    if (plan === \"annual\") return \"Annual\";\n    return plan;\n  };\n\n  const totalConsultations = subscription?.consultationsRemaining !== undefined\n    ? (subscription.subscriptionPlan === \"monthly\" ? 2\n      : subscription.subscriptionPlan === \"six-month\" ? 18\n      : 48)\n    : 0;\n\n  const used = totalConsultations - (subscription?.consultationsRemaining || 0);\n  const remaining = subscription?.consultationsRemaining || 0;\n  const percentage = totalConsultations > 0 ? (used / totalConsultations) * 100 : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">User Dashboard</h1>\n            <p className=\"text-sm text-muted-foreground\">Welcome back!</p>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => logoutMutation.mutate()}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-8 space-y-6\">\n        {/* Subscription Status or Prompt */}\n        {subscription ? (\n          <>\n            {/* Subscription Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CreditCard className=\"h-5 w-5\" />\n                  Subscription Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Plan</p>\n                    <p className=\"font-semibold\" data-testid=\"text-plan\">{getPlanName(subscription.subscriptionPlan)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Start Date</p>\n                    <p className=\"font-semibold\" data-testid=\"text-start-date\">\n                      {format(new Date(subscription.subscriptionStartDate), \"dd MMM yyyy\")}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">End Date</p>\n                    <p className=\"font-semibold\" data-testid=\"text-end-date\">\n                      {format(new Date(subscription.subscriptionEndDate), \"dd MMM yyyy\")}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Amount Paid</p>\n                    <p className=\"font-semibold\" data-testid=\"text-amount-paid\">₹{subscription.amountPaid}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Coupon Code</p>\n                    <p className=\"font-semibold\" data-testid=\"text-coupon\">{subscription.discountCoupon || \"N/A\"}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Status</p>\n                    <div data-testid=\"badge-status\">{getStatusBadge(subscription.status)}</div>\n                  </div>\n                </div>\n\n                {subscription.status === \"exhausted\" && (\n                  <Alert className=\"border-amber-200 bg-amber-50\">\n                    <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n                    <AlertDescription className=\"text-amber-800\">\n                      ⚠️ You have used all your consultations for this plan. Please purchase a top-up plan to continue.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Consultation Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  Consultation Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"text-total-consultations\">{totalConsultations}</p>\n                    <p className=\"text-sm text-muted-foreground\">Total</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-amber-600\" data-testid=\"text-used-consultations\">{used}</p>\n                    <p className=\"text-sm text-muted-foreground\">Used</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-remaining-consultations\">{remaining}</p>\n                    <p className=\"text-sm text-muted-foreground\">Remaining</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Progress</span>\n                    <span className=\"font-semibold\">{Math.round(percentage)}%</span>\n                  </div>\n                  <Progress value={percentage} className=\"h-2\" data-testid=\"progress-consultations\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Book Appointment Card */}\n            {subscription.status === \"active\" && subscription.consultationsRemaining > 0 && (\n              <Card className=\"border-primary/20 bg-gradient-to-br from-primary/5 to-primary/10\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    Book a Consultation\n                  </CardTitle>\n                  <CardDescription>\n                    Schedule a veterinary consultation for your bird\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Button\n                    onClick={() => navigate(\"/book-appointment\")}\n                    size=\"lg\"\n                    className=\"w-full\"\n                    data-testid=\"button-book-appointment\"\n                  >\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Book Appointment Now\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </>\n        ) : (\n          <SubscriptionPrompt />\n        )}\n\n        {/* Bird Details Section */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bird className=\"h-5 w-5\" />\n                My Birds\n              </CardTitle>\n              <CardDescription>Manage your bird's information</CardDescription>\n            </div>\n            <Button onClick={handleAddNewBird} data-testid=\"button-add-bird\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Bird\n            </Button>\n          </CardHeader>\n          <CardContent>\n            {birdsLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n              </div>\n            ) : birds.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Bird className=\"h-12 w-12 mx-auto mb-4 opacity-20\" />\n                <p>No birds added yet. Click \"Add Bird\" to get started.</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {birds.map((bird: BirdDetail) => (\n                  <Card key={bird.id} className=\"border-2\" data-testid={`card-bird-${bird.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg\">{bird.birdName}</CardTitle>\n                          <CardDescription>{bird.species}</CardDescription>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => handleEditBird(bird)}\n                            data-testid={`button-edit-bird-${bird.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => setDeleteBirdId(bird.id)}\n                            data-testid={`button-delete-bird-${bird.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2 text-sm\">\n                      {bird.ringId && (\n                        <div>\n                          <span className=\"text-muted-foreground\">Ring ID:</span> {bird.ringId}\n                        </div>\n                      )}\n                      {bird.weight && (\n                        <div>\n                          <span className=\"text-muted-foreground\">Weight:</span> {bird.weight}g\n                        </div>\n                      )}\n                      {bird.age && (\n                        <div>\n                          <span className=\"text-muted-foreground\">Age:</span> {bird.age}\n                        </div>\n                      )}\n                      {bird.issues && (\n                        <div>\n                          <span className=\"text-muted-foreground\">Issues:</span>\n                          <p className=\"mt-1 text-xs\">{bird.issues}</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Bird Form Dialog */}\n      <Dialog open={showBirdForm} onOpenChange={(open) => {\n        setShowBirdForm(open);\n        if (!open) {\n          setEditingBird(null);\n          form.reset();\n        }\n      }}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>{editingBird ? \"Edit Bird Details\" : \"Add New Bird\"}</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitBird)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"birdName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bird Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., Charlie\" data-testid=\"input-bird-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"species\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Species *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., Macaw, Cockatoo\" data-testid=\"input-species\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ringId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Ring ID</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., ABC123\" data-testid=\"input-ring-id\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"weight\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Weight (grams)</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"number\" placeholder=\"e.g., 450\" data-testid=\"input-weight\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"age\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Age</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., 2 years, 6 months\" data-testid=\"input-age\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"issues\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Issues / Symptoms</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Describe any health issues, symptoms, or behavioral concerns\"\n                        rows={4}\n                        data-testid=\"textarea-issues\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-2 justify-end\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowBirdForm(false);\n                    setEditingBird(null);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel-bird\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={saveBirdMutation.isPending}\n                  data-testid=\"button-save-bird\"\n                >\n                  {saveBirdMutation.isPending ? \"Saving...\" : (editingBird ? \"Update\" : \"Save\")}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deleteBirdId} onOpenChange={() => setDeleteBirdId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Bird?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this bird? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteBirdId && deleteBirdMutation.mutate(deleteBirdId)}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":22770},"client/src/components/ReviewCarousel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star, Pause, Play, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { reviewsData, type Review } from \"@/lib/reviewsData\";\n\nexport default function ReviewCarousel() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [hasFocus, setHasFocus] = useState(false);\n\n  useEffect(() => {\n    if (isPaused || isHovered || hasFocus) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      setCurrentIndex((prev) => (prev + 1) % reviewsData.length);\n    }, 5000); // Change review every 5 seconds\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isPaused, isHovered, hasFocus, currentIndex]);\n\n  const goToPrevious = () => {\n    setCurrentIndex((prev) => (prev - 1 + reviewsData.length) % reviewsData.length);\n  };\n\n  const goToNext = () => {\n    setCurrentIndex((prev) => (prev + 1) % reviewsData.length);\n  };\n\n  const currentReview = reviewsData[currentIndex];\n\n  const renderStars = (rating: number) => {\n    return (\n      <div className=\"flex gap-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-4 w-4 ${\n              star <= rating\n                ? \"fill-amber-400 text-amber-400\"\n                : \"text-muted-foreground\"\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Card\n      className=\"relative overflow-hidden\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onFocus={() => setHasFocus(true)}\n      onBlur={() => setHasFocus(false)}\n    >\n      <CardContent className=\"p-6 md:p-8\">\n        <div className=\"min-h-[200px] flex flex-col justify-between\">\n          {/* Review Content */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-bold text-foreground\" data-testid={`review-name-${currentReview.id}`}>\n                  {currentReview.name}\n                </h3>\n                <div className=\"mt-1\" data-testid={`review-rating-${currentReview.id}`}>\n                  {renderStars(currentReview.rating)}\n                </div>\n              </div>\n\n              {/* Navigation Arrows - Desktop */}\n              <div className=\"hidden sm:flex items-center gap-2\">\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={goToPrevious}\n                  aria-label=\"Previous review\"\n                  data-testid=\"button-review-prev\"\n                  className=\"h-8 w-8\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={goToNext}\n                  aria-label=\"Next review\"\n                  data-testid=\"button-review-next\"\n                  className=\"h-8 w-8\"\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <p className=\"text-muted-foreground leading-relaxed\" data-testid={`review-text-${currentReview.id}`}>\n              \"{currentReview.review}\"\n            </p>\n          </div>\n\n          {/* Controls */}\n          <div className=\"flex items-center justify-between mt-6 pt-4 border-t\">\n            {/* Progress Indicators */}\n            <div className=\"flex gap-1.5\">\n              {reviewsData.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => setCurrentIndex(index)}\n                  className={`h-2 rounded-full transition-all ${\n                    index === currentIndex\n                      ? \"bg-primary w-8\"\n                      : \"bg-muted-foreground/30 w-2 hover:bg-muted-foreground/50\"\n                  }`}\n                  aria-label={`Go to review ${index + 1}`}\n                  aria-current={index === currentIndex ? \"true\" : undefined}\n                  role=\"tab\"\n                  data-testid={`review-indicator-${index}`}\n                />\n              ))}\n            </div>\n\n            {/* Play/Pause Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={() => setIsPaused(!isPaused)}\n              aria-label={isPaused ? \"Resume auto-play\" : \"Pause auto-play\"}\n              data-testid=\"button-review-toggle-play\"\n              className=\"h-8 w-8\"\n            >\n              {isPaused ? (\n                <Play className=\"h-4 w-4\" />\n              ) : (\n                <Pause className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n\n          {/* Mobile Navigation Arrows */}\n          <div className=\"flex sm:hidden items-center justify-center gap-4 mt-4\">\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              onClick={goToPrevious}\n              aria-label=\"Previous review\"\n              data-testid=\"button-review-prev-mobile\"\n              className=\"h-10 w-10\"\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n            <span className=\"text-sm text-muted-foreground\">\n              {currentIndex + 1} / {reviewsData.length}\n            </span>\n            <Button\n              size=\"icon\"\n              variant=\"outline\"\n              onClick={goToNext}\n              aria-label=\"Next review\"\n              data-testid=\"button-review-next-mobile\"\n              className=\"h-10 w-10\"\n            >\n              <ChevronRight className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5924},"client/src/components/OTPVerification.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2, CheckCircle2, XCircle } from \"lucide-react\";\n\ninterface OTPVerificationProps {\n  phone: string;\n  onVerified: () => void;\n  onCancel?: () => void;\n}\n\nexport function OTPVerification({ phone, onVerified, onCancel }: OTPVerificationProps) {\n  const [otp, setOtp] = useState(\"\");\n  const [resendCooldown, setResendCooldown] = useState(0);\n  const [isVerified, setIsVerified] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (resendCooldown > 0) {\n      const timer = setTimeout(() => setResendCooldown(resendCooldown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [resendCooldown]);\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async (data: { phone: string; otp: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/otp/verify\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setIsVerified(true);\n      toast({\n        title: \"Success!\",\n        description: data.message || \"OTP verified successfully!\",\n      });\n      setTimeout(() => {\n        onVerified();\n      }, 1500);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid or expired OTP. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resendOtpMutation = useMutation({\n    mutationFn: async (data: { phone: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/otp/resend\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setResendCooldown(30);\n      toast({\n        title: \"OTP Sent\",\n        description: data.message || \"A new OTP has been sent to your mobile number.\",\n      });\n    },\n    onError: (error: any) => {\n      if (error.message.includes(\"wait\")) {\n        toast({\n          title: \"Please Wait\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Failed to Send OTP\",\n          description: error.message || \"Please try again later.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleVerify = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (otp.length !== 4) {\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please enter a 4-digit OTP\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyOtpMutation.mutate({ phone, otp });\n  };\n\n  const handleResend = () => {\n    resendOtpMutation.mutate({ phone });\n  };\n\n  const formatPhone = (phoneNumber: string) => {\n    if (phoneNumber.length === 10) {\n      return `+91 ${phoneNumber.slice(0, 5)} ${phoneNumber.slice(5)}`;\n    }\n    return phoneNumber;\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"otp-verification-container\">\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex justify-center\">\n          {isVerified ? (\n            <CheckCircle2 className=\"h-12 w-12 text-green-500\" data-testid=\"icon-verified\" />\n          ) : (\n            <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-2xl\">📱</span>\n            </div>\n          )}\n        </div>\n        <h3 className=\"text-lg font-semibold\" data-testid=\"text-title\">\n          {isVerified ? \"Verified!\" : \"Verify Your Mobile Number\"}\n        </h3>\n        <p className=\"text-sm text-muted-foreground\" data-testid=\"text-description\">\n          {isVerified \n            ? \"Your mobile number has been verified successfully!\"\n            : `Enter the 4-digit code sent to ${formatPhone(phone)}`\n          }\n        </p>\n      </div>\n\n      {!isVerified && (\n        <form onSubmit={handleVerify} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"otp\">Enter OTP</Label>\n            <Input\n              id=\"otp\"\n              type=\"text\"\n              inputMode=\"numeric\"\n              pattern=\"[0-9]*\"\n              maxLength={4}\n              placeholder=\"1234\"\n              value={otp}\n              onChange={(e) => setOtp(e.target.value.replace(/\\D/g, \"\"))}\n              className=\"text-center text-2xl tracking-widest font-semibold\"\n              disabled={verifyOtpMutation.isPending}\n              data-testid=\"input-otp\"\n              autoFocus\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={verifyOtpMutation.isPending || otp.length !== 4}\n            data-testid=\"button-verify-otp\"\n          >\n            {verifyOtpMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Verifying...\n              </>\n            ) : (\n              \"Verify OTP\"\n            )}\n          </Button>\n\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Didn't receive the code?</span>\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleResend}\n              disabled={resendCooldown > 0 || resendOtpMutation.isPending}\n              data-testid=\"button-resend-otp\"\n              className=\"p-0 h-auto hover:bg-transparent\"\n            >\n              {resendOtpMutation.isPending ? (\n                <Loader2 className=\"h-3 w-3 animate-spin mr-1\" />\n              ) : null}\n              {resendCooldown > 0 \n                ? `Resend in ${resendCooldown}s` \n                : \"Resend OTP\"\n              }\n            </Button>\n          </div>\n\n          {onCancel && (\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={onCancel}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n          )}\n        </form>\n      )}\n    </div>\n  );\n}\n","size_bytes":6296},"client/src/components/SubscriptionPrompt.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Sparkles, Calendar, DollarSign, ArrowRight, HeartPulse } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function SubscriptionPrompt() {\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border-2 border-primary/20 bg-gradient-to-br from-primary/5 to-transparent\">\n        <CardContent className=\"p-6 space-y-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className=\"p-3 rounded-full bg-primary/10\">\n              <Sparkles className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-bold mb-2\" data-testid=\"prompt-heading\">\n                Unlock Expert Bird Care Today!\n              </h3>\n              <p className=\"text-muted-foreground text-sm\">\n                Get personalized consultations with Dr. B. Anand Rathore, an experienced exotic bird specialist. \n                Save up to 35% with our subscription plans!\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n            {/* Monthly Plan */}\n            <Card className=\"border-2 hover-elevate active-elevate-2 cursor-pointer transition-all\" data-testid=\"card-monthly-plan\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center space-y-2\">\n                  <Badge variant=\"outline\" className=\"mb-2\">\n                    Monthly\n                  </Badge>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-3xl font-bold text-primary\">₹2,100</p>\n                    <p className=\"text-xs text-muted-foreground\">per month</p>\n                  </div>\n                  <div className=\"pt-3 space-y-2\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Calendar className=\"h-4 w-4 text-primary\" />\n                      <span>2 consultations/mo</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className=\"text-xs bg-orange-600 hover:bg-orange-700\">\n                        <DollarSign className=\"h-3 w-3 mr-1\" />\n                        20% OFF\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* 6-Month Plan */}\n            <Card className=\"border-2 hover-elevate active-elevate-2 cursor-pointer transition-all\" data-testid=\"card-six-month-plan\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center space-y-2\">\n                  <Badge variant=\"outline\" className=\"mb-2\">\n                    6 Months\n                  </Badge>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-3xl font-bold text-primary\">₹21,600</p>\n                    <p className=\"text-xs text-muted-foreground\">₹3,600/month</p>\n                  </div>\n                  <div className=\"pt-3 space-y-2\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Calendar className=\"h-4 w-4 text-primary\" />\n                      <span>3 consultations/mo</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className=\"text-xs bg-primary hover:bg-primary/90\">\n                        <DollarSign className=\"h-3 w-3 mr-1\" />\n                        25% OFF\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Annual Plan - Best Value */}\n            <Card className=\"border-2 border-green-500/50 bg-gradient-to-br from-green-50/50 to-transparent dark:from-green-950/20 hover-elevate active-elevate-2 cursor-pointer transition-all relative\" data-testid=\"card-annual-plan\">\n              <div className=\"absolute -top-2 -right-2 bg-amber-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg z-10\">\n                Best Value\n              </div>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center space-y-2\">\n                  <Badge variant=\"outline\" className=\"mb-2 border-green-600 text-green-600\">\n                    Annual\n                  </Badge>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-3xl font-bold text-green-600\">₹37,400</p>\n                    <p className=\"text-xs text-muted-foreground\">₹3,117/month</p>\n                  </div>\n                  <div className=\"pt-3 space-y-2\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Calendar className=\"h-4 w-4 text-green-600\" />\n                      <span>4 consultations/mo</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className=\"text-xs bg-green-600 hover:bg-green-700\">\n                        <DollarSign className=\"h-3 w-3 mr-1\" />\n                        35% OFF\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Benefits */}\n          <div className=\"mt-6 p-4 rounded-lg bg-muted/30 space-y-3\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <HeartPulse className=\"h-5 w-5 text-primary\" />\n              <h4 className=\"font-semibold\">What's Included:</h4>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n              <div className=\"flex items-start gap-2\">\n                <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n                <span>Deworming & preventive care</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n                <span>Personalized diet plans</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n                <span>Supplements guidance</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n                <span>Behavior training tips</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n                <span>24/7 WhatsApp support</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n                <span>Expert consultation calls</span>\n              </div>\n            </div>\n          </div>\n\n          {/* CTA */}\n          <div className=\"flex flex-col sm:flex-row gap-3 mt-6\">\n            <Link href=\"/subscription\" className=\"flex-1\">\n              <Button size=\"lg\" className=\"w-full\" data-testid=\"button-subscribe-now\">\n                Subscribe Now\n                <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </Link>\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"lg\" data-testid=\"button-learn-more\">\n                Learn More\n              </Button>\n            </Link>\n          </div>\n\n          <p className=\"text-xs text-center text-muted-foreground mt-4\">\n            Join hundreds of bird owners who trust Dr. Anand Rathore for expert care\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7918},"server/otp.ts":{"content":"import bcrypt from 'bcryptjs';\n\nexport function generateOTP(): string {\n  return Math.floor(1000 + Math.random() * 9000).toString();\n}\n\nexport async function encryptOTP(otp: string): Promise<string> {\n  const salt = await bcrypt.genSalt(10);\n  return bcrypt.hash(otp, salt);\n}\n\nexport async function validateOTP(inputOTP: string, encryptedOTP: string): Promise<boolean> {\n  return bcrypt.compare(inputOTP, encryptedOTP);\n}\n\nexport function getOTPExpiry(): Date {\n  const expiry = new Date();\n  expiry.setMinutes(expiry.getMinutes() + 5);\n  return expiry;\n}\n\nexport function isOTPExpired(expiryDate: Date | null): boolean {\n  if (!expiryDate) return true;\n  return new Date() > new Date(expiryDate);\n}\n\nexport function canResendOTP(lastSentAt: Date | null): boolean {\n  if (!lastSentAt) return true;\n  const cooldownSeconds = 30;\n  const timeSinceLastSent = (new Date().getTime() - new Date(lastSentAt).getTime()) / 1000;\n  return timeSinceLastSent >= cooldownSeconds;\n}\n\nexport function getRemainingCooldown(lastSentAt: Date | null): number {\n  if (!lastSentAt) return 0;\n  const cooldownSeconds = 30;\n  const timeSinceLastSent = (new Date().getTime() - new Date(lastSentAt).getTime()) / 1000;\n  const remaining = Math.ceil(cooldownSeconds - timeSinceLastSent);\n  return remaining > 0 ? remaining : 0;\n}\n","size_bytes":1304},"server/twilio.ts":{"content":"import twilio from 'twilio';\n\nlet connectionSettings: any;\n\nasync function getCredentials() {\n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=twilio',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  if (!connectionSettings || (!connectionSettings.settings.account_sid || !connectionSettings.settings.api_key || !connectionSettings.settings.api_key_secret)) {\n    throw new Error('Twilio not connected');\n  }\n  return {\n    accountSid: connectionSettings.settings.account_sid,\n    apiKey: connectionSettings.settings.api_key,\n    apiKeySecret: connectionSettings.settings.api_key_secret,\n    phoneNumber: connectionSettings.settings.phone_number\n  };\n}\n\nexport async function getTwilioClient() {\n  const { accountSid, apiKey, apiKeySecret } = await getCredentials();\n  return twilio(apiKey, apiKeySecret, {\n    accountSid: accountSid\n  });\n}\n\nexport async function getTwilioFromPhoneNumber() {\n  const { phoneNumber } = await getCredentials();\n  return phoneNumber;\n}\n\nexport async function sendSMS(to: string, message: string): Promise<{ success: boolean; messageSid?: string; error?: string }> {\n  try {\n    const client = await getTwilioClient();\n    const fromNumber = await getTwilioFromPhoneNumber();\n\n    if (!fromNumber) {\n      throw new Error('Twilio phone number not configured');\n    }\n\n    // Format the \"to\" number - add +91 if not already present\n    let toNumber = to.trim();\n    if (!toNumber.startsWith('+')) {\n      toNumber = `+91${toNumber}`;\n    }\n\n    console.log(`Sending SMS from ${fromNumber} to ${toNumber}`);\n\n    const result = await client.messages.create({\n      body: message,\n      from: fromNumber,\n      to: toNumber\n    });\n\n    return {\n      success: true,\n      messageSid: result.sid\n    };\n  } catch (error: any) {\n    console.error('Twilio SMS error:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to send SMS'\n    };\n  }\n}\n","size_bytes":2440},"client/src/pages/TermsAndConditions.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Home } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function TermsAndConditions() {\n  useEffect(() => {\n    document.title = \"Terms and Conditions – Fancy Feathers India\";\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\n        \"content\",\n        \"Read the Terms and Conditions for Fancy Feathers India's subscription-based bird health and care consultation services.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold\">Terms and Conditions</h1>\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Welcome to Fancy Feathers India</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <p className=\"text-muted-foreground\">\n              By using our website and services, you agree to comply with the following Terms and Conditions.\n            </p>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Nature of Service</h3>\n              <p className=\"text-muted-foreground\">\n                Fancy Feathers India offers subscription-based bird health and care consultation services. We do not sell or trade live birds.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Subscriptions</h3>\n              <p className=\"text-muted-foreground\">\n                All subscription plans are meant for virtual consultations, expert advice, and guidance on exotic bird care and wellbeing.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Payments</h3>\n              <p className=\"text-muted-foreground\">\n                Payments for subscriptions and services are processed securely through our payment partners.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">User Responsibilities</h3>\n              <p className=\"text-muted-foreground\">\n                Users are responsible for providing accurate information about their pets to help our experts offer the best advice.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Disclaimer</h3>\n              <p className=\"text-muted-foreground\">\n                Fancy Feathers India does not replace physical veterinary treatment in emergencies. All advice is provided based on the details shared by the user.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Changes to Terms</h3>\n              <p className=\"text-muted-foreground\">\n                We reserve the right to modify these terms at any time. Updated terms will be available on this page.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <footer className=\"mt-12 pt-8 border-t\">\n          <div className=\"flex flex-wrap gap-4 justify-center text-sm\">\n            <Link href=\"/terms-and-conditions\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-terms\">\n              Terms and Conditions\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/cancellation-refund\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-refund\">\n              Cancellation & Refund\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/shipping-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-shipping\">\n              Shipping Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/contact-us\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">\n              Contact Us\n            </Link>\n          </div>\n          <p className=\"text-center text-muted-foreground text-xs mt-4\">\n            © 2025 Fancy Feathers India. All rights reserved.\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5074},"client/src/pages/PrivacyPolicy.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Home } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PrivacyPolicy() {\n  useEffect(() => {\n    document.title = \"Privacy Policy – Fancy Feathers India\";\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\n        \"content\",\n        \"Read Fancy Feathers India's Privacy Policy to understand how we collect, use, and protect your personal information.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold\">Privacy Policy</h1>\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Your Privacy Matters</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <p className=\"text-muted-foreground\">\n              Fancy Feathers India values your privacy. This Privacy Policy explains how we collect and use your personal data.\n            </p>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Information We Collect</h3>\n              <p className=\"text-muted-foreground\">\n                We collect your name, contact number, and pet details when you subscribe or request a consultation.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Use of Information</h3>\n              <p className=\"text-muted-foreground\">\n                The information is used only for providing consultation services and managing your subscription.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Data Protection</h3>\n              <p className=\"text-muted-foreground\">\n                Your data is stored securely and never sold or shared with third parties.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Third-Party Integrations</h3>\n              <p className=\"text-muted-foreground\">\n                We use secure third-party payment gateways (e.g., Razorpay) to process payments. These providers may collect limited data as per their own privacy policies.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Your Rights</h3>\n              <p className=\"text-muted-foreground\">\n                You can contact us anytime to update or delete your personal data.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Contact</h3>\n              <p className=\"text-muted-foreground\">\n                For privacy-related inquiries, reach out at{\" \"}\n                <a href=\"mailto:support@fancyfeathers.co.in\" className=\"text-primary hover:underline\">\n                  support@fancyfeathers.co.in\n                </a>.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <footer className=\"mt-12 pt-8 border-t\">\n          <div className=\"flex flex-wrap gap-4 justify-center text-sm\">\n            <Link href=\"/terms-and-conditions\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-terms\">\n              Terms and Conditions\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/cancellation-refund\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-refund\">\n              Cancellation & Refund\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/shipping-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-shipping\">\n              Shipping Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/contact-us\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">\n              Contact Us\n            </Link>\n          </div>\n          <p className=\"text-center text-muted-foreground text-xs mt-4\">\n            © 2025 Fancy Feathers India. All rights reserved.\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5078},"client/src/pages/ContactUs.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Home, Mail, MessageCircle, Globe, MapPin, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ContactUs() {\n  useEffect(() => {\n    document.title = \"Contact Us – Fancy Feathers India\";\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\n        \"content\",\n        \"Get in touch with Fancy Feathers India for consultation services, subscription support, and exotic bird care advice.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold\">Contact Us</h1>\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">We're Happy to Help</CardTitle>\n            <p className=\"text-muted-foreground text-sm\">\n              We're happy to help you with any questions about your subscription or services.\n            </p>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"flex items-start gap-3\">\n                <Mail className=\"w-5 h-5 text-primary mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold mb-1\">Email</h3>\n                  <a \n                    href=\"mailto:ali@fancyfeathers.co.in\" \n                    className=\"text-muted-foreground hover:text-primary transition-colors\"\n                    data-testid=\"link-email\"\n                  >\n                    ali@fancyfeathers.co.in\n                  </a>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-3\">\n                <MessageCircle className=\"w-5 h-5 text-primary mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold mb-1\">WhatsApp</h3>\n                  <a \n                    href=\"https://wa.me/919014284059\" \n                    className=\"text-muted-foreground hover:text-primary transition-colors\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    data-testid=\"link-whatsapp\"\n                  >\n                    +91 9014284059\n                  </a>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-3\">\n                <Globe className=\"w-5 h-5 text-primary mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold mb-1\">Website</h3>\n                  <a \n                    href=\"https://fancyfeathers.co.in\" \n                    className=\"text-muted-foreground hover:text-primary transition-colors\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    data-testid=\"link-website\"\n                  >\n                    fancyfeathers.co.in\n                  </a>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-3\">\n                <MapPin className=\"w-5 h-5 text-primary mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold mb-1\">Location</h3>\n                  <p className=\"text-muted-foreground\">Hyderabad, India</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-start gap-3 pt-4 border-t\">\n              <Clock className=\"w-5 h-5 text-primary mt-1\" />\n              <div>\n                <h3 className=\"font-semibold mb-1\">Business Hours</h3>\n                <p className=\"text-muted-foreground\">Monday – Saturday, 10:00 AM – 7:00 PM</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <footer className=\"mt-12 pt-8 border-t\">\n          <div className=\"flex flex-wrap gap-4 justify-center text-sm\">\n            <Link href=\"/terms-and-conditions\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-terms\">\n              Terms and Conditions\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/cancellation-refund\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-refund\">\n              Cancellation & Refund\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/shipping-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-shipping\">\n              Shipping Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/contact-us\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">\n              Contact Us\n            </Link>\n          </div>\n          <p className=\"text-center text-muted-foreground text-xs mt-4\">\n            © 2025 Fancy Feathers India. All rights reserved.\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5729},"client/src/pages/CancellationRefund.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Home } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function CancellationRefund() {\n  useEffect(() => {\n    document.title = \"Cancellation & Refund Policy – Fancy Feathers India\";\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\n        \"content\",\n        \"Learn about Fancy Feathers India's cancellation and refund policy for our consultation-based bird care services.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold\">Cancellation & Refund Policy</h1>\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Our Refund & Cancellation Policy</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <p className=\"text-muted-foreground\">\n              At Fancy Feathers India, we strive to provide the best possible service. However, since we deal in digital and consultation-based services, our refund and cancellation policy is as follows:\n            </p>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Consultation Subscriptions</h3>\n              <p className=\"text-muted-foreground\">\n                Once a subscription is activated and consultation slots are scheduled, payments are non-refundable.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Cancellations Before Activation</h3>\n              <p className=\"text-muted-foreground\">\n                If you wish to cancel a subscription before your first consultation is scheduled, you may request a cancellation within 24 hours of payment.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Refund Approval</h3>\n              <p className=\"text-muted-foreground\">\n                Approved refunds (if applicable) will be processed to the original payment method within 7-10 business days.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Contact for Support</h3>\n              <p className=\"text-muted-foreground\">\n                For refund or cancellation requests, email us at{\" \"}\n                <a href=\"mailto:support@fancyfeathers.co.in\" className=\"text-primary hover:underline\">\n                  support@fancyfeathers.co.in\n                </a>{\" \"}\n                or WhatsApp us at{\" \"}\n                <a href=\"https://wa.me/919014284059\" className=\"text-primary hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  +91 9014284059\n                </a>.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <footer className=\"mt-12 pt-8 border-t\">\n          <div className=\"flex flex-wrap gap-4 justify-center text-sm\">\n            <Link href=\"/terms-and-conditions\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-terms\">\n              Terms and Conditions\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/cancellation-refund\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-refund\">\n              Cancellation & Refund\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/shipping-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-shipping\">\n              Shipping Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/contact-us\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">\n              Contact Us\n            </Link>\n          </div>\n          <p className=\"text-center text-muted-foreground text-xs mt-4\">\n            © 2025 Fancy Feathers India. All rights reserved.\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4908},"client/src/pages/ShippingPolicy.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Home } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ShippingPolicy() {\n  useEffect(() => {\n    document.title = \"Shipping Policy – Fancy Feathers India\";\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute(\n        \"content\",\n        \"Fancy Feathers India offers digital consultation services only. Learn about our shipping policy for digital services.\"\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-3xl font-bold\">Shipping Policy</h1>\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Digital Services Only</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <p className=\"text-muted-foreground\">\n              We do not ship or sell any physical products or live birds.\n            </p>\n\n            <p className=\"text-muted-foreground\">\n              All our offerings, including consultation and subscription services, are digital and accessible online. Therefore, no shipping or delivery applies to our services.\n            </p>\n\n            <p className=\"text-muted-foreground\">\n              If in the future any digital reports or certificates are shared, they will be delivered electronically via email or WhatsApp.\n            </p>\n          </CardContent>\n        </Card>\n\n        <footer className=\"mt-12 pt-8 border-t\">\n          <div className=\"flex flex-wrap gap-4 justify-center text-sm\">\n            <Link href=\"/terms-and-conditions\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-terms\">\n              Terms and Conditions\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/cancellation-refund\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-refund\">\n              Cancellation & Refund\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/shipping-policy\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-shipping\">\n              Shipping Policy\n            </Link>\n            <span className=\"text-muted-foreground\">•</span>\n            <Link href=\"/contact-us\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">\n              Contact Us\n            </Link>\n          </div>\n          <p className=\"text-center text-muted-foreground text-xs mt-4\">\n            © 2025 Fancy Feathers India. All rights reserved.\n          </p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3543},"server/cache.ts":{"content":"// Simple in-memory cache with TTL for active users metric\ninterface CacheEntry {\n  value: number;\n  expiresAt: number;\n}\n\nclass MetricsCache {\n  private cache: Map<string, CacheEntry> = new Map();\n  \n  set(key: string, value: number, ttlSeconds: number): void {\n    const expiresAt = Date.now() + (ttlSeconds * 1000);\n    this.cache.set(key, { value, expiresAt });\n  }\n  \n  get(key: string): number | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      return undefined;\n    }\n    \n    // Check if expired\n    if (Date.now() > entry.expiresAt) {\n      this.cache.delete(key);\n      return undefined;\n    }\n    \n    return entry.value;\n  }\n  \n  getWithExpiry(key: string): { value: number; expiresInSeconds: number } | undefined {\n    const entry = this.cache.get(key);\n    if (!entry) {\n      return undefined;\n    }\n    \n    // Check if expired\n    const now = Date.now();\n    if (now > entry.expiresAt) {\n      this.cache.delete(key);\n      return undefined;\n    }\n    \n    const expiresInSeconds = Math.ceil((entry.expiresAt - now) / 1000);\n    return { value: entry.value, expiresInSeconds };\n  }\n  \n  delete(key: string): void {\n    this.cache.delete(key);\n  }\n  \n  clear(): void {\n    this.cache.clear();\n  }\n}\n\n// Singleton instance\nexport const metricsCache = new MetricsCache();\n\n// Helper to generate active users count\nexport function generateActiveUsers(min: number = 5, max: number = 19): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","size_bytes":1497},"client/src/components/SocialProofWidget.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, TrendingUp } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface MetricCardProps {\n  icon: React.ReactNode;\n  value: number;\n  label: string;\n  subtext: string;\n  isAnimating?: boolean;\n}\n\nfunction MetricCard({ icon, value, label, subtext, isAnimating }: MetricCardProps) {\n  const [displayValue, setDisplayValue] = useState(0);\n\n  // Animate count-up on mount and when value changes\n  useEffect(() => {\n    const duration = 1000; // 1 second animation\n    const steps = 30;\n    const increment = (value - displayValue) / steps;\n    const stepDuration = duration / steps;\n\n    if (Math.abs(value - displayValue) < 0.1) {\n      setDisplayValue(value);\n      return;\n    }\n\n    const timer = setInterval(() => {\n      setDisplayValue((prev) => {\n        const next = prev + increment;\n        if ((increment > 0 && next >= value) || (increment < 0 && next <= value)) {\n          clearInterval(timer);\n          return value;\n        }\n        return next;\n      });\n    }, stepDuration);\n\n    return () => clearInterval(timer);\n  }, [value, displayValue]);\n\n  return (\n    <Card \n      className={`\n        hover-elevate \n        transition-all \n        duration-300 \n        ${isAnimating ? 'animate-pulse' : ''}\n      `}\n      data-testid={`metric-card-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"p-3 bg-primary/10 rounded-full\">\n            {icon}\n          </div>\n          <div className=\"flex-1\">\n            <div \n              className=\"text-3xl font-bold text-primary mb-1\"\n              data-testid={`metric-value-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              {Math.round(displayValue)}\n            </div>\n            <div className=\"text-sm font-medium text-foreground mb-1\">{label}</div>\n            <div className=\"text-xs text-muted-foreground\">{subtext}</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function SocialProofWidget() {\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  // Poll active users every 60 seconds\n  const { data: activeUsersData } = useQuery<{ value: number; expires_in_seconds: number }>({\n    queryKey: [\"/api/metrics/active-users\"],\n    refetchInterval: 60000, // 60 seconds\n  });\n\n  // Poll active subscriptions every 30 seconds\n  const { data: activeSubscriptionsData, refetch: refetchSubscriptions } = useQuery<{ \n    value: number; \n    last_updated: string \n  }>({\n    queryKey: [\"/api/metrics/active-subscriptions\"],\n    refetchInterval: 30000, // 30 seconds\n  });\n\n  // Trigger animation when subscriptions value changes\n  useEffect(() => {\n    if (activeSubscriptionsData) {\n      setIsUpdating(true);\n      const timer = setTimeout(() => setIsUpdating(false), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [activeSubscriptionsData?.value]);\n\n  // Expose refetch function globally for payment success integration\n  useEffect(() => {\n    (window as any).refetchActiveSubscriptions = refetchSubscriptions;\n  }, [refetchSubscriptions]);\n\n  const activeUsers = activeUsersData?.value ?? 12;\n  const activeSubscriptions = activeSubscriptionsData?.value ?? 100;\n\n  return (\n    <div className=\"mb-8\" data-testid=\"social-proof-widget\">\n      <div className=\"text-center mb-4\">\n        <h3 className=\"text-xl font-semibold text-foreground\">\n          Join the Fancy Feathers community\n        </h3>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <MetricCard\n          icon={<Users className=\"w-6 h-6 text-primary\" />}\n          value={activeUsers}\n          label=\"Active users right now\"\n          subtext=\"Approximate numbers updated in real-time\"\n        />\n        \n        <MetricCard\n          icon={<TrendingUp className=\"w-6 h-6 text-primary\" />}\n          value={activeSubscriptions}\n          label=\"Active subscriptions\"\n          subtext=\"Growing every day — join now\"\n          isAnimating={isUpdating}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":4207},"client/src/pages/BookAppointment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format, addDays, isBefore, isAfter, startOfDay } from \"date-fns\";\nimport { Calendar as CalendarIcon, Clock, AlertCircle, CheckCircle2, Phone, Bird } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\n\nexport default function BookAppointment() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n  const [selectedSlot, setSelectedSlot] = useState<string | undefined>(undefined);\n  const [birdName, setBirdName] = useState(\"\");\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const { data: userAccount, isLoading: loadingAccount } = useQuery<any>({\n    queryKey: [\"/api/user-account/session\"],\n  });\n\n  const { data: subscription, isLoading: loadingSubscription } = useQuery<any>({\n    queryKey: [\"/api/user-account/subscription\"],\n    enabled: !!userAccount?.account,\n  });\n\n  const { data: settings } = useQuery<any>({\n    queryKey: [\"/api/appointments/settings\"],\n  });\n\n  const { data: availableSlots, isLoading: loadingSlots } = useQuery<string[]>({\n    queryKey: [\"/api/appointments/slots\", selectedDate?.toISOString()],\n    enabled: !!selectedDate,\n  });\n\n  const { data: userBirds, isLoading: loadingBirds } = useQuery<any[]>({\n    queryKey: [\"/api/bird-details\"],\n    enabled: !!userAccount?.account,\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: {\n      appointmentDate: string;\n      slotStartTime: string;\n      birdName: string;\n      symptoms: string;\n    }) => {\n      return await apiRequest(\"/api/appointments\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-account/subscription\"] });\n      setShowConfirmDialog(false);\n      toast({\n        title: \"Appointment Booked!\",\n        description: \"Your consultation has been scheduled successfully.\",\n      });\n      navigate(\"/user-dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to book appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (loadingAccount || loadingSubscription) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-12\">\n          <Skeleton className=\"h-96 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!userAccount?.account) {\n    navigate(\"/user-account/login\");\n    return null;\n  }\n\n  if (!subscription || subscription.status !== \"Active\" || subscription.consultationsRemaining === 0) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-12\">\n          <Card className=\"max-w-2xl mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertCircle className=\"h-5 w-5 text-destructive\" />\n                No Active Subscription\n              </CardTitle>\n              <CardDescription>\n                You need an active subscription with available consultations to book appointments.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {subscription?.consultationsRemaining === 0 && (\n                <p className=\"text-sm text-muted-foreground\">\n                  You have used all consultations in your current plan. Please renew or upgrade your subscription.\n                </p>\n              )}\n              <div className=\"flex gap-4\">\n                <Button onClick={() => navigate(\"/subscription\")} data-testid=\"button-subscribe\">\n                  Subscribe Now\n                </Button>\n                <Button variant=\"outline\" onClick={() => navigate(\"/user-dashboard\")} data-testid=\"button-dashboard\">\n                  Go to Dashboard\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const maxDate = addDays(new Date(), settings?.maxDaysAdvanceBooking || 30);\n\n  const handleConfirmBooking = () => {\n    if (!selectedDate || !selectedSlot || !birdName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a date, time slot, and bird name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setShowConfirmDialog(true);\n  };\n\n  const handleFinalConfirm = () => {\n    if (!selectedDate || !selectedSlot || !birdName.trim()) return;\n\n    createAppointmentMutation.mutate({\n      appointmentDate: format(selectedDate, \"yyyy-MM-dd\"),\n      slotStartTime: selectedSlot,\n      birdName: birdName.trim(),\n      symptoms: symptoms.trim(),\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">\n              Book Consultation\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Schedule a veterinary consultation for your bird\n            </p>\n            <div className=\"mt-4 flex gap-4 flex-wrap\">\n              <Badge variant=\"secondary\" data-testid=\"badge-consultations\">\n                <Clock className=\"h-3 w-3 mr-1\" />\n                {subscription.consultationsRemaining} consultations remaining\n              </Badge>\n              <Badge variant=\"outline\" data-testid=\"badge-plan\">\n                {subscription.subscriptionPlan} Plan\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CalendarIcon className=\"h-5 w-5\" />\n                  Select Date\n                </CardTitle>\n                <CardDescription>\n                  Choose a date within the next {settings?.maxDaysAdvanceBooking || 30} days\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Calendar\n                  mode=\"single\"\n                  selected={selectedDate}\n                  onSelect={setSelectedDate}\n                  disabled={(date) =>\n                    isBefore(date, startOfDay(new Date())) ||\n                    isAfter(date, maxDate) ||\n                    (settings?.weekendBookingEnabled === false && (date.getDay() === 0 || date.getDay() === 6))\n                  }\n                  className=\"rounded-md border\"\n                  data-testid=\"calendar-date-picker\"\n                />\n              </CardContent>\n            </Card>\n\n            <div className=\"space-y-6\">\n              {selectedDate && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Clock className=\"h-5 w-5\" />\n                      Available Time Slots\n                    </CardTitle>\n                    <CardDescription>\n                      {format(selectedDate, \"EEEE, MMMM d, yyyy\")}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {loadingSlots ? (\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                      </div>\n                    ) : availableSlots && availableSlots.length > 0 ? (\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        {availableSlots.map((slot: string) => (\n                          <Button\n                            key={slot}\n                            variant={selectedSlot === slot ? \"default\" : \"outline\"}\n                            onClick={() => setSelectedSlot(slot)}\n                            className=\"w-full\"\n                            data-testid={`button-slot-${slot.replace(\":\", \"\")}`}\n                          >\n                            {slot}\n                          </Button>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground text-center py-8\">\n                        No available slots for this date\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n\n              {selectedSlot && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Bird className=\"h-5 w-5\" />\n                      Appointment Details\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">\n                        Bird Name <span className=\"text-destructive\">*</span>\n                      </label>\n                      {loadingBirds ? (\n                        <Skeleton className=\"h-10 w-full\" />\n                      ) : userBirds && userBirds.length > 0 ? (\n                        <Select value={birdName} onValueChange={setBirdName}>\n                          <SelectTrigger data-testid=\"select-bird\">\n                            <SelectValue placeholder=\"Select your bird\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {userBirds.map((bird: any) => (\n                              <SelectItem key={bird.id} value={bird.birdName}>\n                                {bird.birdName} ({bird.species})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <Input\n                          placeholder=\"Enter bird name\"\n                          value={birdName}\n                          onChange={(e) => setBirdName(e.target.value)}\n                          data-testid=\"input-bird-name\"\n                        />\n                      )}\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">\n                        Symptoms / Reason for Consultation\n                      </label>\n                      <Textarea\n                        placeholder=\"Describe any symptoms or concerns...\"\n                        value={symptoms}\n                        onChange={(e) => setSymptoms(e.target.value)}\n                        rows={4}\n                        data-testid=\"textarea-symptoms\"\n                      />\n                    </div>\n\n                    <Button\n                      className=\"w-full\"\n                      onClick={handleConfirmBooking}\n                      disabled={!birdName.trim()}\n                      data-testid=\"button-book-appointment\"\n                    >\n                      Book Appointment\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <DialogContent data-testid=\"dialog-confirm-booking\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n              Confirm Appointment\n            </DialogTitle>\n            <DialogDescription>\n              Please review your appointment details before confirming\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Date</p>\n                <p className=\"text-sm font-semibold\" data-testid=\"text-confirm-date\">\n                  {selectedDate && format(selectedDate, \"MMMM d, yyyy\")}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Time</p>\n                <p className=\"text-sm font-semibold\" data-testid=\"text-confirm-time\">{selectedSlot}</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Bird</p>\n                <p className=\"text-sm font-semibold\" data-testid=\"text-confirm-bird\">{birdName}</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Consultations After</p>\n                <p className=\"text-sm font-semibold\" data-testid=\"text-confirm-consultations\">\n                  {(subscription?.consultationsRemaining || 1) - 1} remaining\n                </p>\n              </div>\n            </div>\n            {symptoms && (\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-1\">Symptoms</p>\n                <p className=\"text-sm\" data-testid=\"text-confirm-symptoms\">{symptoms}</p>\n              </div>\n            )}\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowConfirmDialog(false)}\n              data-testid=\"button-cancel-confirm\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleFinalConfirm}\n              disabled={createAppointmentMutation.isPending}\n              data-testid=\"button-final-confirm\"\n            >\n              {createAppointmentMutation.isPending ? \"Booking...\" : \"Confirm Booking\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14994},"client/src/components/AdminAppointments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon, Clock, CheckCircle2, XCircle, Eye, Edit2, Ban } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminAppointments() {\n  const [filterDate, setFilterDate] = useState<string>(\"\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [filterPlan, setFilterPlan] = useState<string>(\"all\");\n  const [selectedAppointment, setSelectedAppointment] = useState<any>(null);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const [showBlockSlotDialog, setShowBlockSlotDialog] = useState(false);\n  const [adminNotes, setAdminNotes] = useState(\"\");\n  const [blockDate, setBlockDate] = useState<Date | undefined>(undefined);\n  const [blockTime, setBlockTime] = useState(\"\");\n  const [blockReason, setBlockReason] = useState(\"\");\n  const { toast } = useToast();\n\n  // Fetch all appointments\n  const { data: appointments, isLoading: loadingAppointments } = useQuery<any[]>({\n    queryKey: [\"/api/admin/appointments\", filterDate, filterStatus, filterPlan],\n  });\n\n  // Fetch blocked slots\n  const { data: blockedSlots } = useQuery<any[]>({\n    queryKey: [\"/api/admin/blocked-slots\"],\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({\n      id,\n      data,\n    }: {\n      id: string;\n      data: { status?: string; adminNotes?: string };\n    }) => {\n      return await apiRequest(`/api/admin/appointments/${id}`, \"PATCH\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/appointments\"] });\n      setShowDetailsDialog(false);\n      toast({\n        title: \"Appointment Updated\",\n        description: \"Appointment has been updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const blockSlotMutation = useMutation({\n    mutationFn: async (data: {\n      blockDate: string;\n      slotStartTime?: string;\n      reason: string;\n    }) => {\n      return await apiRequest(\"/api/admin/blocked-slots\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/blocked-slots\"] });\n      setShowBlockSlotDialog(false);\n      setBlockDate(undefined);\n      setBlockTime(\"\");\n      setBlockReason(\"\");\n      toast({\n        title: \"Slot Blocked\",\n        description: \"Time slot has been blocked successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Block Slot\",\n        description: error.message || \"Failed to block time slot\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBlockedSlotMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/admin/blocked-slots/${id}`, \"DELETE\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/blocked-slots\"] });\n      toast({\n        title: \"Slot Unblocked\",\n        description: \"Time slot has been unblocked successfully\",\n      });\n    },\n  });\n\n  const handleViewDetails = (appointment: any) => {\n    setSelectedAppointment(appointment);\n    setAdminNotes(appointment.adminNotes || \"\");\n    setShowDetailsDialog(true);\n  };\n\n  const handleUpdateStatus = (status: string) => {\n    if (!selectedAppointment) return;\n    updateAppointmentMutation.mutate({\n      id: selectedAppointment.id,\n      data: { status },\n    });\n  };\n\n  const handleSaveNotes = () => {\n    if (!selectedAppointment) return;\n    updateAppointmentMutation.mutate({\n      id: selectedAppointment.id,\n      data: { adminNotes },\n    });\n  };\n\n  const handleBlockSlot = () => {\n    if (!blockDate) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    blockSlotMutation.mutate({\n      blockDate: format(blockDate, \"yyyy-MM-dd\"),\n      slotStartTime: blockTime || undefined,\n      reason: blockReason,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const badges = {\n      scheduled: <Badge className=\"bg-blue-500\">Scheduled</Badge>,\n      completed: <Badge className=\"bg-green-500\">Completed</Badge>,\n      canceled: <Badge variant=\"destructive\">Canceled</Badge>,\n    };\n    return badges[status as keyof typeof badges] || <Badge>{status}</Badge>;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CalendarIcon className=\"h-5 w-5\" />\n                Appointment Management\n              </CardTitle>\n              <CardDescription>View and manage all consultation appointments</CardDescription>\n            </div>\n            <Button onClick={() => setShowBlockSlotDialog(true)} data-testid=\"button-block-slot\">\n              <Ban className=\"h-4 w-4 mr-2\" />\n              Block Slot\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Input\n              type=\"date\"\n              value={filterDate}\n              onChange={(e) => setFilterDate(e.target.value)}\n              placeholder=\"Filter by date\"\n              data-testid=\"input-filter-date\"\n            />\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger data-testid=\"select-filter-status\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"canceled\">Canceled</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={filterPlan} onValueChange={setFilterPlan}>\n              <SelectTrigger data-testid=\"select-filter-plan\">\n                <SelectValue placeholder=\"Filter by plan\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Plans</SelectItem>\n                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                <SelectItem value=\"six-month\">6-Month</SelectItem>\n                <SelectItem value=\"annual\">Annual</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setFilterDate(\"\");\n                setFilterStatus(\"all\");\n                setFilterPlan(\"all\");\n              }}\n              data-testid=\"button-clear-filters\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n\n          {loadingAppointments ? (\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n            </div>\n          ) : appointments && appointments.length > 0 ? (\n            <div className=\"border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date & Time</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Bird</TableHead>\n                    <TableHead>Plan</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {appointments.map((apt: any) => (\n                    <TableRow key={apt.id} data-testid={`row-appointment-${apt.id}`}>\n                      <TableCell>\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">\n                            {format(new Date(apt.appointmentDate), \"MMM d, yyyy\")}\n                          </span>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {apt.slotStartTime} - {apt.slotEndTime}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{apt.fullName}</span>\n                          <span className=\"text-sm text-muted-foreground\">{apt.userPhone}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>{apt.birdName}</TableCell>\n                      <TableCell>\n                        {apt.subscriptionPlan ? (\n                          <Badge variant=\"outline\">\n                            {apt.subscriptionPlan === \"monthly\"\n                              ? \"Monthly\"\n                              : apt.subscriptionPlan === \"six-month\"\n                              ? \"6-Month\"\n                              : \"Annual\"}\n                          </Badge>\n                        ) : (\n                          \"-\"\n                        )}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(apt.status)}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleViewDetails(apt)}\n                          data-testid={`button-view-${apt.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <p className=\"text-center text-muted-foreground py-8\">No appointments found</p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Blocked Slots Section */}\n      {blockedSlots && blockedSlots.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Ban className=\"h-5 w-5\" />\n              Blocked Time Slots\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {blockedSlots.map((slot: any) => (\n                <div\n                  key={slot.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  data-testid={`blocked-slot-${slot.id}`}\n                >\n                  <div>\n                    <p className=\"font-medium\">\n                      {format(new Date(slot.blockDate), \"MMM d, yyyy\")}\n                      {slot.slotStartTime && ` - ${slot.slotStartTime}`}\n                    </p>\n                    {slot.reason && (\n                      <p className=\"text-sm text-muted-foreground\">{slot.reason}</p>\n                    )}\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => deleteBlockedSlotMutation.mutate(slot.id)}\n                    data-testid={`button-unblock-${slot.id}`}\n                  >\n                    Unblock\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Appointment Details Dialog */}\n      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-appointment-details\">\n          <DialogHeader>\n            <DialogTitle>Appointment Details</DialogTitle>\n          </DialogHeader>\n          {selectedAppointment && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Patient</p>\n                  <p className=\"font-semibold\">{selectedAppointment.fullName}</p>\n                  <p className=\"text-sm text-muted-foreground\">{selectedAppointment.userPhone}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Bird</p>\n                  <p className=\"font-semibold\">{selectedAppointment.birdName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Date & Time</p>\n                  <p className=\"font-semibold\">\n                    {format(new Date(selectedAppointment.appointmentDate), \"MMM d, yyyy\")}\n                  </p>\n                  <p className=\"text-sm\">\n                    {selectedAppointment.slotStartTime} - {selectedAppointment.slotEndTime}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                  {getStatusBadge(selectedAppointment.status)}\n                </div>\n              </div>\n\n              {selectedAppointment.symptoms && (\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground mb-1\">Symptoms</p>\n                  <p className=\"text-sm border rounded-lg p-3\">{selectedAppointment.symptoms}</p>\n                </div>\n              )}\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Admin Notes</label>\n                <Textarea\n                  value={adminNotes}\n                  onChange={(e) => setAdminNotes(e.target.value)}\n                  rows={4}\n                  placeholder=\"Add notes about this appointment...\"\n                  data-testid=\"textarea-admin-notes\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                {selectedAppointment.status === \"scheduled\" && (\n                  <>\n                    <Button\n                      onClick={() => handleUpdateStatus(\"completed\")}\n                      className=\"flex-1\"\n                      data-testid=\"button-mark-completed\"\n                    >\n                      <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                      Mark Completed\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={() => handleUpdateStatus(\"canceled\")}\n                      className=\"flex-1\"\n                      data-testid=\"button-cancel-appointment\"\n                    >\n                      <XCircle className=\"h-4 w-4 mr-2\" />\n                      Cancel\n                    </Button>\n                  </>\n                )}\n                <Button\n                  variant=\"outline\"\n                  onClick={handleSaveNotes}\n                  disabled={adminNotes === selectedAppointment.adminNotes}\n                  data-testid=\"button-save-notes\"\n                >\n                  Save Notes\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Block Slot Dialog */}\n      <Dialog open={showBlockSlotDialog} onOpenChange={setShowBlockSlotDialog}>\n        <DialogContent data-testid=\"dialog-block-slot\">\n          <DialogHeader>\n            <DialogTitle>Block Time Slot</DialogTitle>\n            <DialogDescription>\n              Block a specific time slot or entire day to prevent bookings\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Select Date</label>\n              <Calendar\n                mode=\"single\"\n                selected={blockDate}\n                onSelect={setBlockDate}\n                className=\"rounded-md border\"\n                data-testid=\"calendar-block-date\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Time Slot (leave empty to block entire day)\n              </label>\n              <Input\n                type=\"time\"\n                value={blockTime}\n                onChange={(e) => setBlockTime(e.target.value)}\n                data-testid=\"input-block-time\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Reason</label>\n              <Input\n                value={blockReason}\n                onChange={(e) => setBlockReason(e.target.value)}\n                placeholder=\"e.g., Holiday, Personal leave\"\n                data-testid=\"input-block-reason\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowBlockSlotDialog(false)}\n              data-testid=\"button-cancel-block\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleBlockSlot}\n              disabled={!blockDate || blockSlotMutation.isPending}\n              data-testid=\"button-confirm-block\"\n            >\n              {blockSlotMutation.isPending ? \"Blocking...\" : \"Block Slot\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18508}},"version":2}